using Jewar.CodeLibrary;
using Jewar.Handler;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml.Linq;
using Amazon;
using Amazon.Runtime;
using Amazon.S3;
using Amazon.S3.Model;
using System.IO;
using System.Security.Cryptography;
using Microsoft.IdentityModel.Tokens;
using static DotNetOpenAuth.OpenId.Extensions.AttributeExchange.WellKnownAttributes;
using Nest;
using System.Threading.Tasks;
using System.Security.Policy;
using System.Net.Http.Headers;
using System.Net.Http;
using Elasticsearch.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using Amazon.DataPipeline.Model;
using Amazon.AutoScaling.Model;
using System.Collections;
using System.Web.Services.Description;
//using Microsoft.Web.Administration;

namespace Jewar_API
{
    public partial class AppAPIV3 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)    
        {
            try
            {

                string platform = "";


                if (Request.QueryString["platform"] != null)
                {
                    if (!checkForSQLInjection(Request["platform"]))
                    {
                        platform = Request.QueryString["platform"].ToString();
                    }
                }



                string clientIpAddress = GetClientIpAddress();
                //int a = DBHandler.InsertDataForOrder(string.Format("insert into apicallingapis(IPAddress,Created)values('{0}', '{1}')", Request.UserHostAddress.ToString(), DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));
                DataTable dtCheckIPs = DBHandler.GetData(string.Format("SELECT COUNT(*) as TotalIPs FROM blockips WHERE   IPAddress = '{0}'", clientIpAddress));

                if (dtCheckIPs.Rows.Count > 0)
                {
                    if (Convert.ToInt32(dtCheckIPs.Rows[0]["TotalIPs"]) > 0)
                    {
                        //Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        //Response.StatusCode = 403;
                        //Response.StatusDescription = "Forbidden";
                        string Message = "{\"message\":\"Access from your IP address is blocked. Please contact the system administrator for assistance.\"}";


                        //Response.Write("Access from your IP address is blocked. Please contact the system administrator for assistance.");
                        Response.Write(Message);
                        //Response.End();

                        return;
                    }
                }


                long a = DBHandler.InsertDataWithIDForOrder(string.Format("insert into apicalllogs(APIName, Platform,Created,IPAddress) values('{0}','{1}','{2}','{3}')", Request.Url.ToString(), platform, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), clientIpAddress));


                //DataTable dtCheckCallLogs = DBHandler.GetData(string.Format("SELECT COUNT(*) as TotalAPICalls FROM apicalllogs WHERE DATE_FORMAT(created, '%Y-%m-%d %H:%i:00') = '{0}' and IPAddress = '{1}'", DateTime.Now.ToString("yyyy-MM-dd H:mm:00"), clientIpAddress));

                //if (dtCheckCallLogs.Rows.Count > 0)
                //{
                //    if (Convert.ToInt32(dtCheckCallLogs.Rows[0]["TotalAPICalls"]) > 100)
                //    {
                //        //Response.Clear();
                //        //Response.ContentType = "application/json; charset=utf-8";
                //        //Response.StatusCode = 429;
                //        //Response.StatusDescription = "Too Many Requests";
                //        string Message = "{\"message\":\"The client has exceeded the rate limit. Please try again later.\"}";

                //        Response.Write(Message);
                //        Response.ContentType = "application/json; charset=utf-8";

                //        //Response.StatusCode = 429;


                //        return;
                //    }
                //}


            }
            catch (Exception ee)
            { }



            if (Request.QueryString["Method"] != null)
            {

                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdetailbyslug")
                {
                    GetProductDetailBySlug();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdetailbyslugv1")
                {
                    GetProductDetailBySlugV1();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdetailbyslugv2")
                {
                    GetProductDetailBySlugV2();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdetailbyslugelasticsearch")
                {
                    GetProductDetailBySlugElasticSearchAsync();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdescriptionbyslug")
                {
                    GetProductDescriptionBySlug();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdescriptionbyslugv1")
                {
                    GetProductDescriptionBySlugV1();
                }
                

                //if (Context.Request.Headers["Authorization"] != null)
                //{
                //    var token = Context.Request.Headers.GetValues("Authorization")[0];

                //    if (token != null)
                //    {
                //        string ValidateJWTToken = ValidateJWT(token); //"Valid"; // 
                //        if (ValidateJWTToken == "Valid")
                //        {
                //            DataTable dtCheckToken = DBHandler.GetData(string.Format("select * from apilogintoken where token = '{0}' and Expiry > '{1}'", token, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));


                //            if (dtCheckToken.Rows.Count == 0)
                //            {
                //                string Message = "{\"error\": \"Invalid Token\", \"message\": \"token is invalid or expired\"}";

                //                Response.Clear();
                //                Response.ContentType = "application/json; charset=utf-8";
                //                Response.Write(Message);
                //                return;
                //            }
                //            else
                //            {
                //                if (Convert.ToDateTime(Convert.ToDateTime(dtCheckToken.Rows[0]["LastCallsTime"]).ToString("H:mm:ss")) > Convert.ToDateTime(DateTime.Now.ToString("H:mm:ss")))
                //                {
                //                    if (Convert.ToInt32(dtCheckToken.Rows[0]["APICalls"]) > 500)
                //                    {
                //                        //string Message = "{\"error\": \"Invalid Token\", \"message\": \"too many calls\"}";

                //                        //Response.Clear();
                //                        //Response.ContentType = "application/json; charset=utf-8";
                //                        //Response.Write(Message);

                //                        if (Convert.ToDateTime(DateTime.Now.ToString("H:mm:ss")) > Convert.ToDateTime(Convert.ToDateTime(dtCheckToken.Rows[0]["LastCallsTime"]).ToString("H:mm:ss")))
                //                        {
                //                            int a = DBHandler.InsertDataWithID(string.Format("update apilogintoken set APICalls = 0 , LastCallsTime = '{0}' , Message = 'too many calls' where id = '{1}'", DateTime.Now.AddMinutes(1).ToString("yyyy-MM-dd H:mm"), dtCheckToken.Rows[0]["ID"].ToString()));
                //                        }

                //                        //return;
                //                    }
                //                    else
                //                    {
                //                        int a = DBHandler.InsertDataWithID(string.Format("update apilogintoken set APICalls = APICalls + 1 where id = '{0}'", dtCheckToken.Rows[0]["ID"].ToString()));
                //                    }
                //                }

                //                if (Convert.ToDateTime(DateTime.Now.ToString("H:mm:ss")) > Convert.ToDateTime(Convert.ToDateTime(dtCheckToken.Rows[0]["LastCallsTime"]).ToString("H:mm:ss")))
                //                {
                //                    int a = DBHandler.InsertDataWithID(string.Format("update apilogintoken set APICalls = 0 , LastCallsTime = '{0}' where id = '{1}'", DateTime.Now.AddMinutes(1).ToString("yyyy-MM-dd H:mm"), dtCheckToken.Rows[0]["ID"].ToString()));
                //                }
                //            }
                //        }
                //        else
                //        {
                //            string Message = "{\"error\": \"Invalid Token\", \"message\": \"" + ValidateJWTToken + "\"}";

                //            Response.Clear();
                //            Response.ContentType = "application/json; charset=utf-8";
                //            Response.Write(Message);
                //            return;
                //        }
                //    }
                //    else
                //    {
                //        string Message = "{\"error\": \"Invalid Token\", \"message\": \"token is required\"}";

                //        Response.Clear();
                //        Response.ContentType = "application/json; charset=utf-8";
                //        Response.Write(Message);
                //        return;
                //    }

                //}
                //else
                //{
                //    string Message = "{\"error\": \"Invalid Token\", \"message\": \"token is required\"}";

                //    Response.Clear();
                //    Response.ContentType = "application/json; charset=utf-8";
                //    Response.Write(Message);
                //    return;
                //}


                //string platform = "app";

                //try
                //{
                //    if (Request.QueryString["platform"] != null)
                //    {
                //        if (!checkForSQLInjection(Request["platform"]))
                //        {
                //            platform = Request.QueryString["platform"].ToString();
                //        }
                //    }
                //}
                //catch (Exception e1)
                //{ }

                //try
                //{
                //    if (Request.QueryString["Method"].ToString().ToLower() != "searchtext")
                //    {
                //       // long a = DBHandler.InsertDataWithIDForOrder(string.Format("insert into apicalllogs(APIName, Platform,Created) values('{0}','{1}','{2}')", Request.Url.ToString(), platform, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));
                //    }
                //}
                //catch (Exception ee)
                //{ }


                if (Request.QueryString["Method"].ToString().ToLower() == "customerlogin")
                {
                    CustomerLogin();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "checkverificationcode")
                {
                    CheckVerificationCode();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbranch")
                {
                    GetBranch();
                }


                else if (Request.QueryString["Method"].ToString().ToLower() == "getbranchbyprovience")
                {
                    GetBranchByProvience();
                }
                

                else if (Request.QueryString["Method"].ToString().ToLower() == "getcities")
                {
                    GetCities();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getareas")
                {
                    GetAreas();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbanners")
                {
                    GetBanners();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbannersnew")
                {
                    GetBannersNew();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbannersnewv1")
                {
                    GetBannersNewV1();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbannersnewweb")
                {
                    GetBannersNewWeb();
                }
                
                else if (Request.QueryString["Method"].ToString().ToLower() == "getproductbanners")
                {
                    GetProductBanners();
                }


                else if (Request.QueryString["Method"].ToString().ToLower() == "getproductbannersv1")
                {
                    GetProductBannersV1();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getproductbannersbyslug")
                {
                    GetProductBannersBySlug();
                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "getproductbannersbyslugv1")
                {
                    GetProductBannersBySlugV1();
                }


                else if (Request.QueryString["Method"].ToString().ToLower() == "getcategoryimages")
                {
                    GetCategoryImages();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbrandimages")
                {
                    GetBrandImages();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbycategory")
                {
                    GetProductByCategory();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbycategoryv1")
                {
                    GetProductByCategoryV1();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbycategoryslug")
                {
                    GetProductByCategorySlug();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbycategoryslugv1")
                {
                    GetProductByCategorySlugV1();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbycategoryslugv2")
                {
                    GetProductByCategorySlugV2();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getallmedicalproducts")
                {
                    GetAllMedicalProducts();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getallmedicalproductsv1")
                {
                    GetAllMedicalProductsV1();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbybrand")
                {
                    GetProductByBrand();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbybrandv1")
                {
                    GetProductByBrandV1();
                }
                
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbybrandslug")
                {
                    GetProductByBrandSlug();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbybrandslugv1")
                {
                    GetProductByBrandSlugV1();
                }

                
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdetailbyid")
                {
                    GetProductDetailByID();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdetailbyidv1")
                {
                    GetProductDetailByIDV1();
                }
                //if (Request.QueryString["Method"].ToString().ToLower() == "getproductdetailbyslug")
                //{
                //    GetProductDetailBySlug();
                //}
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductdescriptionbyid")
                {
                    GetProductDescriptionByID();
                }
                //if (Request.QueryString["Method"].ToString().ToLower() == "getproductdescriptionbyslug")
                //{
                //    GetProductDescriptionBySlug();
                //}

                if (Request.QueryString["Method"].ToString().ToLower() == "searchproduct")
                {
                    SearchProduct();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "searchtext")
                {
                    SearchText();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "addaddress")
                {
                    AddAddress();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getaddress")
                {
                    GetAddress();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "checkorderstatus")
                {
                    CheckOrderStatus();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "checkvoucher")
                {
                    CheckVoucher();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "myorders")
                {
                    MyOrders();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "mypendingorders")
                {
                    MyPendingOrders();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "mycancelledorders")
                {
                    MyCancelledOrders();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "mycompletedorders")
                {
                    MyCompletedOrders();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getorderdetail")
                {
                    GetOrderDetail();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "deleteaddress")
                {
                    DeleteAddress();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "addinquiry")
                {
                    AddInquiry();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "cancelorder")
                {
                    CancelOrder();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "rateorder")
                {
                    RateOrder();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getmultipleproducts")
                {
                    GetMultipleProducts();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getmultipleproductsv1")
                {
                    GetMultipleProductsV1();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getcomplainttype")
                {
                    GetComplaintType();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "addcomplaint")
                {
                    AddComplaint();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "gettrending")
                {
                    GetTrending();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getnotification")
                {
                    GetNotification();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "addcreditcard")
                {
                    AddCreditCard();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getcustomercreditcard")
                {
                    GetCustomerCreditCard();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "test")
                {
                    test();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getchildcategory")
                {
                    GetChildCategory();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getchildcategorybyslug")
                {
                    GetChildCategoryBySlug();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getcancelreason")
                {
                    GetCancelReason();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbyalphabet")
                {
                    GetProductByAlphabet();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getproductbyalphabetv1")
                {
                    GetProductByAlphabetV1();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "updateprescription")
                {
                    UpdatePrescription();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getbranchschedule")
                {
                    GetBranchSchedule();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "meezanreversal")
                {
                    MeezanReversal();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "meezanrefund")
                {
                    MeezanRefund();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getcustomerloginlog")
                {
                    //GetCustomerLoginLog();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getbuilddetails")
                {
                    GetBuildDetails();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getbuilddetailsv1")
                {
                    GetBuildDetailsV1();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getordercount")
                {
                    GetOrderCount();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "addfeedback")
                {
                    AddFeedback();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "customeradditionalinfo")
                {
                    CustomerAdditionalInfo();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getcustomerinfo")
                {
                    GetCustomerInfo();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "addviewunavailableitem")
                {
                    AddViewUnavailableItem();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getcustomervouchers")
                {
                    GetCustomerVouchers();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "deletecreditcard")
                {
                    DeleteCreditCard();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "gettaxonomyvalue")
                {
                    GetTaxonomyValue();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getorderjson")
                {
                    GetOrderJSON();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "settaxonomyvalue")
                {
                    SetTaxonomyValue();
                }
                
                if (Request.QueryString["Method"].ToString().ToLower() == "getvoucher")
                {
                    GetVoucher();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getnewslug")
                {
                    GetNewSlug();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbankbanners")
                {
                    GetBankBanners();
                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "getproductsforsitemap")
                {
                    GetProductsforSiteMap();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getcategoriesforsitemap")
                {
                    GetCategoriesforSiteMap();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getbrandsforsitemap")
                {
                    GetBrandsforSiteMap();
                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "getblogsforsitemap")
                {
                    GetBlogsforSiteMap();
                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "getbannerforcheckout")
                {
                    GetBannerforCheckout();
                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "checktypebyslug")
                {
                    CheckTypeBySlug();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "bloglisting")
                {
                    BlogListing();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "videolisting")
                {
                    VideoListing();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "videosuggestion")
                {
                    VideoSuggestion();
                }


                if (Request.QueryString["Method"].ToString().ToLower() == "getblogbyslug")
                {
                    GetBlogBySlug();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getmenuhierarchi")
                {
                    GetMenuHierarchi();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getbrands")
                {
                    GetBrands();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getsuggestiveproducts")
                {
                    GetSuggestiveProducts();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getsuggestiveproductsv1")
                {
                    GetSuggestiveProductsV1();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getsuggestiveproductsv2")
                {
                    GetSuggestiveProductsV2();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getcustomerotp")
                {
                    GetCustomerOTP();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getallordersbydate")
                {
                    GetAllOrdersbyDate();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "mapapilog")
                {
                    MapAPILog();
                }
                if (Request.QueryString["Method"].ToString().ToLower() == "getapicalllogs")
                {
                    GetAPICallLogs();
                }

                if (Request.QueryString["Method"].ToString().ToLower() == "getbranchcodebylatlng")
                {
                    GetBranchCodeByLatLng();
                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "processorder")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    ProcessOrder(strmContents);


                }
                else if (Request.QueryString["Method"].ToString().ToLower() == "processordernew")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    ProcessOrderNew(strmContents);


                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "updateinventory")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    //UpdateInventory(strmContents);


                }


                else if (Request.QueryString["Method"].ToString().ToLower() == "searchproductbyjson")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    SearchProductByJSON(strmContents);


                }


                else if (Request.QueryString["Method"].ToString().ToLower() == "searchproductbyjsonv1")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    SearchProductByJSONV1(strmContents);


                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "addcustomertoken")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    AddCustomerToken(strmContents);


                }


                else if (Request.QueryString["Method"].ToString().ToLower() == "addcustomertokenweb")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    AddCustomerTokenWeb(strmContents);


                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "checkvouchernew")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    CheckVoucherNew(strmContents);


                }

                else if (Request.QueryString["Method"].ToString().ToLower() == "addaddressv1")
                {
                    System.IO.Stream str; String strmContents;
                    Int32 counter, strLen, strRead;
                    // Create a Stream object.
                    str = Request.InputStream;
                    // Find number of bytes in stream.
                    strLen = Convert.ToInt32(str.Length);
                    // Create a byte array.
                    byte[] strArr = new byte[strLen];
                    // Read stream into byte array.
                    strRead = str.Read(strArr, 0, strLen);

                    // Convert byte array to a text string.
                    strmContents = "";
                    for (counter = 0; counter < strLen; counter++)
                    {
                        strmContents = strmContents + System.Text.Encoding.ASCII.GetString(new[] { strArr[counter] });
                    }

                    AddAddressV1(strmContents);


                }
                 

            }
        }
              
        public void CustomerLogin()
        {
            try
            {
                string Message = "";
              

                if (Request["Number"] != null && Request["Name"] != null)
                {
                    if (!checkForSQLInjection(Request["Number"]) && !checkForSQLInjection(Request["Name"]))
                    {
                        string Phone = Request.QueryString["Number"].ToString().Replace("'", "''");
                        string Name = Request.QueryString["Name"].ToString().Replace("'", "''");
                        if (!Name.Contains("hacker"))
                        {
                            DataTable dtCheckToken = DBHandler.GetData(string.Format("SELECT COUNT(*) as TotalSMS FROM logsms WHERE DATE_FORMAT(created, '%Y-%m-%d %H:%i:00') = '{0}'", DateTime.Now.ToString("yyyy-MM-dd H:mm:00")));

                            if (dtCheckToken.Rows.Count > 0)
                            {
                                if (Convert.ToInt32(dtCheckToken.Rows[0]["TotalSMS"]) < 10)
                                { 
                                    string CustomerEmail = "";
                                    if (Request["Email"] != null)
                                    {
                                        if (!checkForSQLInjection(Request["Email"]))
                                        {
                                            CustomerEmail = Request["Email"].ToString();
                                        }
                                    }


                                    DataTable dtSubscribe = DBHandler.GetData("SELECT * FROM customer WHERE mobile = '" + Phone.Replace("'", "''") + "'");
                                    if (dtSubscribe.Rows.Count > 0)
                                    {
                                        string VerificationCode = GenerateVerificationCode(); //dtSubscribe.Rows[0]["VerificationCode"].ToString(); // GenerateVerificationCode();

                                        if (VerificationCode == "")
                                        {
                                            VerificationCode = GenerateVerificationCode();
                                        }

                                        if (Phone == "03330000000")
                                        {
                                            VerificationCode = "1234";
                                        }

                                        int a = DBHandler.InsertDataWithID(string.Format("update customer set verificationcode = '{0}', name = '{1}', mobile  = '{2}', email  = '{3}' where id = '{4}'", VerificationCode, Name, Phone, CustomerEmail, dtSubscribe.Rows[0]["ID"].ToString()));

                                        //string SMSMessage = string.Format("Jewar verification code is : {0} ", VerificationCode);
                                        string SMSMessage = string.Format("Your OTP code for Jewar App is {0}. For queries, please dial 0311-113-8246 (8AM to 12AM)", VerificationCode);

                                        SMS.SendMessage(Phone.Replace("'", "''"), SMSMessage);

                                        try
                                        {
                                            //if (CustomerEmail != "")
                                            //{
                                            //    //string JewarEmail = "no-reply@Jewar.pk";

                                            //    Email.SendMail("admin@Jewar.pk", CustomerEmail, "Jewar Verification Code ", SMSMessage, "Jewar Pharmacy");
                                            //}
                                        }
                                        catch (Exception ee)
                                        { }

                                        string CustomerJWT = "";
                                        try
                                        {
                                            CustomerJWT = GenerateCustomerJWTToken(dtSubscribe.Rows[0]["ID"].ToString());
                                        }
                                        catch (Exception ee)
                                        { }
                                        //Message = "{\"responseType\": \"1\", \"NewCustomer\": \"true\",	\"Code\": \"" + VerificationCode + "\"}";
                                        Message = "{\"responseType\": \"1\", \"NewCustomer\": \"false\", \"CustomerID\": \"" + dtSubscribe.Rows[0]["ID"].ToString() + "\", \"CustomerToken\": \"" + CustomerJWT + "\", \"WalletAmount\": \"" + dtSubscribe.Rows[0]["WalletBalance"].ToString() + "\"}";
                                        //}

                                        try
                                        {
                                            int ab = DBHandler.InsertDataWithID(string.Format("insert into logcustomerlogin (CustomerID, Phone, VerificationCode, `Status`, Created, Name)Values('{0}','{1}','{2}','{3}','{4}','{5}')", dtSubscribe.Rows[0]["ID"].ToString(), Phone, VerificationCode, "Code Sent", DateTime.Now.ToString("yyyy-MM-dd H:mm"), Name));
                                        }
                                        catch (Exception eee)
                                        { }

                                    }
                                    else
                                    {
                                        string VerificationCode = ProcessNewAccount(Name, Phone, CustomerEmail);

                                        dtSubscribe = DBHandler.GetData("SELECT * FROM customer WHERE mobile = '" + Phone.Replace("'", "''") + "'");

                                        string CustomerJWT = "";
                                        try
                                        {
                                            CustomerJWT = GenerateCustomerJWTToken(dtSubscribe.Rows[0]["ID"].ToString());
                                        }
                                        catch (Exception ee)
                                        { }


                                        Message = "{\"responseType\": \"1\", \"NewCustomer\": \"true\", \"CustomerID\": \"" + dtSubscribe.Rows[0]["ID"].ToString() + "\", \"CustomerToken\": \"" + CustomerJWT + "\", \"WalletAmount\": \"" + dtSubscribe.Rows[0]["WalletBalance"].ToString() + "\"}";

                                        try
                                        {
                                            int ab = DBHandler.InsertDataWithID(string.Format("insert into logcustomerlogin (CustomerID, Phone, VerificationCode, `Status`, Created, Name)Values('{0}','{1}','{2}','{3}','{4}','{5}')", dtSubscribe.Rows[0]["ID"].ToString(), Phone, VerificationCode, "Code Sent", DateTime.Now.ToString("yyyy-MM-dd H:mm"), Name));
                                        }
                                        catch (Exception eee)
                                        { }

                                    }

                                    Response.Clear();
                                    Response.ContentType = "application/json; charset=utf-8";
                                    Response.Write(Message);


                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void CheckVerificationCode()
        {
            try
            {
                string Message = "";
                if (Request.QueryString["Name"] != null && Request.QueryString["Number"] != null && Request.QueryString["Code"] != null)
                {
                    if (!checkForSQLInjection(Request["Name"]) && !checkForSQLInjection(Request["Number"]) && !checkForSQLInjection(Request["Code"]))
                    {
                        string CustomerToken = "";

                      


                        string Name = Request.QueryString["Name"].ToString();
                        string Number = Request.QueryString["Number"].ToString();
                        string Code = Request.QueryString["Code"].ToString();


                        DataTable dtSubscribe = DBHandler.GetData("SELECT * FROM customer WHERE mobile = '" + Number.Replace("'", "''") + "'");
                        if (dtSubscribe.Rows.Count > 0)
                        {

                            //if (Request.QueryString["CustomerToken"] != null && Request.QueryString["CustomerToken"] != "")
                            //{
                            //    CustomerToken = Request.QueryString["CustomerToken"].ToString();
                            //    string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, dtSubscribe.Rows[0]["ID"].ToString()); //"Valid"; // 
                            //    //CustomerID = ValidateCustomerToken.Split(',')[1];
                            //    if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            //    {
                            //        Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\", \"CustomerID\": \"0\"}";
                            //        Response.Clear();
                            //        Response.ContentType = "application/json; charset=utf-8";
                            //        Response.Write(Message.ToString());

                            //        return;
                            //    }
                            //}
                            //else
                            //{
                            //    Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            //    Response.Clear();
                            //    Response.ContentType = "application/json; charset=utf-8";
                            //    Response.Write(Message.ToString());

                            //    return;
                            //}

                            string CustomerJWT = "";
                            try
                            {
                                CustomerJWT = GenerateCustomerJWTToken(dtSubscribe.Rows[0]["ID"].ToString());

                                //if (Number == "03112185189")
                                //{
                                //    CustomerJWT = "";
                                //}
                            }
                            catch (Exception ee)
                            { }


                            int IsMobileDealNotAvailed = Convert.ToInt32(dtSubscribe.Rows[0]["IsMobileDealNotAvailed"]);
                            if (dtSubscribe.Rows[0]["verificationcode"].ToString() == Code)
                            //if (Code == "1234")
                            {
                                int a = DBHandler.InsertDataWithID(string.Format("update customer set IsCustomerVerified = 1 , Name = '{0}' where id = '{1}'", Name, dtSubscribe.Rows[0]["ID"].ToString()));

                                Message = "{\"responseType\": \"1\", \"Message\": \"Customer Verified\", \"CustomerID\": \"" + dtSubscribe.Rows[0]["ID"].ToString() + "\", \"CustomerToken\": \"" + CustomerJWT + "\"}";


                                try
                                {
                                    int ab = DBHandler.InsertDataWithID(string.Format("insert into logcustomerlogin (CustomerID, Phone, VerificationCode, `Status`, Created, Modified, Name)Values('{0}','{1}','{2}','{3}','{4}','{4}','{5}')", dtSubscribe.Rows[0]["ID"].ToString(), Number, Code, "Code Verified", DateTime.Now.ToString("yyyy-MM-dd H:mm"), Name));
                                }
                                catch (Exception eee)
                                { }



                            }
                            else
                            {
                                Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Verification Code\", \"CustomerID\": \"" + dtSubscribe.Rows[0]["ID"].ToString() + "\", \"CustomerToken\": \"\"}";
                            }
                        }

                        else
                        {
                            Message = "{\"responseType\": \"0\",\"Message\": \"Number Not Exist\", \"CustomerID\": \"0\", \"CustomerToken\": \"\"}";
                        }

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);

                    }
                }
            }
            catch (Exception ex)
            { }
        }
        
        public void GetBranch()
        {
            try
            {
                string Message = "";
                string Number = "";
                string BranchCode = "";

                if (Request["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            BranchCode = " and BranchCode = '" + Request["BranchCode"] + "'";
                        }
                    }
                }

                DataTable table = DBHandler.GetData(string.Format("SELECT ID,BranchCode,Title,Description,Polygon,IsActive,CreatedBy,CreatedAt,UpdatedBy,UpdatedAt,Phone,Longitude,Latitude,Address,City,IsDefaultBranch,IsBackupBranch,DeliveryTime,UpdateStock,DeliveryMins ,ScheduleJSON, DeliveryFee, DeliveryFeeLimit,ImageURL as BranchImage, BranchTiming  FROM branch where isbackupbranch = 0 {0} ORDER BY Title", BranchCode));
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"","'") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "'") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void GetAPICallLogs()
        {
            try
            {
                string Message = "";
                string Platform = "";

                if (Request["Platform"] != null)
                {
                    if (!checkForSQLInjection(Request["Platform"]))
                    {
                        if (Request["Platform"].ToString() != "")
                        {
                            Platform = Request["Platform"];
                        }
                    }
                }

                if (Request["fresh"] != null)
                {
                    if (!checkForSQLInjection(Request["fresh"]))
                    {
                        if (Request["fresh"].ToString() == "true")
                        {
                            int a = DBHandler.InsertDataWithID(string.Format(" TRUNCATE  `apicalllogs`"));

                        }
                    }
                }


                DataTable table = DBHandler.GetData(string.Format("SELECT * FROM `apicalllogs` WHERE platform = '{0}'", Platform));
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "'") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "'") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }


        public void GetBranchByProvience()
        {
            try
            {
                string Message = "";
                string City = "";
                string Province = "";

                if (Request["Province"] != null)
                {
                    if (!checkForSQLInjection(Request["Province"]))
                    {
                        if (Request["Province"].ToString() != "")
                        {
                            Province = Request["Province"].ToString();
                        }
                    }
                }

                if (Request["City"] != null)
                {
                    if (!checkForSQLInjection(Request["City"]))
                    {
                        if (Request["City"].ToString() != "")
                        {
                            City = Request["City"].ToString();
                        }
                    }
                }

                DataTable table = DBHandler.GetData(string.Format("SELECT ID , Title , DeliveryMins ,Address ,Longitude ,Latitude ,IsActive ,IsBackupBranch ,CreatedBy ,BranchCode ,DeliveryFee ,DeliveryFeeLimit FROM branch WHERE Province = '{0}'  ", Province));
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "'") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "'") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void GetCities()
        {
            try
            {
                string Message = "";
                string Number = "";

                DataTable table = DBHandler.GetData("SELECT ID, Name   FROM cities where levelno = 0 ORDER BY NAME");
                var JSONString = new StringBuilder();
                
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

                     

            }
            catch (Exception ex)
            { }
        }

        public void GetComplaintType()
        {
            try
            {
                string Message = "";
                string Number = "";

                DataTable table = DBHandler.GetData("SELECT  * FROM taxonomy WHERE `name` = 'ComplaintType' ORDER BY `value` ");
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }
        
        public void GetTaxonomyValue()
        {
            try
            {
                string Message = "";
                string Value = "";


                //if (Request.UserHostAddress != null)
                //{


                //    DataTable dtCheckToken = DBHandler.GetData(string.Format("SELECT COUNT(oldupc) as TotalCalls FROM temp WHERE oldupc = '{0}' and DATE_FORMAT(created, '%Y-%m-%d %H:%i:00') = '{1}'", Request.UserHostAddress.ToString(), DateTime.Now.ToString("yyyy-MM-dd H:mm:00")));

                //    if (dtCheckToken.Rows.Count > 0)
                //    {
                //        if (Convert.ToInt32(dtCheckToken.Rows[0]["TotalCalls"]) > 5)
                //        {
                //            Message = "{\"responseType\": \"0\",\"Data\": [\"Bas kar day BSDK\"] }";


                //            Response.Clear();
                //            Response.ContentType = "application/json; charset=utf-8";
                //            Response.Write(Message.ToString());

                //            return;
                //        }
                //        else
                //        {
                //            int a = DBHandler.InsertDataForOrder(string.Format("insert into temp(oldupc,Created)values('{0}', '{1}')", Request.UserHostAddress.ToString(), DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));
                //        }
                //    }
                //    else
                //    {
                //        int a = DBHandler.InsertDataForOrder(string.Format("insert into temp(oldupc,Created)values('{0}', '{1}')", Request.UserHostAddress.ToString(), DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));
                //    }
                //}


                //if (Request.UrlReferrer != null)
                //{
                //    if (!Request.UrlReferrer.ToString().Contains("Jewar.pk") && !Request.UrlReferrer.ToString().Contains("localhost:3003"))
                //    {
                //        Message = "{\"responseType\": \"0\",\"Data\": [] }";


                //        Response.Clear();
                //        Response.ContentType = "application/json; charset=utf-8";
                //        Response.Write(Message.ToString());

                //        return;
                //    }
                //}

                if (Request["Value"] != null)
                {
                    if (!checkForSQLInjection(Request["Value"]))
                    {
                        Value = Request["Value"];
                    }
                }
                DataTable table = DBHandler.GetData(string.Format("SELECT  * FROM taxonomy WHERE `name` = '{0}' ORDER BY `value` ", Value));
                  var JSONString = "";

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString = table.Rows[0]["Value"].ToString();
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void GetOrderJSON()
        {
            try
            {
                string Message = "";
                string OrderID = "";

                if (Request["OrderID"] != null)
                {
                    if (!checkForSQLInjection(Request["OrderID"]))
                    {
                        OrderID = Request["OrderID"];
                    }
                }
                DataTable table = DBHandler.GetData(string.Format("SELECT  JSON FROM appjson WHERE `orderid` = '{0}' order by id desc limit 1 ", OrderID));
                var JSONString = "";

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString = table.Rows[0]["JSON"].ToString();
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void GetCustomerOTP()
        {
            try
            {
                string Message = "";
                string Mobile = "";

                if (Request["Mobile"] != null)
                {
                    if (!checkForSQLInjection(Request["Mobile"]))
                    {
                        Mobile = Request["Mobile"];
                    }
                }
                DataTable table = DBHandler.GetData(string.Format("SELECT  verificationcode FROM customer WHERE `mobile` = '{0}' order by id desc limit 1", Mobile));
                var JSONString = "";

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString = "|" + table.Rows[0]["verificationcode"].ToString() + "|";
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void SetTaxonomyValue()
        {
            try
            {
                string Message = "";
                string Value = "";
                string Name = "";

                if (Request["Value"] != null && Request["Name"] != null)
                {
                    if (!checkForSQLInjection(Request["Value"]) && !checkForSQLInjection(Request["Name"]))
                    {
                        Value = Request["Value"];
                        Name = Request["Name"];
                    }
                }
                Int64 UpdateID = DBHandler.InsertDataForOrder(string.Format("update taxonomy set value = '{0}' where name = '{1}'", Value, Name));
              
                if (UpdateID > 0)
                {
                    Message = "{\"ResponseType\": \"1\",\"Message\":  \"Record updated successfully\" }";

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }
                else
                {
                    Message = "{\"ResponseType\": \"0\",\"Message\":  \"Error while udpating record\" }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void GetAreas()
        {
            try
            {
                string Areas = "";
                string day = "", outletstatus = "";
                day = DateTime.Now.DayOfWeek.ToString();

                if (Request["CityID"] != null)
                {
                    if (!checkForSQLInjection(Request["CityID"]))
                    {

                        DataTable table = DBHandler.GetData(string.Format("SELECT ID, lower(Name) as `Name`  FROM cities where levelno = 1 and cityid = '{0}' ORDER BY NAME", Request["CityID"].ToString()));

                        var JSONString = new StringBuilder();
                        if (table.Rows.Count > 0)
                        {
                            if (table.Rows.Count > 0)
                            {
                                System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                                // cityTI.ToTitleCase("[Title]")
                                foreach (DataRow dr in table.Rows) // search whole table
                                {
                                    dr["Name"] = cityTI.ToTitleCase(dr["Name"].ToString());

                                }




                                JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    JSONString.Append("{");
                                    for (int j = 0; j < table.Columns.Count; j++)
                                    {
                                        if (j < table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                        else if (j == table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                        }
                                    }


                                    if (i == table.Rows.Count - 1)
                                    {
                                        JSONString.Append("}]");
                                    }
                                    else
                                    {
                                        JSONString.Append("},");
                                    }
                                }
                                JSONString.Append("}");
                            }

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(JSONString.ToString());
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }

                      
                    }
                }
            }
            catch (Exception ex)
            { }
        }
        
        public void GetBanners()
        {
            try
            {
                string City = "Karachi";

                if (Request.QueryString["city"] != null)
                {
                    if (!checkForSQLInjection(Request["city"]))
                    {
                        City = Request.QueryString["city"].ToString();
                    }
                }


                string BranchCode = " and BranchCode = 32";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            BranchCode = " and b.BranchCode = " + Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }

                DataTable table = DBHandler.GetData(string.Format(@"
SELECT * FROM (SELECT ImageURL, `Order` FROM ads WHERE isactive = 1 AND days =  DAYNAME(NOW()) AND city = '{0}' AND    CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}
UNION
SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  'All' AND city = 'All' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime    AND ImageType = 'Banner'  {1}
UNION
SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  'All' AND city = '{0}' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}
UNION
SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  DAYNAME(NOW())  AND city = 'All' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}) a ORDER BY `order`

", City, BranchCode));
                 
                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }

        public void GetBannersNew()
        {
            try
            {
                string Title= "";

                if (Request.QueryString["Title"] != null)
                {
                    if (!checkForSQLInjection(Request["Title"]))
                    {
                        Title = Request.QueryString["Title"].ToString();
                    }
                }


                string BranchCode = "";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            // BranchCode = " and branchid like '%" + Request.QueryString["BranchCode"].ToString() + "%'";

                            DataTable dtBranch = DBHandler.GetData(string.Format(@"select ID from branch where branchcode = '{0}'", Request.QueryString["BranchCode"].ToString()));

                            if (dtBranch.Rows.Count > 0)
                            {
                                BranchCode = " and branchid like '%" + dtBranch.Rows[0]["ID"].ToString() + "%'";
                            }
                        }
                    }
                }
                
                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT * FROM banner b  WHERE b.title = '{0}' and b.isactive = 1  order by b.id desc limit 1
", Title, BranchCode), "GetBannersNew-" + Title + "-" + BranchCode);



                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        

                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"
SELECT * 
,CASE WHEN BannerImageGUID LIKE '%pngfile%' THEN CONCAT('https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Banners/',BannerImageGUID ,'.png')
WHEN BannerImageGUID LIKE '%https://Jewar-assets.s3.ap-southeast-1.amazonaws.com%' THEN BannerImageGUID
ELSE CONCAT('https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Banners/',BannerImageGUID ,'.jpg')  END AS BannerImageNew, `Text`
, CASE WHEN `type` = 'category' THEN IFNULL((SELECT slug FROM categories_new WHERE `id` = typeid),'') 
WHEN `type` =  'brand' THEN IFNULL((SELECT slug FROM brands WHERE `id` = typeid) ,'')
WHEN `type` = 'product' THEN IFNULL((SELECT slug FROM products WHERE id = typeid),'')
WHEN `type` = 'collection' THEN IFNULL((SELECT slug FROM productcollection WHERE id = typeid),'')
WHEN `type` = 'atozmedicine' THEN 'atozmedicine'
WHEN `type` = 'screen' THEN 'screen'
ELSE ''
END AS Slug
FROM bannerimages
WHERE bannerid =  {0} {1} order by Sort", table.Rows[0]["ID"].ToString(), BranchCode), "GetBannersNew-" + table.Rows[0]["ID"].ToString() + BranchCode);



                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (table1.Rows.Count > 0)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        JSONString.Append(",\"Detail\": [");
                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                        {
                                            JSONString.Append("{");
                                            for (int j = 0; j < table1.Columns.Count; j++)
                                            {
                                                if (j < table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                }
                                                else if (j == table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");
                                                }


                                            }


                                            if (i1 == table1.Rows.Count - 1)
                                            {


                                            }
                                            else
                                            {
                                                JSONString.Append("},");
                                            }

                                            //JSONString.Append("},");




                                        }
                                    }
                                }
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }
        public void GetBannersNewV1()
        {
            try
            {
                string Title = "";

                if (Request.QueryString["Title"] != null)
                {
                    if (!checkForSQLInjection(Request["Title"]))
                    {
                        Title = Request.QueryString["Title"].ToString();
                    }
                }


                string BranchCode = "";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            //BranchCode = " and b.BranchCode = " + Request.QueryString["BranchCode"].ToString();
                            //BranchCode = " and branchid like '%" + Request.QueryString["BranchCode"].ToString() + "%'";


                            DataTable dtBranch = DBHandler.GetData(string.Format(@"select ID from branch where branchcode = '{0}'", Request.QueryString["BranchCode"].ToString()));

                            if (dtBranch.Rows.Count > 0)
                            {
                                BranchCode = " and branchid like '%" + dtBranch.Rows[0]["ID"].ToString() + "%'";
                            }
                        }
                    }
                }

                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT * FROM banner b  WHERE b.title = '{0}' and b.isactive = 1  order by b.id desc limit 1
", Title, BranchCode), "GetBannersNewV1-" + Title + "-" + BranchCode);



                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {


                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"
SELECT * 
,CASE WHEN BannerImageGUID LIKE '%pngfile%' THEN CONCAT('https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Banners/',BannerImageGUID ,'.png')
WHEN BannerImageGUID LIKE '%https://Jewar-assets.s3.ap-southeast-1.amazonaws.com%' THEN BannerImageGUID
ELSE CONCAT('https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Banners/',BannerImageGUID ,'.jpg')  END AS BannerImageNew, `Text`
, CASE WHEN `type` = 'category' THEN IFNULL((SELECT slug FROM categories_new WHERE `id` = typeid),'') 
WHEN `type` =  'brand' THEN IFNULL((SELECT slug FROM brands WHERE `id` = typeid) ,'')
WHEN `type` = 'product' THEN IFNULL((SELECT slug FROM products WHERE id = typeid),'')
WHEN `type` = 'collection' THEN IFNULL((SELECT slug FROM productcollection WHERE id = typeid),'')
WHEN `type` = 'atozmedicine' THEN 'atozmedicine'
WHEN `type` = 'screen' THEN 'screen'
ELSE ''
END AS Slug
FROM bannerimages
WHERE bannerid =  {0} {1}  order by Sort", table.Rows[0]["ID"].ToString(), BranchCode), "GetBannersNewV1-" + table.Rows[0]["ID"].ToString());



                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (table1.Rows.Count > 0)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        JSONString.Append(",\"Detail\": [");
                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                        {
                                            JSONString.Append("{");
                                            for (int j = 0; j < table1.Columns.Count; j++)
                                            {
                                                if (j < table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                }
                                                else if (j == table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");
                                                }


                                            }


                                            if (i1 == table1.Rows.Count - 1)
                                            {


                                            }
                                            else
                                            {
                                                JSONString.Append("},");
                                            }

                                            //JSONString.Append("},");




                                        }
                                    }
                                }
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }

        public void GetBannersNewWeb()
        {
            try
            {
                string Title = "";

                if (Request.QueryString["Title"] != null)
                {
                    if (!checkForSQLInjection(Request["Title"]))
                    {
                        Title = Request.QueryString["Title"].ToString();
                    }
                }


                string BranchCode = "";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            // BranchCode = " and branchid like '%" + Request.QueryString["BranchCode"].ToString() + "%'";

                            DataTable dtBranch = DBHandler.GetData(string.Format(@"select ID from branch where branchcode = '{0}'", Request.QueryString["BranchCode"].ToString()));

                            if (dtBranch.Rows.Count > 0)
                            {
                                //BranchCode = " and branchid like '%" + dtBranch.Rows[0]["ID"].ToString() + "%'";
                                BranchCode = " and branchid like '%" + dtBranch.Rows[0]["ID"].ToString() + "%'";
                            }
                        }
                    }
                }

                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT ID,Description FROM banner b  WHERE b.title = '{0}' and b.isactive = 1  order by b.id desc limit 1
", Title, BranchCode), "GetBannersNewWeb-" + Title + "-" + BranchCode);



                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {


                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"
SELECT Type,Text 
,CASE WHEN BannerImageGUID LIKE '%pngfile%' THEN CONCAT('https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Banners/',BannerImageGUID ,'.png')
WHEN BannerImageGUID LIKE '%https://Jewar-assets.s3.ap-southeast-1.amazonaws.com%' THEN BannerImageGUID
ELSE CONCAT('https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Banners/',BannerImageGUID ,'.jpg')  END AS BannerImageNew, `Text`
, CASE WHEN `type` = 'category' THEN IFNULL((SELECT slug FROM categories_new WHERE `id` = typeid),'') 
WHEN `type` =  'brand' THEN IFNULL((SELECT slug FROM brands WHERE `id` = typeid) ,'')
WHEN `type` = 'product' THEN IFNULL((SELECT slug FROM products WHERE id = typeid),'')
WHEN `type` = 'collection' THEN IFNULL((SELECT slug FROM productcollection WHERE id = typeid),'')
WHEN `type` = 'atozmedicine' THEN 'atozmedicine'
WHEN `type` = 'screen' THEN 'screen'
ELSE ''
END AS Slug
FROM bannerimages
WHERE bannerid =  {0} {1} order by Sort", table.Rows[0]["ID"].ToString(), BranchCode), "GetBannersNewWeb-" + table.Rows[0]["ID"].ToString() + BranchCode);



                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (table1.Rows.Count > 0)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        JSONString.Append(",\"Detail\": [");
                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                        {
                                            JSONString.Append("{");
                                            for (int j = 0; j < table1.Columns.Count; j++)
                                            {
                                                if (j < table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                }
                                                else if (j == table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");
                                                }


                                            }


                                            if (i1 == table1.Rows.Count - 1)
                                            {


                                            }
                                            else
                                            {
                                                JSONString.Append("},");
                                            }

                                            //JSONString.Append("},");




                                        }
                                    }
                                }
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }

        public void GetProductBanners()
        {
            try
            {
                string Title = "";
                string MomseCondition = " AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1) > 0))";
                if (Request.QueryString["Title"] != null)
                {
                    if (!checkForSQLInjection(Request["Title"]))
                    {
                        Title = Request.QueryString["Title"].ToString();

                        if (Title.ToLower() == "momse")
                        {
                            MomseCondition = " AND ((IFNULL(Qty,0) / p.unitpercase1) > 0)";
                        }
                    }
                }


                string BranchCode = " and store_no = 32";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "" && Request["BranchCode"].ToString() != "undefined") 
                        {

                            BranchCode = " and store_no = " + Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }

                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT * FROM (SELECT ImageURL, `Order` FROM ads WHERE isactive = 1 AND days =  DAYNAME(NOW()) AND city = '{0}' AND    CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}
                //UNION
                //SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  'All' AND city = 'All' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime    AND ImageType = 'Banner'  {1}
                //UNION
                //SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  'All' AND city = '{0}' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}
                //UNION
                //SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  DAYNAME(NOW())  AND city = 'All' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}) a ORDER BY `order`
                //
                //", City, BranchCode));

                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT * FROM productcollection b WHERE b.title = '{0}' and b.isactive = 1  order by id desc limit 1
", Title, BranchCode), "GetProductBanners1-"+ Title + "-" + BranchCode);

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        //                        DataTable table1 = DBHandler.GetData(string.Format(@"
                        //
                        //SELECT DISTINCT pci.*,
                        //p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                        // FROM 
                        //productcollectionitems pci  
                        //INNER JOIN products p ON pci.productid = p.`ID`
                        //INNER JOIN  `productvariation` pv ON p.id = pv.Productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN `categories` c ON p.ProductType = c.Name
                        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        // {1} order by pci.sort desc
                        // 
                        //", table.Rows[0]["ID"].ToString(), BranchCode));


                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID` , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
,TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
 FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%' {2}   AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 {1} order by pci.sort desc
 
", table.Rows[0]["ID"].ToString(), BranchCode, MomseCondition), "GetProductBanners1-" + table.Rows[0]["ID"].ToString()+ "-" + BranchCode);

                        if (table1.Rows.Count == 0)
                        {
                            table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID` , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
 FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%' {1}  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND store_no = 32 order by pci.sort desc
 
", table.Rows[0]["ID"].ToString(), MomseCondition), "GetProductBanners1-" + table.Rows[0]["ID"].ToString() + "-" + BranchCode);
                        }

                        if (Title.ToLower() == "philips")
                        {
                            table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID`, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND store_no = 32 order by pci.sort desc
 
", table.Rows[0]["ID"].ToString()), "GetProductBanners1-" + table.Rows[0]["ID"].ToString() + "-32");
                        }



                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table1.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }




                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (table1.Rows.Count > 0)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        JSONString.Append(",\"Detail\": [");
                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                        {
                                            JSONString.Append("{");
                                            for (int j = 0; j < table1.Columns.Count; j++)
                                            {
                                                if (j < table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                }
                                                else if (j == table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");
                                                }


                                            }


                                            if (i1 == table1.Rows.Count - 1)
                                            {


                                            }
                                            else
                                            {
                                                JSONString.Append("},");
                                            }

                                            //JSONString.Append("},");




                                        }
                                    }
                                }
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }

        /*This method is for per box per strip */
        //        public void GetProductBannersV1()
        //        {
        //            try
        //            {
        //                string Title = "";
        //                string MomseCondition = " AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1) > 0))";
        //                if (Request.QueryString["Title"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["Title"]))
        //                    {
        //                        Title = Request.QueryString["Title"].ToString();

        //                        if (Title.ToLower() == "momse")
        //                        {
        //                            MomseCondition = " AND ((IFNULL(Qty,0) / p.unitpercase1) > 0)";
        //                        }
        //                    }
        //                }


        //                string BranchCode = " and store_no = 32";

        //                if (Request.QueryString["BranchCode"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["BranchCode"]))
        //                    {
        //                        if (Request["BranchCode"].ToString() != "" && Request["BranchCode"].ToString() != "undefined")
        //                        {

        //                            BranchCode = " and store_no = " + Request.QueryString["BranchCode"].ToString();
        //                        }
        //                    }
        //                }

        //                //                DataTable table = DBHandler.GetData(string.Format(@"
        //                //SELECT * FROM (SELECT ImageURL, `Order` FROM ads WHERE isactive = 1 AND days =  DAYNAME(NOW()) AND city = '{0}' AND    CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}
        //                //UNION
        //                //SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  'All' AND city = 'All' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime    AND ImageType = 'Banner'  {1}
        //                //UNION
        //                //SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  'All' AND city = '{0}' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}
        //                //UNION
        //                //SELECT ImageURL, `Order`  FROM ads WHERE isactive = 1 AND days =  DAYNAME(NOW())  AND city = 'All' AND   CASE WHEN HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) > 24 THEN 24 ELSE HOUR(DATE_ADD(CURRENT_TIME(), INTERVAL 5 HOUR)) END  BETWEEN starttime AND endtime AND ImageType = 'Banner' {1}) a ORDER BY `order`
        //                //
        //                //", City, BranchCode));

        //                DataTable table = DBHandler.GetDataCache(string.Format(@"

        //SELECT * FROM productcollection b WHERE b.title = '{0}' and b.isactive = 1  order by id desc limit 1
        //", Title, BranchCode), "GetProductBannersV1-" + Title + "-" + BranchCode);

        //                var JSONString = new StringBuilder();
        //                if (table.Rows.Count > 0)
        //                {
        //                    if (table.Rows.Count > 0)
        //                    {

        //                        //                        DataTable table1 = DBHandler.GetData(string.Format(@"
        //                        //
        //                        //SELECT DISTINCT pci.*,
        //                        //p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        //                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
        //                        //, p.`Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
        //                        // FROM 
        //                        //productcollectionitems pci  
        //                        //INNER JOIN products p ON pci.productid = p.`ID`
        //                        //INNER JOIN  `productvariation` pv ON p.id = pv.Productid
        //                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //                        //INNER JOIN `categories` c ON p.ProductType = c.Name
        //                        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
        //                        // {1} order by pci.sort desc
        //                        // 
        //                        //", table.Rows[0]["ID"].ToString(), BranchCode));


        //                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"

        //SELECT DISTINCT pci.*,
        //p.`ID` , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
        //,TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired

        //, p.`NoofStrips`, IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS StripAvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, IFNULL(p.unitpercase1 * p.noofstrips,0)  AS TotalTablets,   p.unitpercase1  AS TotalStripTablets
        //, IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice ,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
        // ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
        //,p.Usedfor

        // FROM 
        //productcollectionitems pci  
        //INNER JOIN products p ON pci.productid = p.`ID`
        //-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //-- INNER JOIN `categories` c ON p.ProductType = c.Name
        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%' {2}   AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        // {1} order by pci.sort desc

        //", table.Rows[0]["ID"].ToString(), BranchCode, MomseCondition), "GetProductBannersV1-" + table.Rows[0]["ID"].ToString() + "-" + BranchCode);

        //                        if (table1.Rows.Count == 0)
        //                        {
        //                            table1 = DBHandler.GetDataCache(string.Format(@"

        //SELECT DISTINCT pci.*,
        //p.`ID` , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
        //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
        //, p.`NoofStrips`, IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS StripAvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, IFNULL(p.unitpercase1 * p.noofstrips,0)  AS TotalTablets,   p.unitpercase1  AS TotalStripTablets
        //, IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice ,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
        // ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
        //,p.Usedfor

        // FROM 
        //productcollectionitems pci  
        //INNER JOIN products p ON pci.productid = p.`ID`
        //-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //-- INNER JOIN `categories` c ON p.ProductType = c.Name
        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%' {1}  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        // AND store_no = 32 order by pci.sort desc

        //", table.Rows[0]["ID"].ToString(), MomseCondition), "GetProductBannersV1-" + table.Rows[0]["ID"].ToString() + "-" + BranchCode);
        //                        }

        //                        if (Title.ToLower() == "philips")
        //                        {
        //                            table1 = DBHandler.GetDataCache(string.Format(@"

        //SELECT DISTINCT pci.*,
        //p.`ID`, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
        //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
        //,'' as MetaTitle , '' As MetaDescription 
        //, p.`NoofStrips`, IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS StripAvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, IFNULL(p.unitpercase1 * p.noofstrips,0)  AS TotalTablets,   p.unitpercase1  AS TotalStripTablets
        //, IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice ,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
        // ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
        //,p.Usedfor

        //FROM 
        //productcollectionitems pci  
        //INNER JOIN products p ON pci.productid = p.`ID`
        //-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //-- INNER JOIN `categories` c ON p.ProductType = c.Name
        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        // AND store_no = 32 order by pci.sort desc

        //", table.Rows[0]["ID"].ToString()), "GetProductBannersV1-" + table.Rows[0]["ID"].ToString() + "-32");
        //                        }



        //                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

        //                        foreach (DataRow dr in table1.Rows) // search whole table
        //                        {
        //                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

        //                        }




        //                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
        //                        for (int i = 0; i < table.Rows.Count; i++)
        //                        {
        //                            JSONString.Append("{");
        //                            for (int j = 0; j < table.Columns.Count; j++)
        //                            {
        //                                if (j < table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
        //                                }
        //                                else if (j == table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
        //                                }
        //                            }

        //                            if (i == table.Rows.Count - 1)
        //                            {
        //                                if (table1.Rows.Count > 0)
        //                                {
        //                                    if (table1.Rows.Count > 0)
        //                                    {
        //                                        JSONString.Append(",\"Detail\": [");
        //                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
        //                                        {
        //                                            JSONString.Append("{");
        //                                            for (int j = 0; j < table1.Columns.Count; j++)
        //                                            {
        //                                                if (j < table1.Columns.Count - 1)
        //                                                {
        //                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
        //                                                }
        //                                                else if (j == table1.Columns.Count - 1)
        //                                                {
        //                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");

        //                                                    try
        //                                                    {
        //                                                        if (Convert.ToInt32(table1.Rows[i]["NoofStrips"]) > 1)
        //                                                        {
        //                                                            JSONString.Append(",\"Variation\": [");
        //                                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table1.Rows[i1]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table1.Rows[i1]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table1.Rows[i1]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table1.Rows[i1]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table1.Rows[i1]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table1.Rows[i1]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table1.Rows[i1]["NoofStrips"].ToString() + "\"},");
        //                                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table1.Rows[i1]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table1.Rows[i1]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table1.Rows[i1]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table1.Rows[i1]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table1.Rows[i1]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table1.Rows[i1]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
        //                                                            JSONString.Append("]");
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            JSONString.Append(",\"Variation\": []");
        //                                                        }
        //                                                    }
        //                                                    catch (Exception ee)
        //                                                    { }
        //                                                }


        //                                            }


        //                                            if (i1 == table1.Rows.Count - 1)
        //                                            {


        //                                            }
        //                                            else
        //                                            {
        //                                                JSONString.Append("},");
        //                                            }

        //                                            //JSONString.Append("},");




        //                                        }
        //                                    }
        //                                }
        //                                JSONString.Append("}]");
        //                            }
        //                            else
        //                            {
        //                                JSONString.Append("},");
        //                            }
        //                        }
        //                        JSONString.Append("}");
        //                    }


        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(JSONString.ToString());
        //                }
        //                else
        //                {
        //                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(Message.ToString());
        //                }

        //            }
        //            catch (Exception ex)
        //            { }
        //        }

        /*This method is for per box per strip */
        public void GetProductBannersV1()
        {
            try
            {
                //string Slug = "";
                //string MomseCondition = " AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1) > 0))";
                //if (Request.QueryString["Slug"] != null)
                //{
                //    if (!checkForSQLInjection(Request["Slug"]))
                //    {
                //        Slug = Request.QueryString["Slug"].ToString();

                //        if (Slug.ToLower() == "momse")
                //        {
                //            MomseCondition = " AND ((IFNULL(Qty,0) / p.unitpercase1) > 0)";
                //        }
                //    }
                //}

                string Title = "";
                string MomseCondition = " AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1) > 0))";
                if (Request.QueryString["Title"] != null)
                {
                    if (!checkForSQLInjection(Request["Title"]))
                    {
                        Title = Request.QueryString["Title"].ToString();

                        if (Title.ToLower() == "momse")
                        {
                            MomseCondition = " AND ((IFNULL(Qty,0) / p.unitpercase1) > 0)";
                        }
                    }
                }


                string BranchCode = " and store_no = 32";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            BranchCode = " and store_no = " + Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }


                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT *, Banner as BannerImageURL, Banner as CategoryImageURL, Description as CollectionName  FROM productcollection b WHERE b.title = '{0}' and b.isactive = 1  order by id desc limit 1
", Title, BranchCode), "GetProductBannersV1-" + Title + "-" + BranchCode);

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        //                        DataTable table1 = DBHandler.GetData(string.Format(@"
                        //
                        //SELECT DISTINCT pci.*,
                        //p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                        // FROM 
                        //productcollectionitems pci  
                        //INNER JOIN products p ON pci.productid = p.`ID`
                        //INNER JOIN  `productvariation` pv ON p.id = pv.Productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN `categories` c ON p.ProductType = c.Name
                        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        // {1} order by pci.sort desc
                        // 
                        //", table.Rows[0]["ID"].ToString(), BranchCode));


                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID`, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
,TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription 

, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor


FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 {1} order by pci.sort desc
 
", table.Rows[0]["ID"].ToString(), BranchCode), "GetProductBannersV1-" + table.Rows[0]["ID"].ToString() + "-" + BranchCode);

                        if (Title.ToLower() == "philips")
                        {
                            table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID`, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription 
, p.`NoofStrips`, IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice,  Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
, IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice ,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor
FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND store_no = 32 order by pci.sort desc
 
", table.Rows[0]["ID"].ToString()), "GetProductBannersV1-" + table.Rows[0]["ID"].ToString() + "-32");
                        }


                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table1.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        for (int a = 0; a < table1.Rows.Count; a++)
                        {
                            table1.Rows[a]["MetaTitle"] = table.Rows[0]["MetaTitle"].ToString();
                            table1.Rows[a]["MetaDescription"] = table.Rows[0]["MetaDescription"].ToString();
                        }


                        //JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + table1.Rows.Count + "\",\"BannerImageURL\": \"" + table.Rows[0]["Banner"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["Description"].ToString() + "\",\"Data\": [");

                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (table1.Rows.Count > 0)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        JSONString.Append(",\"Detail\": [");
                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                        {
                                            JSONString.Append("{");
                                            for (int j = 0; j < table1.Columns.Count; j++)
                                            {
                                                if (j < table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                }
                                                else if (j == table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");

                                                    try
                                                    {
                                                        if (Convert.ToInt32(table1.Rows[i]["NoofStrips"]) > 1)
                                                        {
                                                            JSONString.Append(",\"Variation\": [");
                                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                                            JSONString.Append("]");

                                                        }
                                                        else
                                                        {
                                                            JSONString.Append(",\"Variation\": []");
                                                        }
                                                    }
                                                    catch (Exception ee)
                                                    { }

                                                }


                                            }


                                            if (i1 == table1.Rows.Count - 1)
                                            {


                                            }
                                            else
                                            {
                                                JSONString.Append("},");
                                            }

                                            //JSONString.Append("},");




                                        }
                                    }
                                }
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        //JSONString.Append("}]");
                        JSONString.Append("}");
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }





        public void GetProductBanners_new()
        {
            try
            {
                string Title = "";
                 if (Request.QueryString["Title"] != null)
                {
                    if (!checkForSQLInjection(Request["Title"]))
                    {
                        Title = Request.QueryString["Title"].ToString();

                        
                    }
                }


                string BranchCode =  " and store_no = 32";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            BranchCode = " and store_no = " + Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
 
                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT * FROM jsonstorage b WHERE b.apiname = 'GetProductBanners' and title = '{0}' ", Title, BranchCode), "GetProductBanners1-" + Title + "-" + BranchCode);

                string JSONString = "";
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString = table.Rows[0]["json"].ToString();
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }
        
        public void GetProductBannersBySlug()
        {
            try
            {
                string Slug = "";
                string MomseCondition = " AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1) > 0))";
                if (Request.QueryString["Slug"] != null)
                {
                    if (!checkForSQLInjection(Request["Slug"]))
                    {
                        Slug = Request.QueryString["Slug"].ToString();

                        if (Slug.ToLower() == "momse")
                        {
                            MomseCondition = " AND ((IFNULL(Qty,0) / p.unitpercase1) > 0)";
                        }
                    }
                }


                string BranchCode =  " and store_no = 32";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            BranchCode = " and store_no = " + Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }

              
                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT *, Banner as BannerImageURL, Banner as CategoryImageURL, Description as CollectionName  FROM productcollection b WHERE b.slug = '{0}' and b.isactive = 1  order by id desc limit 1
", Slug, BranchCode), "GetProductBannersBySlug1-"+ Slug+ "-"+ BranchCode);

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        //                        DataTable table1 = DBHandler.GetData(string.Format(@"
                        //
                        //SELECT DISTINCT pci.*,
                        //p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                        // FROM 
                        //productcollectionitems pci  
                        //INNER JOIN products p ON pci.productid = p.`ID`
                        //INNER JOIN  `productvariation` pv ON p.id = pv.Productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN `categories` c ON p.ProductType = c.Name
                        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        // {1} order by pci.sort desc
                        // 
                        //", table.Rows[0]["ID"].ToString(), BranchCode));


                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID`, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
,TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 {1} order by pci.sort desc
 
", table.Rows[0]["ID"].ToString(), BranchCode), "GetProductBannersBySlug1-" + table.Rows[0]["ID"].ToString() + "-" + BranchCode);

                        if (Slug == "philips-collection")
                        {
                            table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID`, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND store_no = 32 order by pci.sort desc
 
", table.Rows[0]["ID"].ToString()), "GetProductBannersBySlug1-" + table.Rows[0]["ID"].ToString() + "-32");
                        }


                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table1.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        for (int a = 0; a < table1.Rows.Count; a++)
                        {
                            table1.Rows[a]["MetaTitle"] = table.Rows[0]["MetaTitle"].ToString();
                            table1.Rows[a]["MetaDescription"] = table.Rows[0]["MetaDescription"].ToString();
                        }


                        //JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + table1.Rows.Count + "\",\"BannerImageURL\": \"" + table.Rows[0]["Banner"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["Description"].ToString() + "\",\"Data\": [");

                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (table1.Rows.Count > 0)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        JSONString.Append(",\"Detail\": [");
                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                        {
                                            JSONString.Append("{");
                                            for (int j = 0; j < table1.Columns.Count; j++)
                                            {
                                                if (j < table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                }
                                                else if (j == table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");
                                                }


                                            }


                                            if (i1 == table1.Rows.Count - 1)
                                            {


                                            }
                                            else
                                            {
                                                JSONString.Append("},");
                                            }

                                            //JSONString.Append("},");




                                        }
                                    }
                                }
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        //JSONString.Append("}]");
                        JSONString.Append("}");
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }

        /*This method is for per box per strip */
        public void GetProductBannersBySlugV1()
        {
            try
            {
                string Slug = "";
                string MomseCondition = " AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1) > 0))";
                if (Request.QueryString["Slug"] != null)
                {
                    if (!checkForSQLInjection(Request["Slug"]))
                    {
                        Slug = Request.QueryString["Slug"].ToString();

                        if (Slug.ToLower() == "momse")
                        {
                            MomseCondition = " AND ((IFNULL(Qty,0) / p.unitpercase1) > 0)";
                        }
                    }
                }


                string BranchCode = " and store_no = 32";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            BranchCode = " and store_no = " + Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }


                //                DataTable table = DBHandler.GetDataCache(string.Format(@"

                //SELECT *, Banner as BannerImageURL, Banner as CategoryImageURL, Description as CollectionName  FROM productcollection b WHERE b.slug = '{0}' and b.isactive = 1  order by id desc limit 1
                //", Slug, BranchCode), "GetProductBannersBySlug1-" + Slug + "-" + BranchCode);

                DataTable table = DBHandler.GetDataCache(string.Format(@"

SELECT ID, Title, Description  FROM productcollection b WHERE b.slug = '{0}' and b.isactive = 1  order by id desc limit 1
", Slug, BranchCode), "GetProductBannersBySlug1-" + Slug + "-" + BranchCode);

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {


                        //                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"

                        //SELECT DISTINCT pci.*,
                        //p.`ID`, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                        //,TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
                        //,'' as MetaTitle , '' As MetaDescription 

                        //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
                        //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
                        //, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
                        //,'' AS ParentCategory
                        // ,'' AS ParentCategorySlug
                        //,p.Usedfor


                        //FROM 
                        //productcollectionitems pci  
                        //INNER JOIN products p ON pci.productid = p.`ID`
                        //-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //-- INNER JOIN `categories` c ON p.ProductType = c.Name
                        // WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                        // {1} order by pci.sort desc

                        //", table.Rows[0]["ID"].ToString(), BranchCode), "GetProductBannersBySlugV1-" + table.Rows[0]["ID"].ToString() + "-" + BranchCode);

                         


                        DataTable table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.ID, pci.ProductID , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.Slug , '' AS Variations, p.`NoofStrips`, p.unitpercase1 AS TotalTablets ,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets,
 ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price, TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, CategoryImageURL, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.MaxCount AS MaxOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0) AS SaleStripPrice
, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount

 


FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 {1} order by pci.sort desc
 
", table.Rows[0]["ID"].ToString(), BranchCode), "GetProductBannersBySlugV1-" + table.Rows[0]["ID"].ToString() + "-" + BranchCode);



                        if (Slug == "philips-collection")
                        {
                            table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT pci.*,
p.`ID`, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription 
, p.`NoofStrips`, IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice,  Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
, IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice ,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor
FROM 
productcollectionitems pci  
INNER JOIN products p ON pci.productid = p.`ID`
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE pci.productcollectionid = {0} and p.isactive = 1 and p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND store_no = 32 order by pci.sort desc
 
", table.Rows[0]["ID"].ToString()), "GetProductBannersBySlugV1-" + table.Rows[0]["ID"].ToString() + "-32");
                        }


                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table1.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        //for (int a = 0; a < table1.Rows.Count; a++)
                        //{
                        //    table1.Rows[a]["MetaTitle"] = table.Rows[0]["MetaTitle"].ToString();
                        //    table1.Rows[a]["MetaDescription"] = table.Rows[0]["MetaDescription"].ToString();
                        //}


                        //JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + table1.Rows.Count + "\",\"BannerImageURL\": \"" + table.Rows[0]["Banner"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["Description"].ToString() + "\",\"Data\": [");

                        ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (table1.Rows.Count > 0)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        JSONString.Append(",\"Detail\": [");
                                        for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                        {
                                            JSONString.Append("{");
                                            for (int j = 0; j < table1.Columns.Count; j++)
                                            {
                                                if (j < table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                }
                                                else if (j == table1.Columns.Count - 1)
                                                {
                                                    JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");

                                                    try
                                                    {
                                                        if (Convert.ToInt32(table1.Rows[i]["NoofStrips"]) > 1)
                                                        {
                                                            JSONString.Append(",\"Variation\": [");
                                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table1.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table1.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table1.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table1.Rows[i]["Totaltablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table1.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table1.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table1.Rows[i]["NoofStrips"].ToString() + "\"},");
                                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table1.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table1.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table1.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table1.Rows[i]["TotalStriptablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table1.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table1.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                                            JSONString.Append("]");

                                                        }
                                                        else
                                                        {
                                                            JSONString.Append(",\"Variation\": []");
                                                        }
                                                    }
                                                    catch (Exception ee)
                                                    { }

                                                }


                                            }


                                            if (i1 == table1.Rows.Count - 1)
                                            {


                                            }
                                            else
                                            {
                                                JSONString.Append("},");
                                            }

                                            //JSONString.Append("},");




                                        }
                                    }
                                }
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        //JSONString.Append("}]");
                        JSONString.Append("}");
                    }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

            }
            catch (Exception ex)
            { }
        }

        public void GetCategoryImages()
        {
            try
            {
                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                //DataTable table = DBHandler.GetData(string.Format(@" SELECT DISTINCT lower(producttype) as producttype, '' AS Image FROM `products`  ORDER BY producttype {0}", limit));
                DataTable table = DBHandler.GetData(string.Format(@" SELECT id, lower(`name`) AS producttype, imagename AS Image FROM `categories` WHERE isactive = 1 ORDER BY `name` {0}", limit));
                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["producttype"] = cityTI.ToTitleCase(dr["producttype"].ToString());

                        }



                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }

        public void GetBrandImages()
        {
            try
            {
                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }

                //DataTable table = DBHandler.GetData(string.Format(@"SELECT DISTINCT lower(vendor) as vendor, BrandImageURL AS Image FROM `products` ORDER BY vendor {0}", limit));

                DataTable table = DBHandler.GetData(string.Format(@"SELECT DISTINCT LOWER(vendor) AS vendor, BrandImageURL AS Image 
, b.`ID` AS BrandID
FROM `products` p 
INNER JOIN brands b ON p.vendor = b.`Name`
ORDER BY p.vendor  {0}", limit));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["vendor"] = cityTI.ToTitleCase(dr["vendor"].ToString());

                        }



                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }

        //        public void GetProductByCategory()
        //        {
        //            try
        //            {


        //                string OutletID = "32";
        //                string CategoryName = "0";
        //                string CategoryID = "0";
        //                string RecordsCount = "0";
        //                if (Request.QueryString["BranchCode"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["BranchCode"]))
        //                    {
        //                        if (Request["BranchCode"].ToString() != "")
        //                        {
        //                            OutletID = Request.QueryString["BranchCode"].ToString();
        //                        }
        //                    }
        //                }
        //                if (Request.QueryString["CategoryName"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["CategoryName"]))
        //                    {
        //                        CategoryName = Request.QueryString["CategoryName"].ToString();
        //                    }
        //                }
        //                string limit = "";
        //                if (Request["limit"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["limit"]))
        //                    {
        //                        limit = "limit " + Request.QueryString["limit"].ToString();
        //                    }

        //                }
        //                if (Request.QueryString["CategoryID"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["CategoryID"]))
        //                    {
        //                        CategoryID = Request.QueryString["CategoryID"].ToString();
        //                    }
        //                }
        //                DataTable table = new DataTable();


        //               DataTable dt1 = new DataTable();

        //                if (CategoryID != "0")
        //                {


        //                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));


        //                    if (table.Rows.Count == 0)
        //                    {
        //                        table = DBHandler.GetDataCache(string.Format(@"
        //SELECT  DISTINCT p.`ID` AS ProductID , p.Slug ,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
        //,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
        //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
        //FROM `products` p 
        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //INNER JOIN `productcategories` c ON p.id = c.productid
        //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        //and p.isactive = 1 and p.purchase like '%Loc%'
        //-- HAVING AvailableQty > 0 
        //{1}
        //", CategoryID, limit, OutletID), "GetProductByCategory-"+ CategoryID+"-"+ OutletID + "-" + limit);
        //                    }

        //                }




        //                var JSONString = new StringBuilder();
        //                if (table.Rows.Count > 0)
        //                {
        //                    if (table.Rows.Count > 0)
        //                    {
        //                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

        //                        // cityTI.ToTitleCase("[Title]")
        //                        foreach (DataRow dr in table.Rows) // search whole table
        //                        {
        //                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

        //                        }

        //                        //JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BannerImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
        //                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
        //                        for (int i = 0; i < table.Rows.Count; i++)
        //                        {
        //                            JSONString.Append("{");
        //                            for (int j = 0; j < table.Columns.Count; j++)
        //                            {



        //                                if (j < table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
        //                                }
        //                                else if (j == table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
        //                                }
        //                            }


        //                            if (i == table.Rows.Count - 1)
        //                            {
        //                                JSONString.Append("}]");
        //                            }
        //                            else
        //                            {
        //                                JSONString.Append("},");
        //                            }
        //                        }
        //                        JSONString.Append("}");
        //                    }

        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(JSONString.ToString());
        //                }
        //                else
        //                {
        //                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(Message.ToString());
        //                }


        //            }
        //            catch (Exception ex)
        //            {
        //                Response.Write(ex.Message);

        //            }
        //        }


        /*This method is for per box per strip */
        //        public void GetProductByCategoryV1()
        //        {
        //            try
        //            {


        //                string OutletID = "32";
        //                string CategoryName = "0";
        //                string CategoryID = "0";
        //                string RecordsCount = "0";
        //                if (Request.QueryString["BranchCode"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["BranchCode"]))
        //                    {
        //                        if (Request["BranchCode"].ToString() != "")
        //                        {
        //                            OutletID = Request.QueryString["BranchCode"].ToString();
        //                        }
        //                    }
        //                }
        //                if (Request.QueryString["CategoryName"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["CategoryName"]))
        //                    {
        //                        CategoryName = Request.QueryString["CategoryName"].ToString();
        //                    }
        //                }
        //                string limit = "";
        //                if (Request["limit"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["limit"]))
        //                    {
        //                        limit = "limit " + Request.QueryString["limit"].ToString();
        //                    }

        //                }
        //                if (Request.QueryString["CategoryID"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["CategoryID"]))
        //                    {
        //                        CategoryID = Request.QueryString["CategoryID"].ToString();
        //                    }
        //                }
        //                DataTable table = new DataTable();
        //                //                DataTable table = DBHandler.GetData(string.Format(@"
        //                //SELECT DISTINCT p.`ID` , p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        //                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
        //                //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
        //                //FROM `products` p 
        //                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
        //                // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //                //WHERE p.`ProductType` = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
        //                //and p.isactive = 1 and p.purchase like '%Loc%'
        //                // -- HAVING AvailableQty > 0 
        //                //ORDER BY p.sort DESC {1}
        //                //", CategoryName, limit, OutletID));

        //                DataTable dt1 = new DataTable();

        //                if (CategoryID != "0")
        //                {


        //                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
        //                    //                    if (dtPrimaryBranch.Rows.Count > 0)
        //                    //                    {
        //                    //                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
        //                    //                        {
        //                    //                            table = DBHandler.GetData(string.Format(@"
        //                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        //                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
        //                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
        //                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
        //                    //FROM `products` p 
        //                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //                    //INNER JOIN `productcategories` c ON p.id = c.productid
        //                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        //                    //and p.isactive = 1 and p.purchase like '%Loc%'
        //                    //-- HAVING AvailableQty > 0 
        //                    //{1}
        //                    //", CategoryID, limit, OutletID));
        //                    //                        }
        //                    //                        else
        //                    //                        {
        //                    //                            table = DBHandler.GetData(string.Format(@"
        //                    //SELECT ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
        //                    // FROM 
        //                    //(SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        //                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
        //                    // 
        //                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty,
        //                    //
        //                    //  p.MaxCount AS MaxOrder 
        //                    //
        //                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
        //                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
        //                    //FROM `products` p 
        //                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //                    //INNER JOIN `productcategories` c ON p.id = c.productid
        //                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        //                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
        //                    //
        //                    //
        //                    //UNION
        //                    //
        //                    //
        //                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        //                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
        //                    // 
        //                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) 
        //                    // AS AvailableQty,
        //                    // 
        //                    //  p.MaxCount AS MaxOrder 
        //                    //
        //                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
        //                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
        //                    //FROM `products` p 
        //                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //                    //INNER JOIN `productcategories` c ON p.id = c.productid
        //                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        //                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
        //                    //-- HAVING AvailableQty > 0 
        //                    //-- {1}
        //                    //) AS a
        //                    //GROUP BY 
        //                    //ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
        //                    //{3}
        //                    //", CategoryID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));
        //                    //                        }
        //                    //                    }

        //                    if (table.Rows.Count == 0)
        //                    {
        //                        table = DBHandler.GetDataCache(string.Format(@"
        //SELECT DISTINCT p.`ID` AS ProductID , p.Slug ,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
        //,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
        //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL


        //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  ,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
        //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
        //, ifnull(p.unitpercase1 * p.noofstrips,0)  as TotalTablets,   p.unitpercase1  as TotalStripTablets
        //,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
        // ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
        //,p.Usedfor


        //FROM `products` p 
        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //INNER JOIN `productcategories` c ON p.id = c.productid
        //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        //and p.isactive = 1 and p.purchase like '%Loc%'
        //-- HAVING AvailableQty > 0 
        //{1}
        //", CategoryID, limit, OutletID), "GetProductByCategory-" + CategoryID + "-" + OutletID + "-" + limit);
        //                    }

        //                    //                    if (OutletID != "32")
        //                    //                    {
        //                    //                        string ProductIDs = "";
        //                    //                        for (int a = 0; a < table.Rows.Count; a++)
        //                    //                        {
        //                    //                            ProductIDs += table.Rows[a]["ProductID"].ToString() + ",";

        //                    //                        }
        //                    //                        ProductIDs = ProductIDs.TrimEnd(',');

        //                    //                        DataTable table1 = DBHandler.GetData(string.Format(@"
        //                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
        //                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
        //                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
        //                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
        //                    //FROM `products` p 
        //                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //                    //INNER JOIN `productcategories` c ON p.id = c.productid
        //                    //WHERE p.id in ({0})  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
        //                    //and p.isactive = 1 and p.purchase like '%Loc%'
        //                    //-- HAVING AvailableQty > 0 
        //                    //", ProductIDs, "32"));

        //                    //                        if (table1.Rows.Count > 0)
        //                    //                        {
        //                    //                            string ProductIDPrimary = "";
        //                    //                            string ProductIDSecondary = "";
        //                    //                            for (int a = 0; a < table1.Rows.Count; a++)
        //                    //                            {
        //                    //                                ProductIDPrimary = table1.Rows[a]["ProductID"].ToString();
        //                    //                                foreach (DataRow dr in table.Rows) // search whole table
        //                    //                                {
        //                    //                                    if (dr["ProductID"].ToString() == ProductIDPrimary) // if id==2
        //                    //                                    {
        //                    //                                        dr["AvailableQty"] = Convert.ToInt32(table1.Rows[a]["AvailableQty"]) + Convert.ToInt32(dr["AvailableQty"]);
        //                    //                                        //break; break or not depending on you
        //                    //                                    }
        //                    //                                }



        //                    //                                //ProductIDPrimary = table.Rows[a]["ProductID"].ToString();
        //                    //                                //for (int b = 0; b < table1.Rows.Count; b++)
        //                    //                                //{
        //                    //                                //    ProductIDSecondary = table1.Rows[b]["ProductID"].ToString();

        //                    //                                //    if (ProductIDPrimary == ProductIDSecondary)
        //                    //                                //    {
        //                    //                                //        table.Rows[a]["AvailableQty"] = Convert.ToInt32(table.Rows[a]["AvailableQty"]) + Convert.ToInt32(table1.Rows[b]["AvailableQty"]);
        //                    //                                //    }
        //                    //                                //}
        //                    //                            }
        //                    //                        }

        //                    //                    }




        //                }




        //                var JSONString = new StringBuilder();
        //                if (table.Rows.Count > 0)
        //                {
        //                    if (table.Rows.Count > 0)
        //                    {
        //                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

        //                        // cityTI.ToTitleCase("[Title]")
        //                        foreach (DataRow dr in table.Rows) // search whole table
        //                        {
        //                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

        //                        }

        //                        //JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BannerImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
        //                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
        //                        for (int i = 0; i < table.Rows.Count; i++)
        //                        {
        //                            JSONString.Append("{");
        //                            for (int j = 0; j < table.Columns.Count; j++)
        //                            {



        //                                if (j < table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
        //                                }
        //                                else if (j == table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

        //                                    try
        //                                    {
        //                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
        //                                        {
        //                                            JSONString.Append(",\"Variation\": [");
        //                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[0]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
        //                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[0]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
        //                                            JSONString.Append("]");

        //                                        }
        //                                        else
        //                                        {
        //                                            JSONString.Append(",\"Variation\": []");
        //                                        }
        //                                    }
        //                                    catch (Exception ee)
        //                                    { }
        //                                }
        //                            }


        //                            if (i == table.Rows.Count - 1)
        //                            {
        //                                JSONString.Append("}]");
        //                            }
        //                            else
        //                            {
        //                                JSONString.Append("},");
        //                            }
        //                        }
        //                        JSONString.Append("}");
        //                    }

        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(JSONString.ToString());
        //                }
        //                else
        //                {
        //                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(Message.ToString());
        //                }


        //            }
        //            catch (Exception ex)
        //            {
        //                Response.Write(ex.Message);

        //            }
        //        }



        /*This method is for per box per strip */
        public void GetProductByCategory()
        {
            try
            {
                //Response.Write("1");
                string OutletID = "32";
                string CategoryName = "0";
                string CategoryID = "0";
                string CategorySlug = "";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }

                if (Request.QueryString["CategoryID"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryID"]))
                    {
                        CategoryID = Request.QueryString["CategoryID"].ToString();
                    }
                }

                string limit = "";
                int startingIndex = 0;
                int numberOfRowsToRetrieve = 0;
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();

                        startingIndex = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[0]);
                        numberOfRowsToRetrieve = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[1]);
                    }

                }
                if (Request.QueryString["CategorySlug"] != null)
                {
                    if (!checkForSQLInjection(Request["CategorySlug"]))
                    {
                        CategorySlug = Request.QueryString["CategorySlug"].ToString();
                    }
                }
                DataTable table = new DataTable();
                DataTable table1 = new DataTable();
                DataTable dtCategoryHierarchy = new DataTable();

                DataTable dt1 = new DataTable();

                if (CategoryID != "")
                {

                    //Response.Write("2");
                    string MetaTitle = ""; string MetaDescription = ""; string CategoryNameText = ""; string CategoryImageWeb = ""; string CategoryImageApp = "";
                    DataTable dtCategoryID = DBHandler.GetData(string.Format("select id , `Name`, MetaTitle, MetaDescription, CategoryImageWeb, CategoryImage, Slug from categories_new where id =  '{0}'", CategoryID));
                    if (dtCategoryID.Rows.Count > 0)
                    {
                        CategoryID = dtCategoryID.Rows[0]["id"].ToString();
                        MetaTitle = dtCategoryID.Rows[0]["MetaTitle"].ToString().Replace("'", "''");
                        MetaDescription = dtCategoryID.Rows[0]["MetaDescription"].ToString().Replace("'", "''");
                        CategoryNameText = dtCategoryID.Rows[0]["Name"].ToString().Replace("'", "''");
                        CategoryImageWeb = dtCategoryID.Rows[0]["CategoryImageWeb"].ToString().Replace("'", "''");
                        CategoryImageApp = dtCategoryID.Rows[0]["CategoryImage"].ToString().Replace("'", "''");
                        CategorySlug = dtCategoryID.Rows[0]["Slug"].ToString().Replace("'", "''");
                    }

                    //Response.Write("3");
                    //                    table1 = DBHandler.GetDataCache(string.Format(@"

                    //SELECT DISTINCT p.`ID` AS ProductID ,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category, '{6}' AS CategoryName , p.`Vendor` AS Brand
                    // , 0 AS Price , 0  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 0 AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , '' AS Variations, 0 AS DiscountPrice, 0 AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `slug` = '{0}' LIMIT 1 )),'') AS ParentCategory, 
                    //p.PrescriptionRequired, c.CategoryImageURL, '{4}' AS MetaTitle , '{5}' AS MetaDescription , '{6}' AS CategoryImageWeb , '{7}' AS CategoryImageApp

                    //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, 0.00   AS SaleStripPrice  , 0.00 AS StripAvailableQty, 0.00 AS DiscountStripPrice, 0.00 AS DiscountStripAmount, 
                    //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
                    //, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
                    //,'' AS ParentCategory
                    // ,'' AS ParentCategorySlug
                    //,p.Usedfor


                    //FROM `products` p 
                    //-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
                    //WHERE c.CategoryID  = '{3}'  AND ImageURL != '' 
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //ORDER BY p.`OrderCount` DESC
                    //", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp), "GetProductByCategoryV1-" + CategorySlug + "-" + OutletID);


                    table1 = DBHandler.GetData(string.Format(@"

SELECT DISTINCT p.`ID` AS ProductID ,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category, '{6}' AS CategoryName , p.`Vendor` AS Brand
 , 0 AS Price , 0  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 0 AS AvailableQty, p.MaxCount AS MaxOrder 
, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , '' AS Variations, 0 AS DiscountPrice, 0 AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `slug` = '{0}' LIMIT 1 )),'') AS ParentCategory, 
p.PrescriptionRequired, c.CategoryImageURL, '{4}' AS MetaTitle , '{5}' AS MetaDescription , '{6}' AS CategoryImageWeb , '{7}' AS CategoryImageApp

, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, 0.00   AS SaleStripPrice  , 0.00 AS StripAvailableQty, 0.00 AS DiscountStripPrice, 0.00 AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor


FROM `products` p 
-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN `productcategories` c ON p.id = c.productid
-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
WHERE c.CategoryID  = '{3}'  AND ImageURL != '' 
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
ORDER BY p.`OrderCount` DESC
", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp));



                    /*
                     JSONString.Append(",\"Variation\": [");
                     
                       "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                     JSONString.Append("]");
                     * */


                    //Response.Write("4");
                    //if (ds.Tables[0] != null)
                    //{
                    //    table = ds.Tables[0];
                    //}

                    DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));

                    //Response.Write("5");
                    if (dtStockJSON.Rows.Count > 0)
                    {
                        string json = dtStockJSON.Rows[0]["JSON"].ToString();
                        DataTable dt = (DataTable)JsonConvert.DeserializeObject(json, (typeof(DataTable)));

                        for (int a = 0; a < table1.Rows.Count; a++)
                        {
                            DataRow[] rows = dt.Select("ProductID = '" + table1.Rows[a]["ProductID"].ToString() + "'");

                            if (rows.Length > 0)
                            {
                                try
                                {
                                    //Response.Write(table1.Rows[a]["ProductID"].ToString() + "<br/>");
                                    table1.Rows[a]["Price"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["SalePrice"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["AvailableQty"] = Math.Floor(Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"]));
                                    table1.Rows[a]["DiscountPrice"] = Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["DiscountAmount"] = Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);

                                    table1.Rows[a]["SaleStripPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);
                                    table1.Rows[a]["StripAvailableQty"] = Math.Floor((Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"])) * Convert.ToDecimal(table1.Rows[a]["NoofStrips"]));
                                    table1.Rows[a]["DiscountStripPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);
                                    table1.Rows[a]["DiscountStripAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);


                                }
                                catch (Exception erq)
                                {
                                    Response.Write(a + " - " + table1.Rows[a]["Slug"].ToString());
                                }

                            }
                        }

                        try
                        {
                            for (int i = table1.Rows.Count - 1; i >= 0; i--)
                            {
                                DataRow dr = table1.Rows[i];

                                if (dr["AvailableQty"].ToString() != "")
                                {
                                    if (Convert.ToInt32(dr["AvailableQty"]) < 1)
                                        dr.Delete();
                                }
                            }
                            table1.AcceptChanges();


                            for (int i = table1.Rows.Count - 1; i >= 0; i--)
                            {
                                DataRow dr = table1.Rows[i];
                                if (dr["ProductID"].ToString() == "")
                                    dr.Delete();

                            }
                            table1.AcceptChanges();
                        }
                        catch (Exception rrr)
                        { }

                        if (table1.Rows.Count > 0)
                        {
                            table = table1.AsEnumerable().Skip(startingIndex).Take(numberOfRowsToRetrieve).CopyToDataTable();
                        }
                        if (table.Rows.Count > 0)
                        {
                            RecordsCount = table1.Rows.Count.ToString();
                        }
                    }


                    dtCategoryHierarchy = DBHandler.GetData(string.Format(@"SELECT ID,`Name`,Slug ,ParentID  FROM categories_new WHERE slug = '{0}'
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))))
ORDER BY ParentID
", CategorySlug));




                }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CategoryImageApp\": \"" + table.Rows[0]["CategoryImageApp"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {

                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            //JSONString.Append(",\"Variation\": [");
                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            //JSONString.Append("]");

                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["Totaltablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStriptablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");
                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }

                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}],");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("\"CategoryHierarchy\": [");
                        if (dtCategoryHierarchy.Rows.Count > 0)
                        {
                            for (int a = 0; a < dtCategoryHierarchy.Rows.Count; a++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < dtCategoryHierarchy.Columns.Count; j++)
                                {



                                    if (j < dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\",");
                                    }
                                    else if (j == dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\"");
                                    }
                                }


                                if (a == dtCategoryHierarchy.Rows.Count - 1)
                                {
                                    JSONString.Append("}");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                        }
                        JSONString.Append("]");


                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        /*This method is for per box per strip */
        public void GetProductByCategoryV1()
        {
            try
            {
                //Response.Write("1");
                string OutletID = "32";
                string CategoryName = "0";
                string CategoryID = "0";
                string CategorySlug = "";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }

                if (Request.QueryString["CategoryID"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryID"]))
                    {
                        CategoryID = Request.QueryString["CategoryID"].ToString();
                    }
                }

                string limit = "";
                int startingIndex = 0;
                int numberOfRowsToRetrieve = 0;
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();

                        startingIndex = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[0]);
                        numberOfRowsToRetrieve = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[1]);
                    }

                }
                if (Request.QueryString["CategorySlug"] != null)
                {
                    if (!checkForSQLInjection(Request["CategorySlug"]))
                    {
                        CategorySlug = Request.QueryString["CategorySlug"].ToString();
                    }
                }
                DataTable table = new DataTable();
                DataTable table1 = new DataTable();
                DataTable dtCategoryHierarchy = new DataTable();

                DataTable dt1 = new DataTable();

                if (CategoryID != "")
                {

                    //Response.Write("2");
                    string MetaTitle = ""; string MetaDescription = ""; string CategoryNameText = ""; string CategoryImageWeb = ""; string CategoryImageApp = "";
                    DataTable dtCategoryID = DBHandler.GetData(string.Format("select id , `Name`, MetaTitle, MetaDescription, CategoryImageWeb, CategoryImage, Slug from categories_new where id =  '{0}'", CategoryID));
                    if (dtCategoryID.Rows.Count > 0)
                    {
                        CategoryID = dtCategoryID.Rows[0]["id"].ToString();
                        MetaTitle = dtCategoryID.Rows[0]["MetaTitle"].ToString().Replace("'", "''");
                        MetaDescription = dtCategoryID.Rows[0]["MetaDescription"].ToString().Replace("'", "''");
                        CategoryNameText = dtCategoryID.Rows[0]["Name"].ToString().Replace("'", "''");
                        CategoryImageWeb = dtCategoryID.Rows[0]["CategoryImageWeb"].ToString().Replace("'", "''");
                        CategoryImageApp = dtCategoryID.Rows[0]["CategoryImage"].ToString().Replace("'", "''");
                        CategorySlug = dtCategoryID.Rows[0]["Slug"].ToString().Replace("'", "''");
                    }

                    //Response.Write("3");
                    //                    table1 = DBHandler.GetDataCache(string.Format(@"

                    //SELECT DISTINCT p.`ID` AS ProductID ,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category, '{6}' AS CategoryName , p.`Vendor` AS Brand
                    // , 0 AS Price , 0  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 0 AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , '' AS Variations, 0 AS DiscountPrice, 0 AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `slug` = '{0}' LIMIT 1 )),'') AS ParentCategory, 
                    //p.PrescriptionRequired, c.CategoryImageURL, '{4}' AS MetaTitle , '{5}' AS MetaDescription , '{6}' AS CategoryImageWeb , '{7}' AS CategoryImageApp

                    //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, 0.00   AS SaleStripPrice  , 0.00 AS StripAvailableQty, 0.00 AS DiscountStripPrice, 0.00 AS DiscountStripAmount, 
                    //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
                    //, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
                    //,'' AS ParentCategory
                    // ,'' AS ParentCategorySlug
                    //,p.Usedfor


                    //FROM `products` p 
                    //-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
                    //WHERE c.CategoryID  = '{3}'  AND ImageURL != '' 
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //ORDER BY p.`OrderCount` DESC
                    //", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp), "GetProductByCategoryV1-" + CategorySlug + "-" + OutletID);


                    table1 = DBHandler.GetData(string.Format(@"

SELECT DISTINCT p.`ID` AS ProductID ,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category, '{6}' AS CategoryName , p.`Vendor` AS Brand
 , 0 AS Price , 0  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 0 AS AvailableQty, p.MaxCount AS MaxOrder 
, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , '' AS Variations, 0 AS DiscountPrice, 0 AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `slug` = '{0}' LIMIT 1 )),'') AS ParentCategory, 
p.PrescriptionRequired, c.CategoryImageURL, '{4}' AS MetaTitle , '{5}' AS MetaDescription , '{6}' AS CategoryImageWeb , '{7}' AS CategoryImageApp

, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, 0.00   AS SaleStripPrice  , 0.00 AS StripAvailableQty, 0.00 AS DiscountStripPrice, 0.00 AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor


FROM `products` p 
-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN `productcategories` c ON p.id = c.productid
-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
WHERE c.CategoryID  = '{3}'  AND ImageURL != '' 
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
ORDER BY p.`OrderCount` DESC
", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp));



                    /*
                     JSONString.Append(",\"Variation\": [");
                     
                       "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                     JSONString.Append("]");
                     * */


                    //Response.Write("4");
                    //if (ds.Tables[0] != null)
                    //{
                    //    table = ds.Tables[0];
                    //}

                    DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));

                    //Response.Write("5");
                    if (dtStockJSON.Rows.Count > 0)
                    {
                        string json = dtStockJSON.Rows[0]["JSON"].ToString();
                        DataTable dt = (DataTable)JsonConvert.DeserializeObject(json, (typeof(DataTable)));

                        for (int a = 0; a < table1.Rows.Count; a++)
                        {
                            DataRow[] rows = dt.Select("ProductID = '" + table1.Rows[a]["ProductID"].ToString() + "'");

                            if (rows.Length > 0)
                            {
                                try
                                {
                                    //Response.Write(table1.Rows[a]["ProductID"].ToString() + "<br/>");
                                    table1.Rows[a]["Price"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["SalePrice"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["AvailableQty"] = Math.Floor(Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"]));
                                    table1.Rows[a]["DiscountPrice"] = Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["DiscountAmount"] = Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);

                                    table1.Rows[a]["SaleStripPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);
                                    table1.Rows[a]["StripAvailableQty"] = Math.Floor((Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"])) * Convert.ToDecimal(table1.Rows[a]["NoofStrips"]));
                                    table1.Rows[a]["DiscountStripPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);
                                    table1.Rows[a]["DiscountStripAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);


                                }
                                catch (Exception erq)
                                {
                                    Response.Write(a + " - " + table1.Rows[a]["Slug"].ToString());
                                }

                            }
                        }

                        try
                        {
                            for (int i = table1.Rows.Count - 1; i >= 0; i--)
                            {
                                DataRow dr = table1.Rows[i];

                                if (dr["AvailableQty"].ToString() != "")
                                {
                                    if (Convert.ToInt32(dr["AvailableQty"]) < 1)
                                        dr.Delete();
                                }
                            }
                            table1.AcceptChanges();


                            for (int i = table1.Rows.Count - 1; i >= 0; i--)
                            {
                                DataRow dr = table1.Rows[i];
                                if (dr["ProductID"].ToString() == "")
                                    dr.Delete();

                            }
                            table1.AcceptChanges();
                        }
                        catch (Exception rrr)
                        { }

                        if (table1.Rows.Count > 0)
                        {
                            table = table1.AsEnumerable().Skip(startingIndex).Take(numberOfRowsToRetrieve).CopyToDataTable();
                        }
                        if (table.Rows.Count > 0)
                        {
                            RecordsCount = table1.Rows.Count.ToString();
                        }
                    }


                    dtCategoryHierarchy = DBHandler.GetData(string.Format(@"SELECT ID,`Name`,Slug ,ParentID  FROM categories_new WHERE slug = '{0}'
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))))
ORDER BY ParentID
", CategorySlug));




                }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CategoryImageApp\": \"" + table.Rows[0]["CategoryImageApp"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            //JSONString.Append(",\"Variation\": [");
                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            //JSONString.Append("]");

                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["Totaltablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStriptablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");
                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }

                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}],");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("\"CategoryHierarchy\": [");
                        if (dtCategoryHierarchy.Rows.Count > 0)
                        {
                            for (int a = 0; a < dtCategoryHierarchy.Rows.Count; a++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < dtCategoryHierarchy.Columns.Count; j++)
                                {



                                    if (j < dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\",");
                                    }
                                    else if (j == dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\"");
                                    }
                                }


                                if (a == dtCategoryHierarchy.Rows.Count - 1)
                                {
                                    JSONString.Append("}");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                        }
                        JSONString.Append("]");


                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetAllMedicalProducts()
        {
            try
            {


                string OutletID = "32";
                string CategoryName = "0";
                string CategoryID = "2";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }
                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                if (Request.QueryString["CategoryID"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryID"]))
                    {
                        CategoryID = Request.QueryString["CategoryID"].ToString();
                    }
                }
                DataTable table = new DataTable();
                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID` , p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`ProductType` = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'
                // -- HAVING AvailableQty > 0 
                //ORDER BY p.sort DESC {1}
                //", CategoryName, limit, OutletID));

                DataTable dt1 = new DataTable();

                if (CategoryID != "0")
                {


                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                    //                    if (dtPrimaryBranch.Rows.Count > 0)
                    //                    {
                    //                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                    //                        {
                    //                            table = DBHandler.GetData(string.Format(@"
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //and p.isactive = 1 and p.purchase like '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //{1}
                    //", CategoryID, limit, OutletID));
                    //                        }
                    //                        else
                    //                        {
                    //                            table = DBHandler.GetData(string.Format(@"
                    //SELECT ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
                    // FROM 
                    //(SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
                    // 
                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty,
                    //
                    //  p.MaxCount AS MaxOrder 
                    //
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //
                    //
                    //UNION
                    //
                    //
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
                    // 
                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) 
                    // AS AvailableQty,
                    // 
                    //  p.MaxCount AS MaxOrder 
                    //
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //-- {1}
                    //) AS a
                    //GROUP BY 
                    //ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
                    //{3}
                    //", CategoryID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));
                    //                        }
                    //                    }

                    if (table.Rows.Count == 0)
                    {
                        DataTable dtCacheData = DBHandler.GetDataCache(string.Format(@"
SELECT DISTINCT p.`ID` AS ProductID , p.Slug ,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN `productcategories` c ON p.id = c.productid
WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
and p.isactive = 1 and p.purchase like '%Loc%'
-- HAVING AvailableQty > 0 
limit 1000
", CategoryID, limit, OutletID), "GetAllMedicalProducts-" + CategoryID + "-" + OutletID + "-" + limit);



                        Random r = new Random();
                        var rowsTaken = new HashSet<int>();
                        table = dtCacheData.Clone();
                        for (int i = 0; i < 15; i++)
                        {
                            int rndRowIndex = r.Next(dtCacheData.Rows.Count);
                            while (!rowsTaken.Add(rndRowIndex))
                                rndRowIndex = r.Next(dtCacheData.Rows.Count);
                            DataRow randomRow = dtCacheData.Rows[rndRowIndex];
                            table.ImportRow(randomRow);
                        }

                    }

                    //                    if (OutletID != "32")
                    //                    {
                    //                        string ProductIDs = "";
                    //                        for (int a = 0; a < table.Rows.Count; a++)
                    //                        {
                    //                            ProductIDs += table.Rows[a]["ProductID"].ToString() + ",";

                    //                        }
                    //                        ProductIDs = ProductIDs.TrimEnd(',');

                    //                        DataTable table1 = DBHandler.GetData(string.Format(@"
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE p.id in ({0})  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //and p.isactive = 1 and p.purchase like '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //", ProductIDs, "32"));

                    //                        if (table1.Rows.Count > 0)
                    //                        {
                    //                            string ProductIDPrimary = "";
                    //                            string ProductIDSecondary = "";
                    //                            for (int a = 0; a < table1.Rows.Count; a++)
                    //                            {
                    //                                ProductIDPrimary = table1.Rows[a]["ProductID"].ToString();
                    //                                foreach (DataRow dr in table.Rows) // search whole table
                    //                                {
                    //                                    if (dr["ProductID"].ToString() == ProductIDPrimary) // if id==2
                    //                                    {
                    //                                        dr["AvailableQty"] = Convert.ToInt32(table1.Rows[a]["AvailableQty"]) + Convert.ToInt32(dr["AvailableQty"]);
                    //                                        //break; break or not depending on you
                    //                                    }
                    //                                }



                    //                                //ProductIDPrimary = table.Rows[a]["ProductID"].ToString();
                    //                                //for (int b = 0; b < table1.Rows.Count; b++)
                    //                                //{
                    //                                //    ProductIDSecondary = table1.Rows[b]["ProductID"].ToString();

                    //                                //    if (ProductIDPrimary == ProductIDSecondary)
                    //                                //    {
                    //                                //        table.Rows[a]["AvailableQty"] = Convert.ToInt32(table.Rows[a]["AvailableQty"]) + Convert.ToInt32(table1.Rows[b]["AvailableQty"]);
                    //                                //    }
                    //                                //}
                    //                            }
                    //                        }

                    //                    }




                }




                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        //JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BannerImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }


        /*This method is for per box per strip */
        public void GetAllMedicalProductsV1()
        {
            try
            {


                string OutletID = "32";
                string CategoryName = "0";
                string CategoryID = "2";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }
                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                if (Request.QueryString["CategoryID"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryID"]))
                    {
                        CategoryID = Request.QueryString["CategoryID"].ToString();
                    }
                }
                DataTable table = new DataTable();
                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID` , p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`ProductType` = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'
                // -- HAVING AvailableQty > 0 
                //ORDER BY p.sort DESC {1}
                //", CategoryName, limit, OutletID));

                DataTable dt1 = new DataTable();

                if (CategoryID != "0")
                {


                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                    //                    if (dtPrimaryBranch.Rows.Count > 0)
                    //                    {
                    //                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                    //                        {
                    //                            table = DBHandler.GetData(string.Format(@"
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //and p.isactive = 1 and p.purchase like '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //{1}
                    //", CategoryID, limit, OutletID));
                    //                        }
                    //                        else
                    //                        {
                    //                            table = DBHandler.GetData(string.Format(@"
                    //SELECT ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
                    // FROM 
                    //(SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
                    // 
                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty,
                    //
                    //  p.MaxCount AS MaxOrder 
                    //
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //
                    //
                    //UNION
                    //
                    //
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
                    // 
                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) 
                    // AS AvailableQty,
                    // 
                    //  p.MaxCount AS MaxOrder 
                    //
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //-- {1}
                    //) AS a
                    //GROUP BY 
                    //ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
                    //{3}
                    //", CategoryID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));
                    //                        }
                    //                    }

                    if (table.Rows.Count == 0)
                    {
                        DataTable dtCacheData = DBHandler.GetDataCache(string.Format(@"
SELECT DISTINCT p.`ID` AS ProductID , p.Slug ,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL


, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
-- ,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
-- ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor


FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN `productcategories` c ON p.id = c.productid
WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
and p.isactive = 1 and p.purchase like '%Loc%'
-- HAVING AvailableQty > 0 
limit 1000
", CategoryID, limit, OutletID), "GetAllMedicalProductsV1-" + CategoryID + "-" + OutletID + "-" + limit);



                        Random r = new Random();
                        var rowsTaken = new HashSet<int>();
                        table = dtCacheData.Clone();
                        for (int i = 0; i < 15; i++)
                        {
                            int rndRowIndex = r.Next(dtCacheData.Rows.Count);
                            while (!rowsTaken.Add(rndRowIndex))
                                rndRowIndex = r.Next(dtCacheData.Rows.Count);
                            DataRow randomRow = dtCacheData.Rows[rndRowIndex];
                            table.ImportRow(randomRow);
                        }

                    }

                    //                    if (OutletID != "32")
                    //                    {
                    //                        string ProductIDs = "";
                    //                        for (int a = 0; a < table.Rows.Count; a++)
                    //                        {
                    //                            ProductIDs += table.Rows[a]["ProductID"].ToString() + ",";

                    //                        }
                    //                        ProductIDs = ProductIDs.TrimEnd(',');

                    //                        DataTable table1 = DBHandler.GetData(string.Format(@"
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE p.id in ({0})  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //and p.isactive = 1 and p.purchase like '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //", ProductIDs, "32"));

                    //                        if (table1.Rows.Count > 0)
                    //                        {
                    //                            string ProductIDPrimary = "";
                    //                            string ProductIDSecondary = "";
                    //                            for (int a = 0; a < table1.Rows.Count; a++)
                    //                            {
                    //                                ProductIDPrimary = table1.Rows[a]["ProductID"].ToString();
                    //                                foreach (DataRow dr in table.Rows) // search whole table
                    //                                {
                    //                                    if (dr["ProductID"].ToString() == ProductIDPrimary) // if id==2
                    //                                    {
                    //                                        dr["AvailableQty"] = Convert.ToInt32(table1.Rows[a]["AvailableQty"]) + Convert.ToInt32(dr["AvailableQty"]);
                    //                                        //break; break or not depending on you
                    //                                    }
                    //                                }



                    //                                //ProductIDPrimary = table.Rows[a]["ProductID"].ToString();
                    //                                //for (int b = 0; b < table1.Rows.Count; b++)
                    //                                //{
                    //                                //    ProductIDSecondary = table1.Rows[b]["ProductID"].ToString();

                    //                                //    if (ProductIDPrimary == ProductIDSecondary)
                    //                                //    {
                    //                                //        table.Rows[a]["AvailableQty"] = Convert.ToInt32(table.Rows[a]["AvailableQty"]) + Convert.ToInt32(table1.Rows[b]["AvailableQty"]);
                    //                                //    }
                    //                                //}
                    //                            }
                    //                        }

                    //                    }




                }




                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        //JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BannerImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");


                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            //JSONString.Append(",\"Variation\": [");
                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            //JSONString.Append("]");


                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"}");
                                            JSONString.Append("]");

                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }
        public void GetProductByCategorySlug()
        {
            try
            {

                string OutletID = "32";
                string CategoryName = "0";
                string CategorySlug = "";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }
                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                if (Request.QueryString["CategorySlug"] != null)
                {
                    if (!checkForSQLInjection(Request["CategorySlug"]))
                    {
                        CategorySlug = Request.QueryString["CategorySlug"].ToString();
                    }
                }
                DataTable table = new DataTable();
                DataTable dtCategoryHierarchy = new DataTable();
                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID` ,p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , '' as CategoryName , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description`, '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`ProductType` = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'
                // -- HAVING AvailableQty > 0 
                //ORDER BY p.sort DESC {1}
                //", CategoryName, limit, OutletID));

                DataTable dt1 = new DataTable();

                if (CategorySlug != "")
                {


                    //DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                    //                    if (dtPrimaryBranch.Rows.Count > 0)
                    //                    {
                    //                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                    //                        {
                    //                            table = DBHandler.GetData(string.Format(@"
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //and p.isactive = 1 and p.purchase like '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //{1}
                    //", CategoryID, limit, OutletID));
                    //                        }
                    //                        else
                    //                        {
                    //                            table = DBHandler.GetData(string.Format(@"
                    //SELECT ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
                    // FROM 
                    //(SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
                    // 
                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty,
                    //
                    //  p.MaxCount AS MaxOrder 
                    //
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //
                    //
                    //UNION
                    //
                    //
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 
                    // 
                    // FLOOR((IFNULL(Qty,0) / p.unitpercase1)) 
                    // AS AvailableQty,
                    // 
                    //  p.MaxCount AS MaxOrder 
                    //
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE c.CategoryID  = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //-- {1}
                    //) AS a
                    //GROUP BY 
                    //ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,ParentCategory,PrescriptionRequired,CategoryImageURL
                    //{3}
                    //", CategoryID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));
                    //                        }
                    //                    }

                    if (table.Rows.Count == 0)
                    {
                        string CategoryID = ""; string MetaTitle = ""; string MetaDescription = ""; string CategoryNameText = ""; string CategoryImageWeb = ""; string CategoryImageApp = "";
                        DataTable dtCategoryID = DBHandler.GetData(string.Format("select id , `Name`, MetaTitle, MetaDescription, CategoryImageWeb, CategoryImage from categories_new where slug =  '{0}'", CategorySlug));
                        if (dtCategoryID.Rows.Count > 0)
                        {
                            CategoryID =   dtCategoryID.Rows[0]["id"].ToString();
                            MetaTitle = dtCategoryID.Rows[0]["MetaTitle"].ToString().Replace("'","''");
                            MetaDescription = dtCategoryID.Rows[0]["MetaDescription"].ToString().Replace("'", "''");
                            CategoryNameText = dtCategoryID.Rows[0]["Name"].ToString().Replace("'", "''");
                            CategoryImageWeb = dtCategoryID.Rows[0]["CategoryImageWeb"].ToString().Replace("'", "''");
                            CategoryImageApp = dtCategoryID.Rows[0]["CategoryImage"].ToString().Replace("'", "''"); 
                        }



                        DataSet ds = DBHandler.GetDataCacheinDataSet(string.Format(@"
SELECT DISTINCT p.`ID` AS ProductID ,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category, '{6}' AS CategoryName , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `slug` = '{0}' limit 1 )),'') AS ParentCategory, 
p.PrescriptionRequired, c.CategoryImageURL, '{4}' as MetaTitle , '{5}' as MetaDescription , '{6}' as CategoryImageWeb , '{7}' as CategoryImageApp
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN `productcategories` c ON p.id = c.productid
-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
WHERE c.CategoryID  = '{3}'  AND ImageURL != '' AND ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
-- HAVING AvailableQty > 0 
 {1}
", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp), "GetProductByCategorySlug-"+ CategorySlug + "-" + OutletID);

                         
                        if (ds.Tables[0] != null)
                        {
                            table = ds.Tables[0];
                        }
                        //if (ds.Tables[1] != null)
                        //{
                        //    RecordsCount = ds.Tables[1].Rows[0]["TotalRecords"].ToString();
                        //}



                        //try
                        //{
                        //    DataTable table1 = DBHandler.GetDataCache(string.Format(@"SELECT COUNT(*) AS TotalRecords
                        //FROM `products` p 
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN `productcategories` c ON p.id = c.productid
                        //-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
                        //WHERE c.CategoryID  = '{3}'  AND ImageURL != '' AND ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                        //AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                        //-- HAVING AvailableQty > 0 

                        //", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp), "GetProductByCategorySlug-" + CategorySlug + "-" + OutletID);

                        //    if (table1.Rows.Count > 0)
                        //    {
                        //        RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
                        //    }
                        //}
                        //catch (Exception ee)
                        //{ }




                        dtCategoryHierarchy = DBHandler.GetData(string.Format(@"SELECT ID,`Name`,Slug ,ParentID  FROM categories_new WHERE slug = '{0}'
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))))
ORDER BY ParentID
", CategorySlug));



                    }

                    //                    if (OutletID != "32")
                    //                    {
                    //                        string ProductIDs = "";
                    //                        for (int a = 0; a < table.Rows.Count; a++)
                    //                        {
                    //                            ProductIDs += table.Rows[a]["ProductID"].ToString() + ",";

                    //                        }
                    //                        ProductIDs = ProductIDs.TrimEnd(',');

                    //                        DataTable table1 = DBHandler.GetData(string.Format(@"
                    //SELECT DISTINCT p.`ID` AS ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                    // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                    //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                    //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired, c.CategoryImageURL
                    //FROM `products` p 
                    // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                    //INNER JOIN `productcategories` c ON p.id = c.productid
                    //WHERE p.id in ({0})  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                    //and p.isactive = 1 and p.purchase like '%Loc%'
                    //-- HAVING AvailableQty > 0 
                    //", ProductIDs, "32"));

                    //                        if (table1.Rows.Count > 0)
                    //                        {
                    //                            string ProductIDPrimary = "";
                    //                            string ProductIDSecondary = "";
                    //                            for (int a = 0; a < table1.Rows.Count; a++)
                    //                            {
                    //                                ProductIDPrimary = table1.Rows[a]["ProductID"].ToString();
                    //                                foreach (DataRow dr in table.Rows) // search whole table
                    //                                {
                    //                                    if (dr["ProductID"].ToString() == ProductIDPrimary) // if id==2
                    //                                    {
                    //                                        dr["AvailableQty"] = Convert.ToInt32(table1.Rows[a]["AvailableQty"]) + Convert.ToInt32(dr["AvailableQty"]);
                    //                                        //break; break or not depending on you
                    //                                    }
                    //                                }



                    //                                //ProductIDPrimary = table.Rows[a]["ProductID"].ToString();
                    //                                //for (int b = 0; b < table1.Rows.Count; b++)
                    //                                //{
                    //                                //    ProductIDSecondary = table1.Rows[b]["ProductID"].ToString();

                    //                                //    if (ProductIDPrimary == ProductIDSecondary)
                    //                                //    {
                    //                                //        table.Rows[a]["AvailableQty"] = Convert.ToInt32(table.Rows[a]["AvailableQty"]) + Convert.ToInt32(table1.Rows[b]["AvailableQty"]);
                    //                                //    }
                    //                                //}
                    //                            }
                    //                        }

                    //                    }




                }




                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CategoryImageApp\": \"" + table.Rows[0]["CategoryImageApp"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {                               
                                JSONString.Append("}],");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("\"CategoryHierarchy\": [");
                        if (dtCategoryHierarchy.Rows.Count > 0)
                        {
                            for (int a = 0; a < dtCategoryHierarchy.Rows.Count; a++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < dtCategoryHierarchy.Columns.Count; j++)
                                {



                                    if (j < dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\",");
                                    }
                                    else if (j == dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\"");
                                    }
                                }


                                if (a == dtCategoryHierarchy.Rows.Count - 1)
                                {
                                    JSONString.Append("}");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                        }
                        JSONString.Append("]");


                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        /*This method is to resolve pagination issue in medicine category*/
        public void GetProductByCategorySlugV1()
        {
            try
            {
                //Response.Write("1");
                string OutletID = "32";
                string CategoryName = "0";
                string CategorySlug = "";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }
                string limit = "";
                int startingIndex = 0;
                int numberOfRowsToRetrieve = 0;
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();

                        startingIndex = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[0]) ;
                        numberOfRowsToRetrieve = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[1]);
                    }

                }
                if (Request.QueryString["CategorySlug"] != null)
                {
                    if (!checkForSQLInjection(Request["CategorySlug"]))
                    {
                        CategorySlug = Request.QueryString["CategorySlug"].ToString();
                    }
                }
                DataTable table = new DataTable();
                DataTable table1 = new DataTable();
                DataTable dtCategoryHierarchy = new DataTable();
               
                DataTable dt1 = new DataTable();

                if (CategorySlug != "")
                {

                    //Response.Write("2");
                    string CategoryID = ""; string MetaTitle = ""; string MetaDescription = ""; string CategoryNameText = ""; string CategoryImageWeb = ""; string CategoryImageApp = "";
                    DataTable dtCategoryID = DBHandler.GetData(string.Format("select id , `Name`, MetaTitle, MetaDescription, CategoryImageWeb, CategoryImage from categories_new where slug =  '{0}'", CategorySlug));
                    if (dtCategoryID.Rows.Count > 0)
                    {
                        CategoryID = dtCategoryID.Rows[0]["id"].ToString();
                        MetaTitle = dtCategoryID.Rows[0]["MetaTitle"].ToString().Replace("'", "''");
                        MetaDescription = dtCategoryID.Rows[0]["MetaDescription"].ToString().Replace("'", "''");
                        CategoryNameText = dtCategoryID.Rows[0]["Name"].ToString().Replace("'", "''");
                        CategoryImageWeb = dtCategoryID.Rows[0]["CategoryImageWeb"].ToString().Replace("'", "''");
                        CategoryImageApp = dtCategoryID.Rows[0]["CategoryImage"].ToString().Replace("'", "''");
                    }

                    //Response.Write("3");
                    table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT p.`ID` AS ProductID ,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category, '{6}' AS CategoryName , p.`Vendor` AS Brand
 , 0 AS Price , 0  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 0 AS AvailableQty, p.MaxCount AS MaxOrder 
, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , '' AS Variations, 0 AS DiscountPrice, 0 AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `slug` = '{0}' LIMIT 1 )),'') AS ParentCategory, 
p.PrescriptionRequired, c.CategoryImageURL, '{4}' AS MetaTitle , '{5}' AS MetaDescription , '{6}' AS CategoryImageWeb , '{7}' AS CategoryImageApp
FROM `products` p 
-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN `productcategories` c ON p.id = c.productid
-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
WHERE c.CategoryID  = '{3}'  AND ImageURL != '' 
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'

", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp), "GetProductByCategorySlugV1-" + CategorySlug + "-" + OutletID);


                    //Response.Write("4");
                    //if (ds.Tables[0] != null)
                    //{
                    //    table = ds.Tables[0];
                    //}

                    DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));

                    //Response.Write("5");
                    if (dtStockJSON.Rows.Count > 0)
                    {
                        string json = dtStockJSON.Rows[0]["JSON"].ToString();
                        DataTable dt = (DataTable)JsonConvert.DeserializeObject(json, (typeof(DataTable)));

                        for (int a = 0; a < table1.Rows.Count; a++)
                        {
                            DataRow[] rows = dt.Select("ProductID = '" + table1.Rows[a]["ProductID"].ToString() + "'");

                            if (rows.Length > 0)
                            {
                                //Response.Write(table1.Rows[a]["ProductID"].ToString() + "<br/>");
                                table1.Rows[a]["Price"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                table1.Rows[a]["SalePrice"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                table1.Rows[a]["AvailableQty"] = Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                table1.Rows[a]["DiscountPrice"] = Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                table1.Rows[a]["DiscountAmount"] = Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                            }
                        }


                        for (int i = table1.Rows.Count - 1; i >= 0; i--)
                        {
                            DataRow dr = table1.Rows[i];
                            if (dr["AvailableQty"].ToString() == "0")
                                dr.Delete();
                        }
                        table1.AcceptChanges();

                        table = table1.AsEnumerable().Skip(startingIndex).Take(numberOfRowsToRetrieve).CopyToDataTable();

                        if (table.Rows.Count > 0)
                        {
                            RecordsCount = table1.Rows.Count.ToString();
                        }
                    }


                    dtCategoryHierarchy = DBHandler.GetData(string.Format(@"SELECT ID,`Name`,Slug ,ParentID  FROM categories_new WHERE slug = '{0}'
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))))
ORDER BY ParentID
", CategorySlug));




                }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CategoryImageApp\": \"" + table.Rows[0]["CategoryImageApp"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}],");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("\"CategoryHierarchy\": [");
                        if (dtCategoryHierarchy.Rows.Count > 0)
                        {
                            for (int a = 0; a < dtCategoryHierarchy.Rows.Count; a++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < dtCategoryHierarchy.Columns.Count; j++)
                                {



                                    if (j < dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\",");
                                    }
                                    else if (j == dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\"");
                                    }
                                }


                                if (a == dtCategoryHierarchy.Rows.Count - 1)
                                {
                                    JSONString.Append("}");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                        }
                        JSONString.Append("]");


                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        /*This method is for per box per strip */
        public void GetProductByCategorySlugV2()
        {
            try
            {
                //Response.Write("1");
                string OutletID = "32";
                string CategoryName = "0";
                string CategorySlug = "";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }
                string limit = "";
                int startingIndex = 0;
                int numberOfRowsToRetrieve = 0;
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();

                        startingIndex = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[0]);
                        numberOfRowsToRetrieve = Convert.ToInt32(Request.QueryString["limit"].ToString().Split(',')[1]);
                    }

                }
                if (Request.QueryString["CategorySlug"] != null)
                {
                    if (!checkForSQLInjection(Request["CategorySlug"]))
                    {
                        CategorySlug = Request.QueryString["CategorySlug"].ToString();
                    }
                }
                DataTable table = new DataTable();
                DataTable table1 = new DataTable();
                DataTable dtCategoryHierarchy = new DataTable();

                DataTable dt1 = new DataTable();

                if (CategorySlug != "")
                {

                    //Response.Write("2");
                    string CategoryID = ""; string MetaTitle = ""; string MetaDescription = ""; string CategoryNameText = ""; string CategoryImageWeb = ""; string CategoryImageApp = "";
                    DataTable dtCategoryID = DBHandler.GetData(string.Format("select id , `Name`, MetaTitle, MetaDescription, CategoryImageWeb, CategoryImage from categories_new where slug =  '{0}'", CategorySlug));
                    if (dtCategoryID.Rows.Count > 0)
                    {
                        CategoryID = dtCategoryID.Rows[0]["id"].ToString();
                        MetaTitle = dtCategoryID.Rows[0]["MetaTitle"].ToString().Replace("'", "''");
                        MetaDescription = dtCategoryID.Rows[0]["MetaDescription"].ToString().Replace("'", "''");
                        CategoryNameText = dtCategoryID.Rows[0]["Name"].ToString().Replace("'", "''");
                        CategoryImageWeb = dtCategoryID.Rows[0]["CategoryImageWeb"].ToString().Replace("'", "''");
                        CategoryImageApp = dtCategoryID.Rows[0]["CategoryImage"].ToString().Replace("'", "''");
                    }

                    //Response.Write("3");
                    table1 = DBHandler.GetDataCache(string.Format(@"

SELECT DISTINCT p.`ID` AS ProductID ,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category, '{6}' AS CategoryName , p.`Vendor` AS Brand
 , 0 AS Price , 0  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , 0 AS AvailableQty, p.MaxCount AS MaxOrder 
, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , '' AS Variations, 0 AS DiscountPrice, 0 AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `slug` = '{0}' LIMIT 1 )),'') AS ParentCategory, 
p.PrescriptionRequired, c.CategoryImageURL, '{4}' AS MetaTitle , '{5}' AS MetaDescription , '{6}' AS CategoryImageWeb , '{7}' AS CategoryImageApp

, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, 0.00   AS SaleStripPrice  , 0.00 AS StripAvailableQty, 0.00 AS DiscountStripPrice, 0.00 AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor


FROM `products` p 
-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN `productcategories` c ON p.id = c.productid
-- INNER JOIN categories_new cn ON c.`CategoryID` = cn.`ID`  
WHERE c.CategoryID  = '{3}'  AND ImageURL != '' 
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
ORDER BY p.`OrderCount` DESC
", CategorySlug, limit, OutletID, CategoryID, MetaTitle, MetaDescription, CategoryNameText, CategoryImageWeb, CategoryImageApp), "GetProductByCategorySlugV2-" + CategorySlug + "-" + OutletID);


                    /*
                     JSONString.Append(",\"Variation\": [");
                     
                       "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                     JSONString.Append("]");
                     * */


                    //Response.Write("4");
                    //if (ds.Tables[0] != null)
                    //{
                    //    table = ds.Tables[0];
                    //}

                    DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));

                    //Response.Write("5");
                    if (dtStockJSON.Rows.Count > 0)
                    {
                        string json = dtStockJSON.Rows[0]["JSON"].ToString();
                        DataTable dt = (DataTable)JsonConvert.DeserializeObject(json, (typeof(DataTable)));

                        for (int a = 0; a < table1.Rows.Count; a++)
                        {
                            DataRow[] rows = dt.Select("ProductID = '" + table1.Rows[a]["ProductID"].ToString() + "'");

                            if (rows.Length > 0)
                            {
                                try
                                {
                                    //Response.Write(table1.Rows[a]["ProductID"].ToString() + "<br/>");
                                    table1.Rows[a]["Price"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["SalePrice"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["AvailableQty"] = Math.Floor(Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"]));
                                    table1.Rows[a]["DiscountPrice"] = Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    table1.Rows[a]["DiscountAmount"] = Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);

                                    //table1.Rows[a]["SaleBoxpPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) * Convert.ToDecimal(table1.Rows[a]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    //table1.Rows[a]["DiscountBoxPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) * Convert.ToDecimal(table1.Rows[a]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    //table1.Rows[a]["DiscountBoxAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) * Convert.ToDecimal(table1.Rows[a]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    //table1.Rows[a]["TotalTablets"] = Convert.ToDecimal(table1.Rows[a]["unitpercase"]) * Convert.ToDecimal(table1.Rows[a]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"]);
                                    //table1.Rows[a]["BoxAvailableQty"] = (Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["noofstrips"]);

                                    table1.Rows[a]["SaleStripPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);
                                    table1.Rows[a]["StripAvailableQty"] = Math.Floor((Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table1.Rows[a]["unitpercase"])) * Convert.ToDecimal(table1.Rows[a]["NoofStrips"]));
                                    table1.Rows[a]["DiscountStripPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);
                                    table1.Rows[a]["DiscountStripAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table1.Rows[a]["unitpercase"])) / Convert.ToDecimal(table1.Rows[a]["NoofStrips"]);
                                     

                                }
                                catch (Exception erq)
                                {
                                    Response.Write(a + " - " + table1.Rows[a]["Slug"].ToString());
                                }

                            }
                        }


                        for (int i = table1.Rows.Count - 1; i >= 0; i--)
                        {
                            DataRow dr = table1.Rows[i];
                            if (dr["AvailableQty"].ToString() == "0")
                                dr.Delete();
                        }
                        table1.AcceptChanges();

                        if (table1.Rows.Count > 0)
                        {
                            table = table1.AsEnumerable().Skip(startingIndex).Take(numberOfRowsToRetrieve).CopyToDataTable();
                        }

                        if (table.Rows.Count > 0)
                        {
                            RecordsCount = table1.Rows.Count.ToString();
                        }
                    }


                    dtCategoryHierarchy = DBHandler.GetData(string.Format(@"SELECT ID,`Name`,Slug ,ParentID  FROM categories_new WHERE slug = '{0}'
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}')))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid  FROM categories_new WHERE id IN
(SELECT parentid FROM categories_new WHERE slug = '{0}'))))
ORDER BY ParentID
", CategorySlug));




                }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"CategoryImageURL\": \"" + table.Rows[0]["CategoryImageURL"].ToString() + "\",\"CategoryImageApp\": \"" + table.Rows[0]["CategoryImageApp"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["CategoryName"].ToString() + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            //JSONString.Append(",\"Variation\": [");
                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            //JSONString.Append("]");

                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["Totaltablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStriptablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");
                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }

                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}],");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("\"CategoryHierarchy\": [");
                        if (dtCategoryHierarchy.Rows.Count > 0)
                        {
                            for (int a = 0; a < dtCategoryHierarchy.Rows.Count; a++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < dtCategoryHierarchy.Columns.Count; j++)
                                {



                                    if (j < dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\",");
                                    }
                                    else if (j == dtCategoryHierarchy.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + dtCategoryHierarchy.Columns[j].ColumnName.ToString() + "\":" + "\"" + dtCategoryHierarchy.Rows[a][j].ToString() + "\"");
                                    }
                                }


                                if (a == dtCategoryHierarchy.Rows.Count - 1)
                                {
                                    JSONString.Append("}");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                        }
                        JSONString.Append("]");


                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }


        public void GetProductByBrand()
        {
            try
            {
                string OutletID = "32";
                string BrandName = "0";
                string BrandID = "0";
                string RecordsCount = "0";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["BrandName"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandName"]))
                    {
                        BrandName = Request.QueryString["BrandName"].ToString();
                    }
                }

                if (Request.QueryString["BrandID"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandID"]))
                    {
                        BrandID = Request.QueryString["BrandID"].ToString();
                    }
                }

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                DataTable table = new DataTable();
                  //                DataTable table = DBHandler.GetData(string.Format(@"
                  //SELECT DISTINCT p.`ID`, p.Slug ,   TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                  // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                  //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, p.BrandImageURL
                  //FROM `products` p 
                  //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                  // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                  //WHERE p.`Vendor` = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                  //and p.isactive = 1 and p.purchase like '%Loc%'
                  // -- HAVING AvailableQty > 0
                  //{1}
                  //", BrandName, limit, OutletID));

                  DataTable dt1 = new DataTable();

                if (BrandID != "0")
                {

                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                    if (dtPrimaryBranch.Rows.Count > 0)
                    {
//                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
//                        {

//                            table = DBHandler.GetData(string.Format(@"
//SELECT DISTINCT p.`ID` as ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
// , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
//, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
// left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//inner join brands b on p.vendor =  b.`Name`
//WHERE b.ID = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
//and p.isactive = 1 and p.purchase like '%Loc%'
// -- HAVING AvailableQty > 0
//{1}
//", BrandID, limit, OutletID));
//                        }
//                        else
//                        {
//                            table = DBHandler.GetData(string.Format(@"
//SELECT
//ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
//FROM
//(SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
// , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
//, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//INNER JOIN brands b ON p.vendor =  b.`Name`
//WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
//AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
//UNION
//
//SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
// , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
//, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//INNER JOIN brands b ON p.vendor =  b.`Name`
//WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
//AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
//)
//AS a 
//GROUP BY ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
//{3}
//", BrandID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));

//                        }

                        if (table.Rows.Count == 0)
                        {
                            table = DBHandler.GetDataCache(string.Format(@"
SELECT DISTINCT p.`ID` AS ProductID, p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
,TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r','')) AS Description, '' AS Variations, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
FROM `products` p 
-- INNER JOIN  `productvariation` pv ON p.id = pv.productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN brands b ON p.vendor =  b.`Name`
WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
 -- HAVING AvailableQty > 0
ORDER BY p.sort DESC {1}
", BrandID, limit, OutletID), "GetProductByBrand-"+ BrandID + "-" + OutletID + "-" + limit);
                        }
                    }
                }
                 
                
                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }


                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BrandImageURL\": \"" + table.Rows[0]["BrandImageURL"].ToString() + "\",\"Data\": [");

                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        /*This method is for per box per strip */
        public void GetProductByBrandV1()
        {
            try
            {
                string OutletID = "32";
                string BrandName = "0";
                string BrandID = "0";
                string RecordsCount = "0";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["BrandName"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandName"]))
                    {
                        BrandName = Request.QueryString["BrandName"].ToString();
                    }
                }

                if (Request.QueryString["BrandID"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandID"]))
                    {
                        BrandID = Request.QueryString["BrandID"].ToString();
                    }
                }

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                DataTable table = new DataTable();
                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID`, p.Slug ,   TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, p.BrandImageURL
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`Vendor` = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'
                // -- HAVING AvailableQty > 0
                //{1}
                //", BrandName, limit, OutletID));

                DataTable dt1 = new DataTable();

                if (BrandID != "0")
                {

                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                    if (dtPrimaryBranch.Rows.Count > 0)
                    {
                        //                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                        //                        {

                        //                            table = DBHandler.GetData(string.Format(@"
                        //SELECT DISTINCT p.`ID` as ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //inner join brands b on p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //and p.isactive = 1 and p.purchase like '%Loc%'
                        // -- HAVING AvailableQty > 0
                        //{1}
                        //", BrandID, limit, OutletID));
                        //                        }
                        //                        else
                        //                        {
                        //                            table = DBHandler.GetData(string.Format(@"
                        //SELECT
                        //ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
                        //FROM
                        //(SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN brands b ON p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
                        //UNION
                        //
                        //SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN brands b ON p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
                        //)
                        //AS a 
                        //GROUP BY ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
                        //{3}
                        //", BrandID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));

                        //                        }

                        if (table.Rows.Count == 0)
                        {
                            table = DBHandler.GetDataCache(string.Format(@"
SELECT DISTINCT p.`ID` AS ProductID, p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
,TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r','')) AS Description, '' AS Variations, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL


, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor


FROM `products` p 
-- INNER JOIN  `productvariation` pv ON p.id = pv.productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN brands b ON p.vendor =  b.`Name`
WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
 -- HAVING AvailableQty > 0
ORDER BY p.OrderCount DESC {1}
", BrandID, limit, OutletID), "GetProductByBrandV1-" + BrandID + "-" + OutletID + "-" + limit);
                        }
                    }
                }


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }


                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BrandImageURL\": \"" + table.Rows[0]["BrandImageURL"].ToString() + "\",\"Data\": [");

                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {

                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");
                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }


        public void GetProductByBrandSlug()
        {
            try
            {
                string OutletID = "32";
                string BrandName = "0";
                string BrandSlug = "";
                string RecordsCount = "0";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["BrandName"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandName"]))
                    {
                        BrandName = Request.QueryString["BrandName"].ToString();
                    }
                }

                if (Request.QueryString["BrandSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandSlug"]))
                    {
                        BrandSlug = Request.QueryString["BrandSlug"].ToString();
                    }
                }

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                DataTable table = new DataTable();
              //                DataTable table = DBHandler.GetData(string.Format(@"
              //SELECT DISTINCT p.`ID`,p.Slug ,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))    AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
              // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
              //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, p.BrandImageURL
              //FROM `products` p 
              //INNER JOIN  `productvariation` pv ON p.id = pv.productid
              // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
              //WHERE p.`Vendor` = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
              //and p.isactive = 1 and p.purchase like '%Loc%'
              // -- HAVING AvailableQty > 0
              //ORDER BY p.sort DESC {1}
              //", BrandName, limit, OutletID));

              DataTable dt1 = new DataTable();

                if (BrandSlug != "")
                {

                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                    if (dtPrimaryBranch.Rows.Count > 0)
                    {
                        //                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                        //                        {

                        //                            table = DBHandler.GetData(string.Format(@"
                        //SELECT DISTINCT p.`ID` as ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //inner join brands b on p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //and p.isactive = 1 and p.purchase like '%Loc%'
                        // -- HAVING AvailableQty > 0
                        //{1}
                        //", BrandID, limit, OutletID));
                        //                        }
                        //                        else
                        //                        {
                        //                            table = DBHandler.GetData(string.Format(@"
                        //SELECT
                        //ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
                        //FROM
                        //(SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN brands b ON p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
                        //UNION
                        //
                        //SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN brands b ON p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
                        //)
                        //AS a 
                        //GROUP BY ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
                        //{3}
                        //", BrandID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));

                        //                        }

                        if (table.Rows.Count == 0)
                        {
                           DataSet ds = DBHandler.GetDataCacheinDataSet(string.Format(@"SELECT DISTINCT p.`ID` AS ProductID,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
,TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r','')) AS Description, '' AS Variations, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
,b.`MetaTitle` , b.`MetaDescription`
FROM `products` p 
-- INNER JOIN  `productvariation` pv ON p.id = pv.productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN brands b ON p.vendor =  b.`Name`
WHERE b.Slug = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
 -- HAVING AvailableQty > 0
ORDER BY p.sort DESC   {1} 


", BrandSlug, limit, OutletID), "GetProductByBrandSlug-"+ BrandSlug + "-" + OutletID + "-" + limit);

                            
                            if (ds.Tables[0] != null)
                            {
                                table = ds.Tables[0];
                            }
                            //if (ds.Tables[1] != null)
                            //{
                            //    RecordsCount = ds.Tables[1].Rows[0]["TotalRecords"].ToString();
                            //}


                            DataTable table1 = DBHandler.GetDataCache(string.Format(@"SELECT COUNT(*) AS TotalRecords
                            FROM `products` p 
                            -- INNER JOIN  `productvariation` pv ON p.id = pv.productid
                             LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                            INNER JOIN brands b ON p.vendor =  b.`Name`
                            WHERE b.Slug = '{0}' AND ImageURL != '' AND ps.store_no =  '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                            AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                             -- HAVING AvailableQty > 0
                            ORDER BY p.sort DESC   

                            ", BrandSlug, OutletID), "GetProductByBrandSlug-" + BrandSlug + "-" + OutletID);

                            if (table1.Rows.Count > 0)
                            {
                                RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
                            }

                        }
                    }
                }


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());
                            dr["Title"] = dr["Title"].ToString().Replace("ML", "ml");
                        }


                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BannerImageURL\": \"" + table.Rows[0]["BrandImageURL"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["Brand"].ToString() + "\",\"Data\": [");

                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        /*This method is for per box per strip */
        public void GetProductByBrandSlugV1()
        {
            try
            {
                string OutletID = "32";
                string BrandName = "0";
                string BrandSlug = "";
                string RecordsCount = "0";

                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["BrandName"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandName"]))
                    {
                        BrandName = Request.QueryString["BrandName"].ToString();
                    }
                }

                if (Request.QueryString["BrandSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["BrandSlug"]))
                    {
                        BrandSlug = Request.QueryString["BrandSlug"].ToString();
                    }
                }

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }
                DataTable table = new DataTable();
                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID`,p.Slug ,  TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))    AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                //, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, p.BrandImageURL
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`Vendor` = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'
                // -- HAVING AvailableQty > 0
                //ORDER BY p.sort DESC {1}
                //", BrandName, limit, OutletID));

                DataTable dt1 = new DataTable();

                if (BrandSlug != "")
                {

                    DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                    if (dtPrimaryBranch.Rows.Count > 0)
                    {
                        //                        if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                        //                        {

                        //                            table = DBHandler.GetData(string.Format(@"
                        //SELECT DISTINCT p.`ID` as ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //inner join brands b on p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  and ImageURL != '' and ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //and p.isactive = 1 and p.purchase like '%Loc%'
                        // -- HAVING AvailableQty > 0
                        //{1}
                        //", BrandID, limit, OutletID));
                        //                        }
                        //                        else
                        //                        {
                        //                            table = DBHandler.GetData(string.Format(@"
                        //SELECT
                        //ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
                        //FROM
                        //(SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN brands b ON p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{1}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
                        //UNION
                        //
                        //SELECT DISTINCT p.`ID` AS ProductID, LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                        // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                        //, p.`Description`, '' AS Variations, IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL
                        //FROM `products` p 
                        //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                        //INNER JOIN brands b ON p.vendor =  b.`Name`
                        //WHERE b.ID = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / unitpercase))  > 0)
                        //AND p.isactive = 1 AND p.purchase LIKE '%Loc%' 
                        //)
                        //AS a 
                        //GROUP BY ProductID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,BrandImageURL
                        //{3}
                        //", BrandID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString(), limit));

                        //                        }

                        if (table.Rows.Count == 0)
                        {
                            DataSet ds = DBHandler.GetDataCacheinDataSet(string.Format(@"SELECT DISTINCT p.`ID` AS ProductID,p.Slug, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
,TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r','')) AS Description, '' AS Variations, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, b.BrandImageURL


, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
IFNULL(b.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(b.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor


FROM `products` p 
-- INNER JOIN  `productvariation` pv ON p.id = pv.productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
INNER JOIN brands b ON p.vendor =  b.`Name`
WHERE b.Slug = '{0}'  AND ImageURL != '' AND ps.store_no = '{2}' AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
 -- HAVING AvailableQty > 0
ORDER BY p.`OrderCount` DESC   {1} 


", BrandSlug, limit, OutletID), "GetProductByBrandSlugV1-" + BrandSlug + "-" + OutletID + "-" + limit);


                            if (ds.Tables[0] != null)
                            {
                                table = ds.Tables[0];
                            }
                            //if (ds.Tables[1] != null)
                            //{
                            //    RecordsCount = ds.Tables[1].Rows[0]["TotalRecords"].ToString();
                            //}


                            DataTable table1 = DBHandler.GetDataCache(string.Format(@"SELECT COUNT(*) AS TotalRecords
                            FROM `products` p 
                            -- INNER JOIN  `productvariation` pv ON p.id = pv.productid
                             LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                            INNER JOIN brands b ON p.vendor =  b.`Name`
                            WHERE b.Slug = '{0}' AND ImageURL != '' AND ps.store_no =  '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                            AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                             -- HAVING AvailableQty > 0
                            ORDER BY p.sort DESC   

                            ", BrandSlug, OutletID), "GetProductByBrandSlugV1-" + BrandSlug + "-" + OutletID);

                            if (table1.Rows.Count > 0)
                            {
                                RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
                            }

                        }
                    }
                }


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());
                            dr["Title"] = dr["Title"].ToString().Replace("ML", "ml");
                        }


                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"BannerImageURL\": \"" + table.Rows[0]["BrandImageURL"].ToString() + "\",\"CollectionName\": \"" + table.Rows[0]["Brand"].ToString() + "\",\"Data\": [");

                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");

                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetProductByAlphabet()
        {
            try
            {


                string OutletID = "32";
                string Alphabet = "";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["Alphabet"] != null)
                {
                    if (!checkForSQLInjection(Request["Alphabet"]))
                    {
                        Alphabet = Request.QueryString["Alphabet"].ToString();
                    }
                }
                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }





                //                    DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID` AS ProductID , p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, p.Slug, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired
                //FROM `products` p 
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine'
                //-- HAVING AvailableQty > 0 
                //{1};


                //SELECT COUNT(*) AS TotalRecords
                //FROM `products` p 
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine';

                //", Alphabet, limit, OutletID));



                DataSet ds = DBHandler.GetDatainDataSet(string.Format(@"
SELECT DISTINCT p.`ID` AS ProductID , p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, p.Slug, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine'
-- HAVING AvailableQty > 0 
{1} 

", Alphabet, limit, OutletID));

                DataTable table = null;
                if (ds.Tables[0] != null)
                {
                    table = ds.Tables[0];
                }
                //if (ds.Tables[1] != null)
                //{
                //    RecordsCount = ds.Tables[1].Rows[0]["TotalRecords"].ToString();
                //}

                try
                {
                    DataTable table1 = DBHandler.GetData(string.Format(@"SELECT COUNT(*) AS TotalRecords
                FROM `products` p 
                 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine'

                ", Alphabet, OutletID));

                    if (table1.Rows.Count > 0)
                    {
                        RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
                    }
                }
                catch (Exception ee)
                { }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        /*This method is for per box per strip */
        public void GetProductByAlphabetV1()
        {
            try
            {


                string OutletID = "32";
                string Alphabet = "";
                string RecordsCount = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["Alphabet"] != null)
                {
                    if (!checkForSQLInjection(Request["Alphabet"]))
                    {
                        Alphabet = Request.QueryString["Alphabet"].ToString();
                    }
                }
                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }





                //                    DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID` AS ProductID , p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, p.Slug, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
                //, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
                //,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired
                //FROM `products` p 
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine'
                //-- HAVING AvailableQty > 0 
                //{1};


                //SELECT COUNT(*) AS TotalRecords
                //FROM `products` p 
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                //and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine';

                //", Alphabet, limit, OutletID));



                DataSet ds = DBHandler.GetDatainDataSet(string.Format(@"
SELECT DISTINCT p.`ID` AS ProductID , p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, p.Slug, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.VariationTitle AS VariationTitle, p.unitpercase1  AS  unitpercase , FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder 
, p.`Description`, '' AS Variations,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount
,IFNULL((SELECT `Name` FROM categories_new  WHERE ID = (SELECT parentid FROM categories_new WHERE `name` = (SELECT `name` FROM categories WHERE id = '5'))),'') AS ParentCategory, p.PrescriptionRequired
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
,'' AS ParentCategory
,'' AS ParentCategorySlug
,p.Usedfor
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{2}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine'
-- HAVING AvailableQty > 0 
ORDER BY p.`OrderCount` DESC
{1} 

", Alphabet, limit, OutletID));

                DataTable table = null;
                if (ds.Tables[0] != null)
                {
                    table = ds.Tables[0];
                }
                //if (ds.Tables[1] != null)
                //{
                //    RecordsCount = ds.Tables[1].Rows[0]["TotalRecords"].ToString();
                //}

                try
                {
                    DataTable table1 = DBHandler.GetData(string.Format(@"SELECT COUNT(*) AS TotalRecords
                FROM `products` p 
                 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                WHERE p.title like '{0}%'  AND ImageURL != '' and ps.store_no = '{1}'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                and p.isactive = 1 and p.purchase like '%Loc%'  AND p.`ProductType` = 'Medicine'

                ", Alphabet, OutletID));

                    if (table1.Rows.Count > 0)
                    {
                        RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
                    }
                }
                catch (Exception ee)
                { }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\",\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");


                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            //JSONString.Append(",\"Variation\": [");
                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            //JSONString.Append("]");


                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");

                                           
                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetProductDetailByID()
        {
            try
            {
                string OutletID = "0";
                string ProductID = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["ProductID"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductID"]))
                    {
                        ProductID = Request.QueryString["ProductID"].ToString();
                    }
                }



//                DataTable table = DBHandler.GetData(string.Format(@"
//                SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title  
// , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice
//, 0 AS SalePercent, p.`Description`, pv.title AS  Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand, FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder , IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.`ID` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
//                 ", ProductID, OutletID));

                DataTable table = new DataTable();

                  //DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                  //if (dtPrimaryBranch.Rows.Count > 0)
                  //{
                      //if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                      //{

                          table = DBHandler.GetData(string.Format(@"
                SELECT p.`ID`, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category 
,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
,p.`Vendor` AS Brand
,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name order by id desc limit 1),'0') AS BrandID
, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , ((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, p.MetaTitle, p.MetaDescription
, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
,p.Usedfor
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.`ID` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
                 ", ProductID, OutletID));

                      //}
//                      else
//                      {
//                          table = DBHandler.GetData(string.Format(@"
//             SELECT ID,Slug,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,CategoryID,Brand,BrandID,SUM(AvailableQty) AS AvailableQty,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired,`UPC`
//FROM
//(   SELECT p.`ID` , p.Slug, TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
// , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
//, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category 
//,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
//,p.`Vendor` AS Brand
//,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
//, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
//FROM `products` p 
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.`ID` = '{0}'  AND ps.store_no = '{1}' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'

//UNION

//   SELECT p.`ID` , p.Slug, TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title  
// , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
//, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category 
//,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
//,p.`Vendor` AS Brand
//,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
//, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
//FROM `products` p 
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.`ID` = '{0}'  AND ps.store_no = '{2}' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
//) AS a
//GROUP BY
//ID,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,CategoryID,Brand,BrandID,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired,`UPC`

//                 ", ProductID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString()));
//                      }
                  //}

                  try
                  {
                      if (table.Rows.Count == 0)
                      {

                        table = DBHandler.GetData(string.Format(@"             
                SELECT p.`ID`, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category 
,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
,p.`Vendor` AS Brand
,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
, 0 AS AvailableQty, 0 AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , ((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, p.MetaTitle, p.MetaDescription
, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
,p.Usedfor
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.`ID` = '{0}'  
AND p.isactive = 1 AND p.purchase LIKE '%Loc%' LIMIT 1
                 ", ProductID));


                    }
                  }
                  catch (Exception e1)
                  { }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                try
                                {
                                    if (Convert.ToInt32(table.Rows[0]["NoofStrips"]) > 1)
                                    {
                                        JSONString.Append(",\"Variation\": [");
                                        JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[0]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxOrder"].ToString() + "\"},");
                                        JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[0]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxStripOrder"].ToString() + "\"}");
                                        JSONString.Append("]");
                                    }
                                    else
                                    {
                                        JSONString.Append(",\"Variation\": []");
                                    }
                                }
                                catch (Exception ee)
                                { }

                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        //        public void GetProductDetailByIDV1()
        //        {
        //            try
        //            {
        //                string OutletID = "0";
        //                string ProductID = "0";
        //                if (Request.QueryString["BranchCode"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["BranchCode"]))
        //                    {
        //                        if (Request["BranchCode"].ToString() != "")
        //                        {
        //                            OutletID = Request.QueryString["BranchCode"].ToString();
        //                        }
        //                    }
        //                }
        //                if (Request.QueryString["ProductID"] != null)
        //                {
        //                    if (!checkForSQLInjection(Request["ProductID"]))
        //                    {
        //                        ProductID = Request.QueryString["ProductID"].ToString();
        //                    }
        //                }



        //                //                DataTable table = DBHandler.GetData(string.Format(@"
        //                //                SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title  
        //                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice
        //                //, 0 AS SalePercent, p.`Description`, pv.title AS  Variations, '' AS Highlights, 
        //                //ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand, FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder , IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
        //                //FROM `products` p 
        //                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
        //                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //                //WHERE p.`ID` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
        //                //                 ", ProductID, OutletID));

        //                DataTable table = new DataTable();

        //                //DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
        //                //if (dtPrimaryBranch.Rows.Count > 0)
        //                //{
        //                //    if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
        //                //    {

        //                table = DBHandler.GetDataCache(string.Format(@"
        // SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
        //, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
        //ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
        //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
        //,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
        //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
        //, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`

        //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  ,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
        //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
        //, ifnull(p.unitpercase1 * p.noofstrips,0)  as TotalTablets,   p.unitpercase1  as TotalStripTablets
        //,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
        // ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
        //,p.Usedfor

        //FROM `products` p 
        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //WHERE p.`id` = '{0}' AND ps.store_no = '{1}'   and p.isactive = 1 and p.purchase like '%Loc%'

        //                 ", ProductID, OutletID), "GetProductDetailBySlug-" + ProductID + "-" + OutletID);


        //                if (table.Rows.Count == 0)
        //                {
        //                    table = DBHandler.GetDataCache(string.Format(@"
        //                SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
        // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
        //, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
        //ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
        //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
        //,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
        //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
        //, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`

        //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  ,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
        //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
        //, ifnull(p.unitpercase1 * p.noofstrips,0)  as TotalTablets,   p.unitpercase1  as TotalStripTablets
        //,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
        // ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
        //,p.Usedfor

        //FROM `products` p 
        // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
        //WHERE p.`id` = '{0}'   and p.isactive = 1 and p.purchase like '%Loc%'
        //                 ", ProductID, OutletID), "GetProductDetailBySlug-" + ProductID + "-" + OutletID);
        //                }




        //                var JSONString = new StringBuilder();
        //                if (table.Rows.Count > 0)
        //                {
        //                    if (table.Rows.Count > 0)
        //                    {
        //                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

        //                        foreach (DataRow dr in table.Rows) // search whole table
        //                        {
        //                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

        //                        }

        //                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
        //                        for (int i = 0; i < table.Rows.Count; i++)
        //                        {
        //                            JSONString.Append("{");
        //                            for (int j = 0; j < table.Columns.Count; j++)
        //                            {
        //                                if (j < table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\",");
        //                                }
        //                                else if (j == table.Columns.Count - 1)
        //                                {
        //                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\"");
        //                                }
        //                            }


        //                            if (i == table.Rows.Count - 1)
        //                            {
        //                                try
        //                                {
        //                                    if (Convert.ToInt32(table.Rows[0]["NoofStrips"]) > 1)
        //                                    {

        //                                        //if (table.Rows[0]["Variations"].ToString().ToLower() == "strip")
        //                                        //{
        //                                        //    JSONString.Append(",\"Variation\": [");

        //                                        //    JSONString.Append("]");
        //                                        //}
        //                                        //else
        //                                        //{ }

        //                                            //JSONString.Append(",\"Variation\": [");
        //                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
        //                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
        //                                            //JSONString.Append("]");

        //                                        JSONString.Append(",\"Variation\": [");
        //                                        JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[0]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
        //                                        JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[0]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
        //                                        JSONString.Append("]");

        //                                    }
        //                                    else
        //                                    {
        //                                        JSONString.Append(",\"Variation\": []");
        //                                    }
        //                                }
        //                                catch (Exception ee)
        //                                { }

        //                                JSONString.Append("}]");
        //                            }
        //                            else
        //                            {
        //                                JSONString.Append("},");
        //                            }
        //                        }
        //                        JSONString.Append("}");
        //                    }

        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(JSONString.ToString());
        //                }
        //                else
        //                {
        //                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


        //                    Response.Clear();
        //                    Response.ContentType = "application/json; charset=utf-8";
        //                    Response.Write(Message.ToString());
        //                }


        //            }
        //            catch (Exception ex)
        //            {
        //                Response.Write(ex.Message);

        //            }
        //        }


        /*This method is for per box per strip */
        public void GetProductDetailByIDV1()
        {
            try
            {
                string OutletID = "0";
                string ProductID = "0";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["ProductID"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductID"]))
                    {
                        ProductID = Request.QueryString["ProductID"].ToString();
                    }
                }




                DataTable table1 = DBHandler.GetDataCache(string.Format(@"                SELECT p.`ID`, p.`ID` AS ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
 , 0.00 AS Price , 0.00  AS SalePrice
, 0.00 AS SalePercent, 
TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r','')) AS `Description` 
, p.variationtitle AS  Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category , '' AS CategorySlug, p.`unitpercase1` , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `HowItWorks`
,'0' AS CategoryID
,p.`Vendor` AS Brand, '' AS BrandSlug 
,'' AS BrandID
, 0 AS AvailableQty, p.MaxCount AS MaxOrder , 0.00 AS DiscountPrice, 0.00 AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, 0.00   AS SaleStripPrice  , 0.00 AS StripAvailableQty, 0.00 AS DiscountStripPrice, 0.00 AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor
FROM `products` p 
-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE  p.isactive = 1 AND p.purchase LIKE '%Loc%'
"), "GetProductDetailByIDV1-");


                DataTable table = new DataTable();


                DataRow[] rows4 = table1.Select("ID = '" + ProductID + "'");

                if (rows4.Length > 0)
                {
                    table = rows4.CopyToDataTable();
                }



                DataTable dtcategories_new = DBHandler.GetDataCache("select id, name,slug from categories_new", "categories_new");

                DataTable dtproductcategories = DBHandler.GetDataCache("select CategoryID,productid from productcategories", "productcategories");

                DataTable dtbrands = DBHandler.GetDataCache("select id,Name,slug from brands", "brands");



                DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));

                string json = dtStockJSON.Rows[0]["JSON"].ToString();
                DataTable dt = (DataTable)JsonConvert.DeserializeObject(json, (typeof(DataTable)));





                for (int a = 0; a < table.Rows.Count; a++)
                {
                    DataRow[] rows = dtcategories_new.Select("name = '" + table.Rows[a]["Category"].ToString() + "'");

                    if (rows.Length > 0)
                    {
                        table.Rows[a]["CategorySlug"] = rows[0]["slug"].ToString();
                    }

                    DataRow[] rows1 = dtproductcategories.Select("productid = '" + table.Rows[a]["ProductID"].ToString() + "'");

                    if (rows1.Length > 0)
                    {
                        table.Rows[a]["CategoryID"] = rows1[0]["CategoryID"].ToString();

                        DataRow[] rows5 = dtcategories_new.Select("id = '" + rows1[rows1.Length - 1]["CategoryID"] + "'");

                        if (rows5.Length > 0)
                        {
                            table.Rows[a]["ParentCategory"] = rows5[0]["name"].ToString();
                            table.Rows[a]["ParentCategorySlug"] = rows5[0]["slug"].ToString();
                        }

                    }

                    DataRow[] rows2 = dtbrands.Select("Name = '" + table.Rows[a]["Brand"].ToString() + "'");

                    if (rows2.Length > 0)
                    {
                        table.Rows[a]["BrandSlug"] = rows2[0]["slug"].ToString();
                        table.Rows[a]["BrandID"] = rows2[0]["id"].ToString();
                    }


                    DataRow[] rows3 = dt.Select("ProductID = '" + table.Rows[a]["ProductID"].ToString() + "'");

                    if (rows3.Length > 0)
                    {
                        //Response.Write(table.Rows[a]["ProductID"].ToString() + "<br/>");
                        table.Rows[a]["Price"] = Convert.ToDecimal(rows3[0]["Price"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);
                        table.Rows[a]["SalePrice"] = Convert.ToDecimal(rows3[0]["Price"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);
                        table.Rows[a]["AvailableQty"] = Math.Floor(Convert.ToDecimal(rows3[0]["Qty"]) / Convert.ToDecimal(table.Rows[a]["unitpercase1"]));
                        table.Rows[a]["DiscountPrice"] = Convert.ToDecimal(rows3[0]["DiscountPrice"].ToString() == "" ? "0" : rows3[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);
                        table.Rows[a]["DiscountAmount"] = Convert.ToDecimal(rows3[0]["DiscountAmount"].ToString() == "" ? "0" : rows3[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);

                        table.Rows[a]["SaleStripPrice"] = (Convert.ToDecimal(rows3[0]["Price"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"])) / Convert.ToDecimal(table.Rows[a]["NoofStrips"]);
                        table.Rows[a]["StripAvailableQty"] = Math.Floor((Convert.ToDecimal(rows3[0]["Qty"]) / Convert.ToDecimal(table.Rows[a]["unitpercase1"])) * Convert.ToDecimal(table.Rows[a]["NoofStrips"]));
                        table.Rows[a]["DiscountStripPrice"] = (Convert.ToDecimal(rows3[0]["DiscountPrice"].ToString() == "" ? "0" : rows3[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"])) / Convert.ToDecimal(table.Rows[a]["NoofStrips"]);
                        table.Rows[a]["DiscountStripAmount"] = (Convert.ToDecimal(rows3[0]["DiscountAmount"].ToString() == "" ? "0" : rows3[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"])) / Convert.ToDecimal(table.Rows[a]["NoofStrips"]);


                    }

                }




                //                DataTable table = new DataTable();
                //                table = DBHandler.GetDataCache(string.Format(@"
                //                SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
                // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
                //, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
                //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
                //,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
                //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
                //, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
                //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , ((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, 
                //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
                //, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
                //,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
                // ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
                //FROM `products` p 
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`slug` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
                //                 ", ProductSlug, OutletID), "GetProductDetailBySlug-" + ProductSlug + "-" + OutletID);




                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                try
                                {
                                    if (Convert.ToInt32(table.Rows[0]["NoofStrips"]) > 1)
                                    {
                                        JSONString.Append(",\"Variation\": [");
                                        JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[0]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                        JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[0]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                        JSONString.Append("]");
                                    }
                                    else
                                    {
                                        JSONString.Append(",\"Variation\": []");
                                    }
                                }
                                catch (Exception ee)
                                { }

                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }


        public void GetProductDetailBySlug()
        {
            try
            {
                string OutletID = "0";
                string ProductSlug = "";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["ProductSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductSlug"]))
                    {
                        ProductSlug = Request.QueryString["ProductSlug"].ToString();
                    }
                }



                //                DataTable table = DBHandler.GetData(string.Format(@"
                //                SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title  
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice
                //, 0 AS SalePercent, p.`Description`, pv.title AS  Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand, FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder , IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`ID` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
                //                 ", ProductID, OutletID));

                DataTable table = new DataTable();

                //DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                //if (dtPrimaryBranch.Rows.Count > 0)
                //{
                //    if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                //    {

                        table = DBHandler.GetDataCache(string.Format(@"
                SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , ((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.`slug` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
                 ", ProductSlug, OutletID), "GetProductDetailBySlug-" + ProductSlug + "-" + OutletID);


                if (table.Rows.Count == 0)
                {
//                    table = DBHandler.GetDataCache(string.Format(@"
//                SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
// , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
//, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
//,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
//,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
//,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
//, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
//, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , ((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount,
//IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
//,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
// ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
//FROM `products` p 
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.`slug` = '{0}'   and p.isactive = 1 and p.purchase like '%Loc%'
//                 ", ProductSlug, OutletID), "GetProductDetailBySlug-" + ProductSlug + "-" + OutletID);
                }



                //                    }
                //                    else
                //                    {
                //                        table = DBHandler.GetData(string.Format(@"
                //             SELECT ID, ID as ProductID , Slug ,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,CategoryID,Brand,BrandID,SUM(AvailableQty) AS AvailableQty,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired,`UPC`, MetaTitle, MetaDescription
                //FROM
                //(   SELECT p.`ID` , p.`ID` as ProductID, p.Slug, TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
                // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
                //, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category 
                //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
                //,p.`Vendor` AS Brand
                //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
                //, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
                //, p.MetaTitle, p.MetaDescription
                //FROM `products` p 
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`slug` = '{0}'  AND ps.store_no = '{1}' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'

                //UNION

                //   SELECT p.`ID` , p.`ID` as ProductID, p.Slug, TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title  
                // , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
                //, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category 
                //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
                //,p.`Vendor` AS Brand
                //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
                //, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
                //, p.MetaTitle, p.MetaDescription
                //FROM `products` p 
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`slug` = '{0}'  AND ps.store_no = '{2}' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
                //) AS a
                //GROUP BY
                //ID, Slug,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,CategoryID,Brand,BrandID,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired,`UPC`, MetaTitle, MetaDescription

                //                 ", ProductSlug, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString()));
                //                    }
                //                }

                //                  if(table.Rows.Count == 0)
                //                  {
                //                      table = DBHandler.GetData(string.Format(@"
                //                               SELECT p.`ID` , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
                // , 0 AS Price , 0   AS SalePrice
                //, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r',''))   AS `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category 
                //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
                //,p.`Vendor` AS Brand
                //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
                //, 0 AS AvailableQty, p.MaxCount AS MaxOrder , 0 AS DiscountPrice, 0 AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
                //FROM `products` p  
                //WHERE p.`ID` = '{0}'  and p.isactive = 1 and p.purchase like '%Loc%'
                //                 ", ProductID, OutletID));
                //                  }

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"","") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                try
                                {
                                    if (Convert.ToInt32(table.Rows[0]["NoofStrips"]) > 1)
                                    {
                                        JSONString.Append(",\"Variation\": [");
                                        JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[0]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxOrder"].ToString() + "\"},");
                                        JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[0]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxStripOrder"].ToString() + "\"}");
                                        JSONString.Append("]");
                                    }
                                    else
                                    {
                                        JSONString.Append(",\"Variation\": []");
                                    }
                                }
                                catch (Exception ee)
                                { }

                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetProductDetailBySlugV1()
        {
            try
            {
                string OutletID = "0";
                string ProductSlug = "";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["ProductSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductSlug"]))
                    {
                        ProductSlug = Request.QueryString["ProductSlug"].ToString();
                    }
                }



                //                DataTable table = DBHandler.GetData(string.Format(@"
                //                SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title  
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)   AS SalePrice
                //, 0 AS SalePercent, p.`Description`, pv.title AS  Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand, FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder , IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.`ID` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
                //                 ", ProductID, OutletID));

                DataTable table = new DataTable();

                //DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                //if (dtPrimaryBranch.Rows.Count > 0)
                //{
                //    if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                //    {

                table = DBHandler.GetDataCache(string.Format(@"
 SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.`slug` = '{0}' AND ps.store_no = '{1}'   and p.isactive = 1 and p.purchase like '%Loc%'

                 ", ProductSlug, OutletID), "GetProductDetailBySlug-" + ProductSlug + "-" + OutletID);


                if (table.Rows.Count == 0)
                {
                    table = DBHandler.GetDataCache(string.Format(@"
                SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, FLOOR((IFNULL(Qty,0) / p.unitpercase1) / p.noofstrips) AS BoxAvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  ,  Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
 ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
,p.Usedfor
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.`slug` = '{0}'   and p.isactive = 1 and p.purchase like '%Loc%'
                 ", ProductSlug, OutletID), "GetProductDetailBySlug-" + ProductSlug + "-" + OutletID);
                }




                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                try
                                {
                                    if (Convert.ToInt32(table.Rows[0]["NoofStrips"]) > 1)
                                    {
                                        JSONString.Append(",\"Variation\": [");
                                        JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[0]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[0]["NoofStrips"].ToString() + "\"},");
                                        JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[0]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                        JSONString.Append("]");
                                    }
                                    else
                                    {
                                        JSONString.Append(",\"Variation\": []");
                                    }
                                }
                                catch (Exception ee)
                                { }




                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        /// <summary>
        /// To get data from productsstockjson instead of productsstock
        /// </summary>
        /// 
        /*This method is for per box per strip */
        public void GetProductDetailBySlugV2()
        {
            try
            {
                string OutletID = "0";
                string ProductSlug = "";
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }
                if (Request.QueryString["ProductSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductSlug"]))
                    {
                        ProductSlug = Request.QueryString["ProductSlug"].ToString();
                    }
                }



                DataTable table1 = DBHandler.GetDataCache(string.Format(@"                SELECT p.`ID`, p.`ID` AS ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
 , 0.00 AS Price , 0.00  AS SalePrice
, 0.00 AS SalePercent,
CASE WHEN p.ProductType != 'Labs' THEN TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description`,''),'\t',''),'\n',''),'\r','')) ELSE  TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description1`,''),'\t',''),'\n',''),'\r','')) END AS `Description` 
, p.variationtitle AS  Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category , '' AS CategorySlug, p.`unitpercase1` , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`Description1`,''),'\t',''),'\n',''),'\r',''))   AS `Description1` , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(p.`HowItWorks`,''),'\t',''),'\n',''),'\r',''))   AS `HowItWorks`
,'0' AS CategoryID
,p.`Vendor` AS Brand, '' AS BrandSlug 
,'' AS BrandID
, 0 AS AvailableQty, p.MaxCount AS MaxOrder , 0.00 AS DiscountPrice, 0.00 AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, 0.00   AS SaleStripPrice  , 0.00 AS StripAvailableQty, 0.00 AS DiscountStripPrice, 0.00 AS DiscountStripAmount, 
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor
FROM `products` p 
-- LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE  p.isactive = 1 AND p.purchase LIKE '%Loc%'
"), "GetProductDetailBySlugV2-");


                DataTable table = new DataTable();


                DataRow[] rows4 = table1.Select("slug = '" + ProductSlug + "'");

                if (rows4.Length > 0)
                {
                    table = rows4.CopyToDataTable();
                }



                DataTable dtcategories_new = DBHandler.GetDataCache("select id, name,slug from categories_new", "categories_new");

                DataTable dtproductcategories = DBHandler.GetDataCache("select CategoryID,productid from productcategories", "productcategories");

                DataTable dtbrands = DBHandler.GetDataCache("select id,Name,slug from brands", "brands");



                DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));
 
                    string json = dtStockJSON.Rows[0]["JSON"].ToString();
                    DataTable dt = (DataTable)JsonConvert.DeserializeObject(json, (typeof(DataTable)));

                    
                    


                    for (int a = 0; a < table.Rows.Count; a++)
                {
                    DataRow[] rows = dtcategories_new.Select("name = '" + table.Rows[a]["Category"].ToString() + "'");

                    if (rows.Length > 0)
                    {
                        table.Rows[a]["CategorySlug"] =  rows[0]["slug"].ToString();
                    }

                    DataRow[] rows1 = dtproductcategories.Select("productid = '" + table.Rows[a]["ProductID"].ToString() + "'");

                    if (rows1.Length > 0)
                    {
                        table.Rows[a]["CategoryID"] = rows1[0]["CategoryID"].ToString();

                        DataRow[] rows5 = dtcategories_new.Select("id = '" + rows1[rows1.Length - 1]["CategoryID"] + "'");

                        if (rows5.Length > 0)
                        {
                            table.Rows[a]["ParentCategory"] = rows5[0]["name"].ToString();
                            table.Rows[a]["ParentCategorySlug"] = rows5[0]["slug"].ToString();
                        }

                    }

                    DataRow[] rows2 = dtbrands.Select("Name = '" + table.Rows[a]["Brand"].ToString() + "'");

                    if (rows2.Length > 0)
                    {
                        table.Rows[a]["BrandSlug"] = rows2[0]["slug"].ToString();
                        table.Rows[a]["BrandID"] = rows2[0]["id"].ToString();
                    }


                    DataRow[] rows3 = dt.Select("ProductID = '" + table.Rows[a]["ProductID"].ToString() + "'");

                    if (rows3.Length > 0)
                    {
                        //Response.Write(table.Rows[a]["ProductID"].ToString() + "<br/>");
                        table.Rows[a]["Price"] = Convert.ToDecimal(rows3[0]["Price"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);
                        table.Rows[a]["SalePrice"] = Convert.ToDecimal(rows3[0]["Price"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);
                        table.Rows[a]["AvailableQty"] = Math.Floor(Convert.ToDecimal(rows3[0]["Qty"]) / Convert.ToDecimal(table.Rows[a]["unitpercase1"]));
                        table.Rows[a]["DiscountPrice"] = Convert.ToDecimal(rows3[0]["DiscountPrice"].ToString() == "" ? "0" : rows3[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);
                        table.Rows[a]["DiscountAmount"] = Convert.ToDecimal(rows3[0]["DiscountAmount"].ToString() == "" ? "0" : rows3[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"]);
                        
                        table.Rows[a]["SaleStripPrice"] = (Convert.ToDecimal(rows3[0]["Price"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"])) / Convert.ToDecimal(table.Rows[a]["NoofStrips"]);
                        table.Rows[a]["StripAvailableQty"] = Math.Floor((Convert.ToDecimal(rows3[0]["Qty"]) / Convert.ToDecimal(table.Rows[a]["unitpercase1"])) * Convert.ToDecimal(table.Rows[a]["NoofStrips"]));
                        table.Rows[a]["DiscountStripPrice"] = (Convert.ToDecimal(rows3[0]["DiscountPrice"].ToString() == "" ? "0" : rows3[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"])) / Convert.ToDecimal(table.Rows[a]["NoofStrips"]);
                        table.Rows[a]["DiscountStripAmount"] = (Convert.ToDecimal(rows3[0]["DiscountAmount"].ToString() == "" ? "0" : rows3[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a]["unitpercase1"])) / Convert.ToDecimal(table.Rows[a]["NoofStrips"]);
                    
                    
                    }

                }




//                DataTable table = new DataTable();
//                table = DBHandler.GetDataCache(string.Format(@"
//                SELECT p.`ID`, p.`ID` as ProductID, p.Slug , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  AS Title  
// , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)   AS SalePrice
//, 0 AS SalePercent, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , p.variationtitle AS  Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category , IFNULL((SELECT slug FROM categories_new WHERE categories_new.name  = p.`ProductType`),'')AS CategorySlug
//,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
//,p.`Vendor` AS Brand, IFNULL((SELECT slug FROM brands WHERE brands.`Name` =p.`Vendor`  LIMIT 1),'')AS BrandSlug 
//,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name ORDER BY id DESC LIMIT 1),'0') AS BrandID
//, FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired, p.`ShopifyProductID` AS `UPC`
//, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice  , ((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, 
//IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//, p.unitpercase1 as TotalTablets,  ifnull(p.unitpercase1 / p.noofstrips,0) as TotalStripTablets
//,IFNULL((SELECT `name` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategory
// ,IFNULL((SELECT `slug` FROM categories_new WHERE id = (SELECT categoryid FROM `productcategories` WHERE productid = p.id ORDER BY categoryid DESC LIMIT 1) LIMIT 1),'') AS ParentCategorySlug
//FROM `products` p 
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.`slug` = '{0}'  AND ps.store_no = '{1}' and p.isactive = 1 and p.purchase like '%Loc%'
//                 ", ProductSlug, OutletID), "GetProductDetailBySlug-" + ProductSlug + "-" + OutletID);

 

                 
                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                try
                                {
                                    if (Convert.ToInt32(table.Rows[0]["NoofStrips"]) > 1)
                                    {
                                        JSONString.Append(",\"Variation\": [");
                                        JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[0]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                        JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[0]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[0]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[0]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[0]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[0]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[0]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                        JSONString.Append("]");
                                    }
                                    else
                                    {
                                        JSONString.Append(",\"Variation\": []");
                                    }
                                }
                                catch (Exception ee)
                                { }

                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        static bool CustomCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            return true;
        }


        /// <summary>
        /// To get data from Elastic Search instead of products
        /// </summary>
        public async Task GetProductDetailBySlugElasticSearchAsync()
        {
            try
            {
                var settings = new ConnectionSettings(new Uri("https://13.214.36.195:9200"))
                        .CertificateFingerprint("A5:8B:07:2D:A9:E8:53:CE:GB:C0:15:CE:6E:DF:9C:65:89:A3:AC:D2:94:2C:46:BD:85:23:20:6B:F2:69:B3:88")
                        //.ServerCertificateValidationCallback(CustomCertificateValidationCallback)
                        .BasicAuthentication("elastic", "elasticsearch_123")
                        .DefaultIndex("products")
                        .EnableDebugMode();
                Console.WriteLine("Elasticsearch client connected.");
                var client = new ElasticClient(settings);
                // Prepare and execute the query
                var searchResponse = client.Search<object>(s => s
                    .Index("products")
                    .Query(q => q
                        .Match(m => m
                            .Field("id")
                            .Query("8493")
                        )
                    )
                );
                // Process the search response
                Console.WriteLine($"Result: {searchResponse}");
                if (searchResponse.ApiCall?.ResponseBodyInBytes != null)
                {
                    var rawJson = System.Text.Encoding.UTF8.GetString(searchResponse.ApiCall.ResponseBodyInBytes);
                    Console.WriteLine(rawJson);
                }
                else
                {
                    Console.WriteLine("No response body or error occurred.");
                }
            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetProductDescriptionByID()
        {
            try
            {
                string ProductID = "0";
                 
                if (Request.QueryString["ProductID"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductID"]))
                    {
                        ProductID = Request.QueryString["ProductID"].ToString();
                    }
                }

                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT p.`ID` , lower(REPLACE(p.`Title`, '\'','')) AS Title , pv.Price, pv.Price AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                //WHERE p.`ID` = '{0}' 
                //", ProductID));

                DataTable table = DBHandler.GetData(string.Format(@"
select `How it works`,pd.Description,Generics,`used for`,`Requires Prescription (YES/NO)`,Indication,`Side Effects`,`When not to Use`,Dosage,`Storage yes or /no`,Precautions,`Warning 1`,`Warning 2`,`Warning 3`,`Pregnancy category`,`Drug Interactions` FROM `products` p 
LEFT JOIN productdescription pd ON pd.upc = p.`ShopifyProductID`
WHERE p.`ID` = '{0}'  
                ", ProductID));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    { 

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetProductDescriptionBySlug()
        {
            try
            {
                string ProductSlug = "";

                if (Request.QueryString["ProductSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductSlug"]))
                    {
                        ProductSlug = Request.QueryString["ProductSlug"].ToString();
                    }
                }

                //                DataTable table = DBHandler.GetData(string.Format(@"
                //SELECT p.`ID` , lower(REPLACE(p.`Title`, '\'','')) AS Title , pv.Price, pv.Price AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                //ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                //WHERE p.`ID` = '{0}' 
                //", ProductID));

                DataTable table = DBHandler.GetData(string.Format(@"
select `How it works`,pd.Description,Generics,`used for`,`Requires Prescription (YES/NO)`,Indication,`Side Effects`,`When not to Use`,Dosage,`Storage yes or /no`,Precautions,`Warning 1`,`Warning 2`,`Warning 3`,`Pregnancy category`,`Drug Interactions` FROM `products` p 
LEFT JOIN productdescription pd ON pd.upc = p.`ShopifyProductID`
WHERE p.`slug` = '{0}'  
                ", ProductSlug));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetProductDescriptionBySlugV1()
        {
            try
            {
                string ProductSlug = "";

                if (Request.QueryString["ProductSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductSlug"]))
                    {
                        ProductSlug = Request.QueryString["ProductSlug"].ToString();
                    }
                }
                                 
                DataTable table = DBHandler.GetData(string.Format(@"
select `How it works`,pd.Description,Generics,`used for`,`Requires Prescription (YES/NO)`,Indication,`Side Effects`,`When not to Use`,Dosage,`Storage yes or /no`,Precautions,`Warning 1`,`Warning 2`,`Warning 3`,`Pregnancy category`,`Drug Interactions` FROM `products` p 
LEFT JOIN productdescription pd ON pd.upc = p.`ShopifyProductID`
WHERE p.`slug` = '{0}'  
                ", ProductSlug));

                if (table.Rows.Count > 0)
                {
                    ProductDescriptionRoot objProductDescriptionRoot = new ProductDescriptionRoot();
                    objProductDescriptionRoot.ResponseType = 1;

                    List<Datum> objlstDatum = new List<Datum>();

                    Datum objDatum = new Datum();
                    Specification objSpecification = new Specification();

                    objSpecification.Generics = table.Rows[0]["Generics"].ToString();
                    objSpecification.Howitworks = table.Rows[0]["How it works"].ToString();
                    objSpecification.RequiresPrescriptionYESNO = table.Rows[0]["Requires Prescription (YES/NO)"].ToString();
                    objSpecification.usedfor = table.Rows[0]["used for"].ToString();

                    objDatum.Specification = objSpecification;

                    UsageAndSafety objUsageandSafety = new UsageAndSafety();

                    objUsageandSafety.Dosage = table.Rows[0]["Generics"].ToString();
                    objUsageandSafety.DrugInteractions = table.Rows[0]["Drug Interactions"].ToString();
                    objUsageandSafety.Indication = table.Rows[0]["Indication"].ToString();
                    objUsageandSafety.SideEffects = table.Rows[0]["Side Effects"].ToString();
                    objUsageandSafety.WhennottoUse = table.Rows[0]["When not to Use"].ToString();

                    objDatum.UsageandSafety = objUsageandSafety;


                    Precautions objPrecautions = new Precautions();

                    objPrecautions.Precaution = table.Rows[0]["Precautions"].ToString();

                    objDatum.Precautions = objPrecautions;

                    Warnings objWarnings = new Warnings();

                    objWarnings.Warning1 = table.Rows[0]["Warning 1"].ToString();
                    objWarnings.Warning2 = table.Rows[0]["Warning 2"].ToString();
                    objWarnings.Warning3 = table.Rows[0]["Warning 3"].ToString();

                    objDatum.Warnings = objWarnings;


                    AdditionalInformation objAdditionalInformation = new AdditionalInformation();

                    objAdditionalInformation.Pregnancycategory = table.Rows[0]["Pregnancy category"].ToString();
                    objAdditionalInformation.Storageyesorno = table.Rows[0]["Storage yes or /no"].ToString();


                    objDatum.AdditionalInformation = objAdditionalInformation;




                    objlstDatum.Add(objDatum);


                    objProductDescriptionRoot.Data = objlstDatum;
                    

                    string strJSON = JsonConvert.SerializeObject(objProductDescriptionRoot, Formatting.Indented);

                    // Response.Write(strJSON.Replace("\r\n", ""));


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(strJSON);
                }

            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void ProcessOrder(string json)
        {
            try
            {
                if (Request["Phone"] != null)
                {
                    string URL = "";
                    Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into appjson(JSON,Phone,created) values('{0}',{1},'{2}')", json, Request["Phone"].ToString(), DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                    OrderRoot f = JsonConvert.DeserializeObject<OrderRoot>(json);

                    if (f.fullname != "" && f.phone != "")
                    {
                        if (f.customeraddress != null)
                        {
                            if (f.customeraddress == "" || f.customeraddress == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Please enter address.\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }
                        if (f.Area != null)
                        {
                            if (f.Area == "" || f.Area == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"This outlet is closed at the moment\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }
                        if (f.orderdata == null)
                        {
                            string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Order data cannot be null\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                            return;

                        }

                        if (f.ordertype != null)
                        {
                            if (f.ordertype == "" || f.ordertype == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Order type cannot be null\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }

                        if (f.Outlet != null)
                        {
                            if (f.Outlet == "" || f.Outlet == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Outlet cannot be null\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }
                        //if (f.Token != null)
                        //{
                        //    if (f.Token == "" || f.Token == "null")
                        //    {
                        //        string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Payment is declined by Bank\",	\"URL\": \"" + URL + "\"}";

                        //        Response.Clear();
                        //        Response.ContentType = "application/json; charset=utf-8";
                        //        Response.Write(Message);
                        //        return;
                        //    }
                        //}

                        string customerPhone = ValidationManager.validateMobileNumber(Request["Phone"]);// ValidationManager. validateMobileNumber()

                        Int64 n;
                        bool isNumeric = Int64.TryParse(customerPhone, out n);

                        if (isNumeric == false)
                        {
                            string Message = "{\"responseType\":  0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Invalid Number\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                            return;
                        }



                        string strIsPreOrder = "";

                        string customerName = Process.TextCase(f.fullname);
                        string OrderType = f.ordertype;
                        string DeliveryArea = "";
                        if (f.Area != null)
                        {
                            DeliveryArea = f.Area.Replace("'", "''");
                        }

                        string DeliveryFee = f.deliverycharges != "" ? f.deliverycharges : "0";
                        string DeliveryAddress = "";

                        if (f.customeraddress != null)
                        {
                            DeliveryAddress = f.customeraddress.Replace("'", "").Replace("\"", "") + " " + f.cityname.Replace("'", "").Replace("\"", "");
                        }
                        string Location = f.cityname.Replace("'","");
                        string OrderAmount = f.totalamount;
                        string Notes = "";
                        string CityName = f.cityname;
                        string PaymentType = f.paymenttype;
                        string Platform = f.platform;
                        DataTable dtoutletinfo = new DataTable();
                        string DeliveryTime = "60 Minutes";

                        bool IsPrescriptionRequired = false;

                        if (f.IsPrescriptionRequired != null)
                        {
                            IsPrescriptionRequired = f.IsPrescriptionRequired;
                        }

                        //dtoutletinfo = DBHandler.GetData("select *, '' AS IsOpen from outlets where delivery_localities like '%" + DeliveryArea + "%'  AND city = '" + CityName + "'  and is_delivers=1 AND outletstatus = 'In Business'");
                        dtoutletinfo = DBHandler.GetData(string.Format("select * from branch where id = '{0}'",f.BranchCode));

                        if (dtoutletinfo.Rows.Count == 0)
                        {
                            string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"This outlet is closed at the moment. Please try later\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                            return;
                        }
                        string MyOrderType = OrderType == "Pickup" ? "Pick Up" : OrderType;

                        if (MyOrderType == "Pick Up")
                        {
                            if (f.Outlet != null)
                            {
                                DeliveryArea = f.Outlet;
                            }
                            //dtoutletinfo = DBHandler.GetData("select *, '' AS IsOpen from outlets where name  = '" + DeliveryArea + "'");

                            DeliveryTime = "20";
                            DeliveryAddress = "Take Away Order";
                        }
                        else
                        {
                            //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_time"].ToString()))
                            //{
                            //    DeliveryTime = dtoutletinfo.Rows[0]["delivery_time"].ToString();
                            //}
                        }

                        string OutletID = dtoutletinfo.Rows[0]["id"].ToString();
                        DeliveryTime = dtoutletinfo.Rows[0]["DeliveryMins"].ToString();
                        string store_no = dtoutletinfo.Rows[0]["BranchCode"].ToString();
                        string OrderPlatformID = "3";
                        if (f.platform.ToLower() == "ios")
                        {
                            OrderPlatformID = "4";
                        }
                        if (f.platform.ToLower() == "web")
                        {
                            OrderPlatformID = "1";
                        }

                        string strDSPID = "0";
                        //strDSPID = dtoutletinfo.Rows[0]["DSPID"].ToString();
                        string strDeliveryCommissionPercentage = "0";
                        //strDeliveryCommissionPercentage = dtoutletinfo.Rows[0]["Delivery_Commision"].ToString();
                        string OutletName = dtoutletinfo.Rows[0]["title"].ToString();
                        string DeliveryTax = f.taxamount, MinimumOrder = "0", Discount = "0";
                        string strCurrentStatus = "";
                        int DSPCommissionPercentage = 0;
                        int DSPFee = 0;
                        decimal DSPCommissionAmount = 0;
                        string PreOrderDeliveryTime = "ASAP";
                        string PaymentType1 = PaymentType;
                        string contactSource = Utilities.CheckReferrer();
                        string Referrer = "";
                        string ConvenienceFeePercentage = "0";
                        string ConvenienceFee = "0";
                        string CreditCardDiscountPercentage = "0";
                        string CreditCardDiscountAmount = "0";
                        string ResponseIPAddress = "";
                        string PrescriptionURL = f.PrescriptionURL;
                        string Remarks = f.Remarks.Replace("'","");
                        string Latitude = f.lat;
                        string Longitude = f.lng;
                        //string VoucherID = "0";
                        //string VoucherCode = f.VoucherCode;
                        //Int64 VoucherAmount = f.VoucherAmount;

                        //if (VoucherCode != "")
                        //{
                        //    DataTable dtVoucher = DBHandler.GetData(string.Format("SELECT *, '' as ApplicableCategoriesName FROM discountvouchers WHERE CustomerVoucherCode  = '{0}' and isactive = 1", VoucherCode));

                        //    if (dtVoucher.Rows.Count > 0)
                        //    {
                        //        VoucherID = dtVoucher.Rows[0]["ID"].ToString();
                        //    }
                        //}

                        if (Referrer != "")
                        {
                            contactSource = Referrer;
                        }

                        //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_tax"].ToString()))
                        //{
                        //    DeliveryTax = dtoutletinfo.Rows[0]["delivery_tax"].ToString();
                        //}
                        //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_minimum"].ToString()))
                        //{
                        //    MinimumOrder = dtoutletinfo.Rows[0]["delivery_minimum"].ToString();
                        //}
                        //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_discount"].ToString()))
                        //{
                        //    Discount = dtoutletinfo.Rows[0]["delivery_discount"].ToString();
                        //}

                        string strArea = string.Format("select * from outletdeliveryareas where OutletID = '{0}' and area = '{1}'", OutletID, DeliveryArea);
                        DataTable dtArea = DBHandler.GetData(strArea);
                        
                        //if it has then replace with original MO/DF
                        if (dtArea.Rows.Count > 0)
                        {
                            DeliveryTime = dtArea.Rows[0]["DeliveryTime"].ToString();

                            MinimumOrder = dtArea.Rows[0]["MinimumOrder"].ToString();
                        }
                        int Delivery = Int32.Parse(DeliveryFee);
                        string BranchCode = f.BranchCode;
                        
                        //DataTable dtBranch= DBHandler.GetData(string.Format("select * from branch where BranchCode = '{0}'", f.BranchCode));
                        //if(dtBranch.Rows.Count > 0)
                        //{
                        //    BranchCode = dtBranch.Rows[0]["ID"].ToString();
                        //}
                        string[] strArr = Process.customer(customerName, customerPhone);
                        Int64 customerID = Convert.ToInt64(strArr[0]);
                        string strCustVerified = strArr[1];

                        strCurrentStatus = "Pending" + strCustVerified;

                        if (PaymentType.ToLower() == "creditcard")
                        {
                            PaymentType1 = "Payment Pending";
                            strCurrentStatus = strCurrentStatus + "- Card Required";
                        }



                        
                        string strOriginalStatus = "";
                        int ItemCount = 0;

                        if (f.orderdata.Count > 0)
                        {
                            ItemCount = f.orderdata.Count;                        
                        }


                        //long NewOrder = DBHandler.InsertDataWithIDForOrder(String.Format("insert into orders(customerID,DeliveryAddress,DeliveryFee,OrderAmount,OutletID,Status,Source,Channel,OrderType,UserArea,Remarks,customerName,customerMobile,City, Discount, DeliveryTime, DeliveryTax, MinimumOrder, OriginalStatus, DSPID, DeliveryCommissionPercentage, DSPCommissionPercentage, DSPFee, DSPCommissionAmount, contactSource, SessionID, PaymentType, ConveniencePercentage, ConvenienceAmount, CreditCardDiscountPercentage, CreditCardDiscountAmount, Created, ModifiedDate, IPAddress,subtotal )" +
                        //                "values('{0}','{1}','{2}','{3}','{4}','{5}','','{31}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}', '{16}', '{17}', '{18}', '{19}', '{20}', '{21}', '{22}', '{23}', '{24}', {25}, {26}, {27}, {28},'{29}','{29}','{30}','{3}')"
                        //                , customerID, DeliveryAddress.Replace("'", "''"), DeliveryFee, OrderAmount, OutletID, strCurrentStatus, MyOrderType, DeliveryArea, Notes, customerName.Replace("'", "''"), customerPhone, CityName, Discount, DeliveryTime, DeliveryTax, MinimumOrder, strOriginalStatus, strDSPID, strDeliveryCommissionPercentage, DSPCommissionPercentage, DSPFee, DSPCommissionAmount, contactSource, HttpContext.Current.Session.SessionID, PaymentType1, ConvenienceFeePercentage, ConvenienceFee, CreditCardDiscountPercentage, CreditCardDiscountAmount, DateTime.Now.AddHours(Convert.ToDouble(System.Configuration.ConfigurationManager.AppSettings["AddHours"])).ToString("yyyy-MM-dd H:mm"), ResponseIPAddress, Platform));

                        long NewOrder = DBHandler.InsertDataWithIDForOrder(String.Format("INSERT  INTO `orders`(`OrderPlatformID`,`ShopifyOrderID`,`app_id`,`browser_ip`,`contact_email`,`CreatedAt`,`Shopify_CreatedAt`,`Shopify_UpdatedAt`,`Currency`,`Subtotal`,`Total`,`Total_Tax`,`Financial_Status`,`Fulfillment_status`,`Gateway`,`OrderNumber`,`Phone`,`ProcessingMethod`,`Source`,`TotalPriceUSD`,`AppliedDiscounts`,`CustomerName`,`ShopifyPayload`,`CustomerID`,`ShippingAddress`,`DeliveryStatus`,`CancelReason`,`Latitude`,`Longitude`,`Remarks`,`CustomerAddressID`,`CreatedBy`,`BranchID`,`Created_at`,`Assigned_at`,`Picked_at`,`Cancelled_at`,`Delivered_at`,`Verified_at`,`AssignedRiderID`,`Accepted_at`,`OrderStatus`,`invc_sid`,`OrderChecked`,PrescriptionURL,Location,DeliveryFees , DeliveryTime, IsPrescriptionRequired, PaymentMethod,ItemCount)" +
                                        "VALUES ('{15}','0','','..','','{0}','','','PKR','{1}','{1}','0.00','Pending',NULL,'{7}','0','{2}','manual','APP','0.00','0','{3}',NULL,'{4}','{5}','Pending',NULL,'{8}','{9}','{10}','','','{13}','{0}','{0}','{0}','{0}','{0}','{0}',NULL,'{0}','Pending',NULL,0,'{6}','{11}','{12}','{14}',{16},'{7}','{17}')"
                                        , DateTime.Now.ToString("yyyy-MM-dd H:mm"), OrderAmount, customerPhone, customerName.Replace("'", "''"), customerID, DeliveryAddress, PrescriptionURL, PaymentType1, Latitude, Longitude, Remarks, Location, DeliveryFee, BranchCode, DeliveryTime, OrderPlatformID, IsPrescriptionRequired, ItemCount));


                        try
                        {
                            int a1122 = DBHandler.InsertDataWithID(string.Format("update appjson set OrderID = '{0}' where id = '{1}'", NewOrder, JSONID));

                            a1122 = DBHandler.InsertDataWithID(string.Format("UPDATE customer SET ordercount = ordercount + 1 WHERE id = '{0}'", customerID));


                        }
                        catch (Exception exxxx111)
                        { }

                        string RPVoucher = "";

                        if (f.orderdata.Count > 0)
                        {
                            for (int a = 0; a < f.orderdata.Count; a++)
                            {
                                string SizeID = "0";
                                string SizeName = "";
                                string OriginalPrice = "0";
                                string UPC = "";
                                string VariantID = "";
                                string VariantTitle = "";

                                if (f.orderdata[a].SizeID != null)
                                {
                                    if (f.orderdata[a].SizeID != "")
                                    {
                                        SizeID = f.orderdata[a].SizeID;
                                    }
                                }

                                DataTable dtItemSize = DBHandler.GetData(string.Format("SELECT p.shopifyproductid, pv.id AS VariantID, pv.title AS VariantTitle FROM products p INNER JOIN `productvariation` pv ON p.id = pv.productid WHERE p.id = '{0}'", f.orderdata[a].ItemID));

                                //if (SizeID != "0")
                                //{
                                //    dtItemSize = DBHandler.GetData(string.Format("Select * from menusizes where menuitemid = '{0}' and price = '{1}' and id = '{2}'", f.orderdata[a].ItemID, f.orderdata[a].Price, SizeID));
                                //}

                                if (dtItemSize.Rows.Count > 0)
                                {
                                    //SizeID = dtItemSize.Rows[0]["ID"].ToString();
                                    //SizeName = dtItemSize.Rows[0]["Size"].ToString();
                                    //OriginalPrice = dtItemSize.Rows[0]["OriginalPrice"].ToString();

                                    UPC = dtItemSize.Rows[0]["shopifyproductid"].ToString();
                                    VariantID = dtItemSize.Rows[0]["VariantID"].ToString();
                                    VariantTitle = dtItemSize.Rows[0]["VariantTitle"].ToString();
                                }

                                DataTable dtDiscountItem = DBHandler.GetData(string.Format("SELECT * FROM discountItems  WHERE upc = '{0}' and isactive = 1", UPC));

                                if (dtDiscountItem.Rows.Count > 0)
                                {
                                    if (!RPVoucher.Contains(dtDiscountItem.Rows[0]["RPVoucher"].ToString()))
                                    {
                                        RPVoucher += dtDiscountItem.Rows[0]["RPVoucher"].ToString() +  ",";
                                    }
                                }


                                //int Neworderdetail = DBHandler.InsertDataWithIDForOrder(String.Format(@"INSERT INTO orderdetail(`OrderID`,`ItemID`,`Quantity`,`Detail`,`SizeID`,`Price`,`Size`, `ItemName`, `Category`, `OriginalPrice`)  values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')",
                                //    NewOrder, f.orderdata[a].ItemID, f.orderdata[a].Quantity, f.orderdata[a].ProductDescription, SizeID, f.orderdata[a].Price, SizeName, f.orderdata[a].ProductName, f.orderdata[a].CategoryName, OriginalPrice));

                                int Neworderdetail = DBHandler.InsertDataWithIDForOrder(String.Format(@"INSERT  INTO `orderdetail`(`OrderID`,`ShopifyProductID`,`SKU`,`ShopifyProductTitle`,`ShopifyVariantID`,`ShopifyVariantTitle`,`ProductID`,`ProductTitle`,`VariantID`,`VariantTitle`,`Price`,`Discount`,`Quantity`,`Vendor`,`Grams`,TotalPrice) 
                                                                        VALUES ('{0}','{5}','{5}','{2}','0','','{1}','{2}','{6}','{7}','{3}','0.00','{4}','','0.00','{8}')",
                                    NewOrder, f.orderdata[a].ItemID, f.orderdata[a].ProductName, f.orderdata[a].Price, f.orderdata[a].Quantity, UPC, VariantID, VariantTitle, (Convert.ToDecimal(f.orderdata[a].Price) * Convert.ToDecimal(f.orderdata[a].Quantity)).ToString()));


                              

                                try
                                {
                                    DataTable dtCheckStock = DBHandler.GetData(string.Format(@"select FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty from products p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` where  ps.store_no = '{0}' and p.id = '{1}'", store_no, f.orderdata[a].ItemID));

                                    if (dtCheckStock.Rows.Count == 0)
                                    {
                                        Int64 a12 = DBHandler.InsertDataWithID(string.Format("update orders set `IsQtyUnavailable` = 1 where id = '{0}'", NewOrder));

                                        Int64 a13 = DBHandler.InsertDataWithID(string.Format("insert into itemunavailablelogs (OrderID, CreatedAt, BranchID, SKU, Source)values('{0}','{1}','{2}','{3}', 'App')",
                                                    NewOrder, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), f.BranchCode, UPC));


                                    }  
                                    else
                                    {
                                        if (Convert.ToInt32(dtCheckStock.Rows[0]["AvailableQty"]) == 0)
                                        {
                                            Int64 a12 = DBHandler.InsertDataWithID(string.Format("update orders set `IsQtyUnavailable` = 1 where id = '{0}'", NewOrder));

                                            Int64 a13 = DBHandler.InsertDataWithID(string.Format("insert into itemunavailablelogs (OrderID, CreatedAt, BranchID, SKU, Source)values('{0}','{1}','{2}','{3}', 'App')",
                                                        NewOrder, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), f.BranchCode, UPC));
                                        }
                                    }
                                }
                                catch(Exception ex1)
                                {}

                            }
                        }

                        if (RPVoucher != "")
                        {
                            Remarks = Remarks + " " + RPVoucher.TrimEnd(',');
                            Int64 a12 = DBHandler.InsertDataWithID(string.Format("update orders set Remarks = '{0}' where id = '{1}'", Remarks, NewOrder));

                        }

                        if (NewOrder > 0)
                        {
                            if (f.paymenttype.ToString().ToLower() == "creditcard")
                            {
                                //string URL1 = "https://acquiring.meezanbank.com/payment/rest/register.do?userName=Jewar_nova&password=Jewar@1234&orderNumber=" + NewOrder + "&amount=" + Convert.ToInt32(Convert.ToDecimal(OrderAmount) * 100) + "&currency=586&returnUrl=https://apidb.Jewar.pk/ThankYou.aspx?OrderID=" + NewOrder;

                                string URL1 = "https://acquiring.meezanbank.com/payment/rest/register.do?userName=Jewar_nova&password=Jewar@1234&orderNumber=" + NewOrder + "&amount=" + Convert.ToInt32(Convert.ToDecimal(OrderAmount) * 100) + "&currency=586&returnUrl=https://apidb.Jewar.pk/ThankYou.aspx?OrderID=" + NewOrder + "&clientId=" + customerID;


                                if (f.Token != null)
                                {
                                    if (f.Token != "")
                                    {
                                        URL1 = "https://acquiring.meezanbank.com/payment/rest/register.do?userName=Jewar_nova&password=Jewar@1234&orderNumber=" + NewOrder + "&amount=" + Convert.ToInt32(Convert.ToDecimal(OrderAmount) * 100) + "&currency=586&returnUrl=https://apidb.Jewar.pk/ThankYou.aspx?OrderID=" + NewOrder + "&clientId=" + customerID + "&bindingId=" + f.Token;
                                    }
                                }

                                ServicePointManager.Expect100Continue = true;
                                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                       | SecurityProtocolType.Tls11
                                       | SecurityProtocolType.Ssl3
                                       | SecurityProtocolType.Tls12;



                                ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
                                WebRequest wr = WebRequest.Create(URL1);
                                //wr.Timeout = 3500;

                                try
                                {
                                    HttpWebResponse response = (HttpWebResponse)wr.GetResponse();
                                    var encoding = ASCIIEncoding.ASCII;
                                    using (var reader = new System.IO.StreamReader(response.GetResponseStream(), encoding))
                                    {
                                        string responseText = reader.ReadToEnd();
                                        JObject json1 = JObject.Parse(responseText);
                                        //var jsonData = json1["data"];


                                        string formUrl = json1["formUrl"].ToString();

                                        URL = formUrl;


                                        try
                                        {
                                            string MeezanOrderID = json1["orderId"].ToString();


                                            int a12 = DBHandler.InsertDataWithID(string.Format("update orders set ShopifyTransactionID = '{0}' where id = '{1}'", MeezanOrderID, NewOrder));


                                            try
                                            {
                                                DataTable dtCreditCard = DBHandler.GetData(string.Format("select cardnumber from creditcard where customerid = '{0}' order by id desc limit 1", customerID));

                                                if (dtCreditCard.Rows.Count > 0)
                                                {
                                                    //string CreditCardNumber = Remarks + " " + dtCreditCard.Rows[0]["cardnumber"].ToString().Split('*')[0];
                                                    string CreditCardNumber = Remarks + " " + dtCreditCard.Rows[0]["cardnumber"].ToString();
                                                    a12 = DBHandler.InsertDataWithID(string.Format("update orders set Remarks = '{0}' where id = '{1}'", CreditCardNumber, NewOrder));

                                                }
                                            }
                                            catch (Exception ee1)
                                            { }
                                        }
                                        catch (Exception eeee)
                                        { }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    //We know its going to fail but that dosent matter!!
                                    Response.Write(ex.Message);
                                }
                            }

                            int a11 = DBHandler.InsertDataWithID(string.Format("update appjson set OrderID = '{0}' where id = '{1}'", NewOrder, JSONID));

                            DBHandler.InsertDataForOrder("insert into log(object_id,object_type, Channel, logType,date) values('" + NewOrder + "','New Order " + strCurrentStatus + "','" + Platform + "', 'Order', '" + DateTime.Now.AddHours(Convert.ToDouble(System.Configuration.ConfigurationManager.AppSettings["AddHours"])).ToString("yyyy-MM-dd H:mm") + "')");

                            string Message = "{\"responseType\": 1, \"OrderID\": \"" + NewOrder + "\", \"DeliveryTime\": \"" + DeliveryTime.Replace(" Minutes","") + "\", \"OrderAmount\": \"" + OrderAmount + "\", \"message\": \"Order Added Successfully\",	\"URL\": \"" + URL + "\"}";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);


                            ////Calling Auto DSP Assign API of Imran
                            //try
                            //{
                            //    DataTable dtOrder1 = DBHandler.GetData(string.Format(@"select * from orders where id = '{0}' ", NewOrder));


                            //    if (dtOrder1.Rows.Count > 0)
                            //    {
                            //        WebRequest wr = WebRequest.Create("https://backend.Jewar.pk/api/WebRequestsAPI/ApplyDeliveryRuleOnOrder?orderid=" + NewOrder );
                            //        //wr.Timeout = 3500;

                            //        try
                            //        {
                            //            HttpWebResponse response = (HttpWebResponse)wr.GetResponse();
                            //        }
                            //        catch (Exception ex)
                            //        {
                            //            //We know its going to fail but that dosent matter!!
                            //            Response.Write(ex.Message);
                            //        }
                            //    }
                            //}
                            //catch (Exception eeee)
                            //{ }
                            ////End Calling Auto DSP Assign API of Imran

                        }
                        else
                        {
                            string Message = "{\"responseType\":  0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Error while saving order\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Please enter name and phone number.\",	\"URL\": \"" + URL + "\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);
            }
        }

        public void ProcessOrderNew(string json)
        {
            try
            {
                if (Request["Phone"] != null)
                {
                    string URL = "";
                    Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into appjson(JSON,Phone,created) values('{0}',{1},'{2}')", json, Request["Phone"].ToString(), DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                    OrderRoot f = JsonConvert.DeserializeObject<OrderRoot>(json);
                    
                    if (f.fullname != "" && f.phone != "")
                    {
                        if (f.customeraddress != null)
                        {
                            if (f.customeraddress == "" || f.customeraddress == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Please enter address.\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }
                        if (f.Area != null)
                        {
                            if (f.Area == "" || f.Area == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"This outlet is closed at the moment\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }
                        if (f.orderdata == null)
                        {
                            string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Order data cannot be null\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                            return;

                        }

                        if (f.ordertype != null)
                        {
                            if (f.ordertype == "" || f.ordertype == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Order type cannot be null\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }

                        if (f.Outlet != null)
                        {
                            if (f.Outlet == "" || f.Outlet == "null")
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Outlet cannot be null\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }
                        //if (f.Token != null)
                        //{
                        //    if (f.Token == "" || f.Token == "null")
                        //    {
                        //        string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Payment is declined by Bank\",	\"URL\": \"" + URL + "\"}";

                        //        Response.Clear();
                        //        Response.ContentType = "application/json; charset=utf-8";
                        //        Response.Write(Message);
                        //        return;
                        //    }
                        //}

                        string customerPhone = ValidationManager.validateMobileNumber(Request["Phone"]);// ValidationManager. validateMobileNumber()

                        Int64 n;
                        bool isNumeric = Int64.TryParse(customerPhone, out n);

                        if (isNumeric == false)
                        {
                            string Message = "{\"responseType\":  0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Invalid Number\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                            return;
                        }



                        string strIsPreOrder = "";

                        string customerName = Process.TextCase(f.fullname);
                        string OrderType = f.ordertype;
                        string DeliveryArea = "";
                        if (f.Area != null)
                        {
                            DeliveryArea = f.Area.Replace("'", "''");
                        }

                        string DeliveryFee = f.deliverycharges != "" ? f.deliverycharges : "0";
                        string DeliveryAddress = "";

                        try
                        {
                            if (DeliveryFee == "0")
                            {
                                if (Convert.ToDecimal(f.totalamount) < 3251)
                                {
                                    DeliveryFee = "140";
                                    f.totalamount = (Convert.ToDecimal(f.totalamount) + Convert.ToDecimal(DeliveryFee)).ToString();
                                }
                            }
                        }
                        catch (Exception ee1)
                        { }

                        if (f.customeraddress != null)
                        {
                            DeliveryAddress = f.customeraddress.Replace("'", "").Replace("\"", ""); // Removed this due to address is getting duplicate + " " + f.cityname.Replace("'", "").Replace("\"", "");
                        }
                        string Location = f.cityname.Replace("'", "");
                        string OrderAmount = f.totalamount;
                        string SubTotal = f.orderamount;
                        string Notes = "";
                        string CityName = f.cityname;
                        string PaymentType = f.paymenttype;
                        string Platform = f.platform;
                        DataTable dtoutletinfo = new DataTable();
                        string DeliveryTime = "60 Minutes";

                        bool IsPrescriptionRequired = false;

                        if (f.IsPrescriptionRequired != null)
                        {
                            IsPrescriptionRequired = f.IsPrescriptionRequired;
                        }

                        //dtoutletinfo = DBHandler.GetData("select *, '' AS IsOpen from outlets where delivery_localities like '%" + DeliveryArea + "%'  AND city = '" + CityName + "'  and is_delivers=1 AND outletstatus = 'In Business'");
                        dtoutletinfo = DBHandler.GetData(string.Format("select * from branch where BranchCode = '{0}'", f.BranchCode));

                        if (dtoutletinfo.Rows.Count == 0)
                        {
                            string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"This outlet is closed at the moment. Please try later\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                            return;
                        }
                        string MyOrderType = OrderType == "Pickup" ? "Pick Up" : OrderType;

                        if (MyOrderType == "Pick Up")
                        {
                            if (f.Outlet != null)
                            {
                                DeliveryArea = f.Outlet;
                            }
                            //dtoutletinfo = DBHandler.GetData("select *, '' AS IsOpen from outlets where name  = '" + DeliveryArea + "'");

                            DeliveryTime = "20";
                            DeliveryAddress = "Take Away Order";
                        }
                        else
                        {
                            //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_time"].ToString()))
                            //{
                            //    DeliveryTime = dtoutletinfo.Rows[0]["delivery_time"].ToString();
                            //}
                        }

                        string OutletID = dtoutletinfo.Rows[0]["id"].ToString();
                        DeliveryTime = dtoutletinfo.Rows[0]["DeliveryMins"].ToString();
                        string store_no = dtoutletinfo.Rows[0]["BranchCode"].ToString();
                        string OrderPlatformID = "3";
                        if (f.platform.ToLower() == "ios")
                        {
                            OrderPlatformID = "4";
                        }
                        if (f.platform.ToLower() == "web")
                        {
                            OrderPlatformID = "1";
                        }

                        string strDSPID = "0";
                        //strDSPID = dtoutletinfo.Rows[0]["DSPID"].ToString();
                        string strDeliveryCommissionPercentage = "0";
                        //strDeliveryCommissionPercentage = dtoutletinfo.Rows[0]["Delivery_Commision"].ToString();
                        string OutletName = dtoutletinfo.Rows[0]["title"].ToString();
                        string DeliveryTax = f.taxamount, MinimumOrder = "0", Discount = "0";
                        string strCurrentStatus = "";
                        int DSPCommissionPercentage = 0;
                        int DSPFee = 0;
                        decimal DSPCommissionAmount = 0;
                        string PreOrderDeliveryTime = "ASAP";
                        string PaymentType1 = PaymentType;
                        string contactSource = Utilities.CheckReferrer();
                        string Referrer = "";
                        string ConvenienceFeePercentage = "0";
                        string ConvenienceFee = "0";
                        string CreditCardDiscountPercentage = "0";
                        string CreditCardDiscountAmount = "0";
                        string ResponseIPAddress = "";
                        string PrescriptionURL = f.PrescriptionURL;
                        string Remarks = f.Remarks.Replace("'", "");
                        string Latitude = f.lat;
                        string Longitude = f.lng;
                        string VoucherID = "0";
                        string VoucherCode = f.VoucherCode;
                        decimal VoucherAmount = f.VoucherAmount;
                        Discount = f.discountamount;
                        string Source = "APP";
                        string PlatformFees = "0";

                        if (f.PlatformFees != null)
                        {
                            PlatformFees = f.PlatformFees;
                        }

                            if (Platform == "web")
                        {
                            Source = f.platform;
                        }

                        string[] strArr = Process.customer(customerName, customerPhone);
                        Int64 customerID = Convert.ToInt64(strArr[0]);
                        bool IsCustomerReviewed = false;

                        if (strArr.Length > 1)
                        {
                            IsCustomerReviewed = Convert.ToBoolean(strArr[2]);

                            if (customerPhone == "03323164569")
                            {
                                IsCustomerReviewed = false;
                            }
                        }

                        string JWTCustomerID = "";
                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, JWTCustomerID); //"Valid"; // 
                            JWTCustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }


                        if (customerID != Convert.ToInt64(JWTCustomerID))
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is invalid\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }


                        string strCustVerified = strArr[1];

                        if (VoucherCode != "")
                        {
                            DataTable dtVoucher = DBHandler.GetData(string.Format("SELECT *, '' as ApplicableCategoriesName FROM discountvouchers WHERE CustomerVoucherCode  = '{0}' and isactive = 1", VoucherCode));

                            if (dtVoucher.Rows.Count > 0)
                            {
                                VoucherID = dtVoucher.Rows[0]["ID"].ToString();

                                if (Convert.ToBoolean(dtVoucher.Rows[0]["IsCustomerVoucherCode"]) == true)
                                {
                                    DataTable dtVoucherCustomer = DBHandler.GetData(string.Format("select * from customerVoucher where voucherid = '{0}' and customerid = '{1}' and isused = 0", VoucherID, customerID));



                                    try
                                    {
                                        if (VoucherCode.ToLower() == "sihacharge" || VoucherCode.ToLower() == "healthxcharge")
                                        {
                                            dtVoucherCustomer = DBHandler.GetData(string.Format("select * from customerVoucher where voucherid = '{0}' and customerid = '{1}' ", VoucherID, customerID));

                                        }
                                    }
                                    catch (Exception ee)
                                    { }


                                    if (dtVoucherCustomer.Rows.Count > 0)
                                    {
                                        int abc = DBHandler.InsertDataWithIDForOrder(string.Format("update customerVoucher set isused = 1 where voucherid = '{0}'  and customerid = '{1}' ", VoucherID, customerID));
                                    }
                                    else
                                    {
                                        string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Voucher is already used\",	\"URL\": \"" + URL + "\"}";

                                        Response.Clear();
                                        Response.ContentType = "application/json; charset=utf-8";
                                        Response.Write(Message);
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"message\": \"Voucher is already used\",	\"URL\": \"" + URL + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                                return;
                            }
                        }

                        if (Referrer != "")
                        {
                            contactSource = Referrer;
                        }

                        //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_tax"].ToString()))
                        //{
                        //    DeliveryTax = dtoutletinfo.Rows[0]["delivery_tax"].ToString();
                        //}
                        //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_minimum"].ToString()))
                        //{
                        //    MinimumOrder = dtoutletinfo.Rows[0]["delivery_minimum"].ToString();
                        //}
                        //if (!string.IsNullOrEmpty(dtoutletinfo.Rows[0]["delivery_discount"].ToString()))
                        //{
                        //    Discount = dtoutletinfo.Rows[0]["delivery_discount"].ToString();
                        //}

                        string strArea = string.Format("select * from outletdeliveryareas where OutletID = '{0}' and area = '{1}'", OutletID, DeliveryArea);
                        DataTable dtArea = DBHandler.GetData(strArea);

                        //if it has then replace with original MO/DF
                        if (dtArea.Rows.Count > 0)
                        {
                            DeliveryTime = dtArea.Rows[0]["DeliveryTime"].ToString();

                            MinimumOrder = dtArea.Rows[0]["MinimumOrder"].ToString();
                        }
                        int Delivery = Int32.Parse(DeliveryFee);
                        string BranchCode = f.BranchCode;

                        DataTable dtBranch = DBHandler.GetData(string.Format("select ID from branch where branchcode = '{0}' AND isactive = 1", BranchCode));

                        if (dtBranch.Rows.Count > 0)
                        {
                            BranchCode = dtBranch.Rows[0]["ID"].ToString();
                        }

                        //DataTable dtBranch= DBHandler.GetData(string.Format("select * from branch where BranchCode = '{0}'", f.BranchCode));
                        //if(dtBranch.Rows.Count > 0)
                        //{
                        //    BranchCode = dtBranch.Rows[0]["ID"].ToString();
                        //}
                       

                        strCurrentStatus = "Pending" + strCustVerified;

                        if (PaymentType.ToLower() == "creditcard")
                        {
                            PaymentType1 = "Payment Pending";
                            strCurrentStatus = strCurrentStatus + "- Card Required";
                        }



                        string strOriginalStatus = "";
                        int ItemCount = 0;

                        if (f.orderdata.Count > 0)
                        {
                            ItemCount = f.orderdata.Count;
                        }

                        //long NewOrder = DBHandler.InsertDataWithIDForOrder(String.Format("insert into orders(customerID,DeliveryAddress,DeliveryFee,OrderAmount,OutletID,Status,Source,Channel,OrderType,UserArea,Remarks,customerName,customerMobile,City, Discount, DeliveryTime, DeliveryTax, MinimumOrder, OriginalStatus, DSPID, DeliveryCommissionPercentage, DSPCommissionPercentage, DSPFee, DSPCommissionAmount, contactSource, SessionID, PaymentType, ConveniencePercentage, ConvenienceAmount, CreditCardDiscountPercentage, CreditCardDiscountAmount, Created, ModifiedDate, IPAddress,subtotal )" +
                        //                "values('{0}','{1}','{2}','{3}','{4}','{5}','','{31}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}', '{16}', '{17}', '{18}', '{19}', '{20}', '{21}', '{22}', '{23}', '{24}', {25}, {26}, {27}, {28},'{29}','{29}','{30}','{3}')"
                        //                , customerID, DeliveryAddress.Replace("'", "''"), DeliveryFee, OrderAmount, OutletID, strCurrentStatus, MyOrderType, DeliveryArea, Notes, customerName.Replace("'", "''"), customerPhone, CityName, Discount, DeliveryTime, DeliveryTax, MinimumOrder, strOriginalStatus, strDSPID, strDeliveryCommissionPercentage, DSPCommissionPercentage, DSPFee, DSPCommissionAmount, contactSource, HttpContext.Current.Session.SessionID, PaymentType1, ConvenienceFeePercentage, ConvenienceFee, CreditCardDiscountPercentage, CreditCardDiscountAmount, DateTime.Now.AddHours(Convert.ToDouble(System.Configuration.ConfigurationManager.AppSettings["AddHours"])).ToString("yyyy-MM-dd H:mm"), ResponseIPAddress, Platform));

                        long NewOrder = DBHandler.InsertDataWithIDForOrder(String.Format("INSERT  INTO `orders`(`OrderPlatformID`,`ShopifyOrderID`,`app_id`,`browser_ip`,`contact_email`,`CreatedAt`,`Shopify_CreatedAt`,`Shopify_UpdatedAt`,`Currency`,`Subtotal`,`Total`,`Total_Tax`,`Financial_Status`,`Fulfillment_status`,`Gateway`,`OrderNumber`,`Phone`,`ProcessingMethod`,`Source`,`TotalPriceUSD`,`AppliedDiscounts`,`CustomerName`,`ShopifyPayload`,`CustomerID`,`ShippingAddress`,`DeliveryStatus`,`CancelReason`,`Latitude`,`Longitude`,`Remarks`,`CustomerAddressID`,`CreatedBy`,`BranchID`,`Created_at`,`Assigned_at`,`Picked_at`,`Cancelled_at`,`Delivered_at`,`Verified_at`,`AssignedRiderID`,`Accepted_at`,`OrderStatus`,`invc_sid`,`OrderChecked`,PrescriptionURL,Location,DeliveryFees , DeliveryTime, IsPrescriptionRequired, PaymentMethod,VoucherID,VoucherCode,VoucherValue,ItemCount, Discount, PlatformFees,ActualTotalAmount)" +
                                        "VALUES ('{15}','0','','..','','{0}','','','PKR','{23}','{1}','0.00','Pending',NULL,'{7}','0','{2}','manual','{21}','0.00','0','{3}',NULL,'{4}','{5}','Pending',NULL,'{8}','{9}','{10}','','','{13}','{0}','{0}','{0}','{0}','{0}','{0}',NULL,'{0}','Pending',NULL,0,'{6}','{11}','{12}','{14}',{16},'{7}','{17}','{18}','{19}','{20}','{22}','{24}','{1}')"
                                        , DateTime.Now.ToString("yyyy-MM-dd H:mm"), OrderAmount, customerPhone, customerName.Replace("'", "''"), customerID, DeliveryAddress, PrescriptionURL, PaymentType1, Latitude, Longitude, Remarks, Location, DeliveryFee, BranchCode, DeliveryTime, OrderPlatformID, IsPrescriptionRequired, VoucherID, VoucherCode, VoucherAmount,ItemCount, Source,Discount, SubTotal, PlatformFees));


                        try
                        {
                            int a1122 = DBHandler.InsertDataWithID(string.Format("update appjson set OrderID = '{0}' where id = '{1}'", NewOrder, JSONID));

                            a1122 = DBHandler.InsertDataWithID(string.Format("UPDATE customer SET ordercount = ordercount + 1 , IsCustomerReviewed = {1} WHERE id = '{0}'", customerID, true));

                            try
                            {
                                if (VoucherCode != "")
                                {
                                    if (VoucherCode.ToLower() == "sihacharge")
                                    {
                                        int a11 = DBHandler.InsertDataWithID(string.Format("update orders set gateway = 'Paid', PaymentMethod= 'Paid' where id = '{0}'", NewOrder));

                                        DBHandler.InsertDataForOrder("insert into log(object_id,object_type, Channel, logType,date) values('" + NewOrder + "','SIHACHARGE: Gateway and PaymentMethod change to Paid','" + Platform + "', 'Order', '" + DateTime.Now.AddHours(Convert.ToDouble(System.Configuration.ConfigurationManager.AppSettings["AddHours"])).ToString("yyyy-MM-dd H:mm") + "')");

                                    }
                                }
                            }
                            catch (Exception exxxx1111)
                            { }
                        }
                        catch (Exception exxxx111)
                        { }

                        string RPVoucher = "";

                        if (f.orderdata.Count > 0)
                        {
                            for (int a = 0; a < f.orderdata.Count; a++)
                            {
                                string SizeID = "0";
                                string SizeName = "";
                                string OriginalPrice = "0";
                                string UPC = "";
                                string VariantID = "";
                                string VariantTitle = "";
                                string VariantTitlefromFrontEnd = "";

                                if (f.orderdata[a].SizeID != null)
                                {
                                    if (f.orderdata[a].SizeID != "")
                                    {
                                        SizeID = f.orderdata[a].SizeID;
                                    }
                                }

                                //DataTable dtItemSize = DBHandler.GetData(string.Format("SELECT p.shopifyproductid, pv.id AS VariantID, pv.title AS VariantTitle FROM products p INNER JOIN `productvariation` pv ON p.id = pv.productid WHERE p.id = '{0}'", f.orderdata[a].ItemID));
                                DataTable dtItemSize = DBHandler.GetData(string.Format("SELECT p.shopifyproductid,   p.`VariationTitle` as VariantTitle, IFNULL((SELECT id FROM productvariation pv WHERE p.id = pv.productid  LIMIT 1),0) AS VariantID FROM products p  WHERE p.id =  '{0}'", f.orderdata[a].ItemID));

                                //if (SizeID != "0")
                                //{
                                //    dtItemSize = DBHandler.GetData(string.Format("Select * from menusizes where menuitemid = '{0}' and price = '{1}' and id = '{2}'", f.orderdata[a].ItemID, f.orderdata[a].Price, SizeID));
                                //}

                                if (dtItemSize.Rows.Count > 0)
                                {
                                    //SizeID = dtItemSize.Rows[0]["ID"].ToString();
                                    //SizeName = dtItemSize.Rows[0]["Size"].ToString();
                                    //OriginalPrice = dtItemSize.Rows[0]["OriginalPrice"].ToString();

                                    UPC = dtItemSize.Rows[0]["shopifyproductid"].ToString();
                                    VariantID = dtItemSize.Rows[0]["VariantID"].ToString();
                                    VariantTitle = dtItemSize.Rows[0]["VariantTitle"].ToString();
                                    VariantTitlefromFrontEnd = dtItemSize.Rows[0]["VariantTitle"].ToString();

                                    try
                                    {
                                        if (f.orderdata[a].Type != null)
                                        {
                                            if (f.orderdata[a].Type != "")
                                            {
                                                VariantTitlefromFrontEnd = f.orderdata[a].Type.ToString();
                                            }
                                        }
                                    }
                                    catch (Exception e1)
                                    { }
                                }

                                DataTable dtDiscountItem = DBHandler.GetData(string.Format("SELECT * FROM discountItems  WHERE upc = '{0}' and isactive = 1", UPC));

                                if (dtDiscountItem.Rows.Count > 0)
                                {
                                    if (!RPVoucher.Contains(dtDiscountItem.Rows[0]["RPVoucher"].ToString()))
                                    {
                                        RPVoucher += dtDiscountItem.Rows[0]["RPVoucher"].ToString() + ",";
                                    }
                                }

                                string DiscountAmount = "0.00";

                                try
                                {
                                    DataTable dtCheckStock = DBHandler.GetData(string.Format(@"select FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, IFNULL(ps.`DiscountAmount` * p.`unitpercase1`, 0) AS DiscountAmount  from products p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` where  ps.store_no = '{0}' and p.id = '{1}'", store_no, f.orderdata[a].ItemID));

                                    if (dtCheckStock.Rows.Count == 0)
                                    {
                                        Int64 a12 = DBHandler.InsertDataWithID(string.Format("update orders set `IsQtyUnavailable` = 1 where id = '{0}'", NewOrder));

                                        Int64 a13 = DBHandler.InsertDataWithID(string.Format("insert into itemunavailablelogs (OrderID, CreatedAt, BranchID, SKU, Source)values('{0}','{1}','{2}','{3}', 'App')",
                                                    NewOrder, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), f.BranchCode, UPC));


                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(dtCheckStock.Rows[0]["AvailableQty"]) == 0)
                                        {
                                            Int64 a12 = DBHandler.InsertDataWithID(string.Format("update orders set `IsQtyUnavailable` = 1 where id = '{0}'", NewOrder));

                                            Int64 a13 = DBHandler.InsertDataWithID(string.Format("insert into itemunavailablelogs (OrderID, CreatedAt, BranchID, SKU, Source)values('{0}','{1}','{2}','{3}', 'App')",
                                                        NewOrder, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), f.BranchCode, UPC));
                                        }
                                        if (f.VoucherCode == "")
                                        {
                                            DiscountAmount = (Convert.ToDecimal(dtCheckStock.Rows[0]["DiscountAmount"]) * Convert.ToDecimal(f.orderdata[a].Quantity)).ToString();

                                            if (f.orderdata[a].DiscountPrice != null)
                                            {
                                                if (f.orderdata[a].DiscountPrice != "")
                                                {
                                                    DiscountAmount = (Convert.ToDecimal(f.orderdata[a].DiscountPrice)).ToString();
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex1)
                                { }

                                int Neworderdetail = DBHandler.InsertDataWithIDForOrder(String.Format(@"INSERT  INTO `orderdetail`(`OrderID`,`ShopifyProductID`,`SKU`,`ShopifyProductTitle`,`ShopifyVariantID`,`ShopifyVariantTitle`,`ProductID`,`ProductTitle`,`VariantID`,`VariantTitle`,`Price`,`Discount`,`Quantity`,`Vendor`,`Grams`,TotalPrice) 
                                                                        VALUES ('{0}','{5}','{5}','{2}','0','{7}','{1}','{2}','{6}','{9}','{3}','{10}','{4}','','0.00','{8}')",
                                    NewOrder, f.orderdata[a].ItemID, f.orderdata[a].ProductName, f.orderdata[a].Price, f.orderdata[a].Quantity, UPC, VariantID, VariantTitlefromFrontEnd, ((Convert.ToDecimal(f.orderdata[a].Price) * Convert.ToDecimal(f.orderdata[a].Quantity)) - Convert.ToDecimal(DiscountAmount)).ToString(),VariantTitlefromFrontEnd, DiscountAmount));


                               


                            }
                        }

                        if (RPVoucher != "")
                        {
                            Remarks = Remarks + " " + RPVoucher.TrimEnd(',');
                            Int64 a12 = DBHandler.InsertDataWithID(string.Format("update orders set Remarks = '{0}' where id = '{1}'", Remarks, NewOrder));

                        }

                        if (NewOrder > 0)
                        {
                            if (f.paymenttype.ToString().ToLower() == "creditcard")
                            {
                                DataTable dtCheckGateway = DBHandler.GetData("select  'UBL'  value from taxonomy where name = 'PaymentGateway'");
                                if (dtCheckGateway.Rows.Count > 0)
                                {
                                    if (dtCheckGateway.Rows[0]["value"].ToString() == "Meezan")
                                    {
                                        //string URL1 = "https://acquiring.meezanbank.com/payment/rest/register.do?userName=Jewar_nova&password=Jewar@1234&orderNumber=" + NewOrder + "&amount=" + Convert.ToInt32(Convert.ToDecimal(OrderAmount) * 100) + "&currency=586&returnUrl=https://apidb.Jewar.pk/ThankYou.aspx?OrderID=" + NewOrder;

                                string URL1 = "https://acquiring.meezanbank.com/payment/rest/register.do?userName=Jewar_nova&password=Jewar@1234&orderNumber=" + NewOrder + "&amount=" + Convert.ToInt32(Convert.ToDecimal(OrderAmount) * 100) + "&currency=586&returnUrl=https://apidb.Jewar.pk/ThankYou.aspx?OrderID=" + NewOrder + "&clientId=" + customerID;


                                if (f.Token != null)
                                {
                                    if (f.Token != "")
                                    {
                                        URL1 = "https://acquiring.meezanbank.com/payment/rest/register.do?userName=Jewar_nova&password=Jewar@1234&orderNumber=" + NewOrder + "&amount=" + Convert.ToInt32(Convert.ToDecimal(OrderAmount) * 100) + "&currency=586&returnUrl=https://apidb.Jewar.pk/ThankYou.aspx?OrderID=" + NewOrder + "&clientId=" + customerID + "&bindingId=" + f.Token;
                                    }
                                }

                                ServicePointManager.Expect100Continue = true;
                                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                       | SecurityProtocolType.Tls11
                                       | SecurityProtocolType.Ssl3
                                       | SecurityProtocolType.Tls12;



                                ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
                                WebRequest wr = WebRequest.Create(URL1);
                                //wr.Timeout = 3500;

                                try
                                {
                                    HttpWebResponse response = (HttpWebResponse)wr.GetResponse();
                                    var encoding = ASCIIEncoding.ASCII;
                                    using (var reader = new System.IO.StreamReader(response.GetResponseStream(), encoding))
                                    {
                                        string responseText = reader.ReadToEnd();
                                        JObject json1 = JObject.Parse(responseText);
                                        //var jsonData = json1["data"];


                                        string formUrl = json1["formUrl"].ToString();

                                        URL = formUrl;


                                        try
                                        {
                                            string MeezanOrderID = json1["orderId"].ToString();


                                            int a12 = DBHandler.InsertDataWithID(string.Format("update orders set ShopifyTransactionID = '{0}' where id = '{1}'", MeezanOrderID, NewOrder));


                                            try
                                            {
                                                DataTable dtCreditCard = DBHandler.GetData(string.Format("select cardnumber from creditcard where customerid = '{0}' order by id desc limit 1", customerID));

                                                if (dtCreditCard.Rows.Count > 0)
                                                {
                                                    //string CreditCardNumber = Remarks + " " + dtCreditCard.Rows[0]["cardnumber"].ToString().Split('*')[0];
                                                    string CreditCardNumber = Remarks + " " + dtCreditCard.Rows[0]["cardnumber"].ToString();
                                                    a12 = DBHandler.InsertDataWithID(string.Format("update orders set Remarks = '{0}' where id = '{1}'", CreditCardNumber, NewOrder));

                                                        }
                                                    }
                                                    catch (Exception ee1)
                                                    { }
                                                }
                                                catch (Exception eeee)
                                                { }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            //We know its going to fail but that dosent matter!!
                                            Response.Write(ex.Message);
                                        }
                                    }
                                    else if (dtCheckGateway.Rows[0]["value"].ToString() == "UBL")
                                    {

                                        string URL1 = "https://demo-ipg.ctdev.comtrust.ae:2443";



                                        UBLRegistration f1 = new UBLRegistration();

                                        f1.Currency = "PKR";
                                        f1.ReturnPath = "http://localhost:3000/ThankyouUBL.aspx?OrderID=" + NewOrder;
                                        f1.TransactionHint = "CPT:Y;VCC:Y;";
                                        f1.OrderID = NewOrder.ToString();
                                        f1.Store = "0000";
                                        f1.Terminal = "0000";
                                        f1.Channel = "";
                                        f1.Amount = OrderAmount;
                                        f1.Customer = "Demo Merchant";
                                        f1.OrderName = customerName;
                                        f1.UserName = "Demo_fY9c";
                                        f1.Password = "Comtrust@20182018";

                                        UBLRoot f2 = new UBLRoot();

                                        List<UBLRegistration> lstUBLRegistration = new List<UBLRegistration>();

                                        lstUBLRegistration.Add(f1);

                                        f2.Registration = lstUBLRegistration;

                                        string strJSON = JsonConvert.SerializeObject(f2, Formatting.Indented);
                                        string Message1 = strJSON;

                                     


                                        ServicePointManager.Expect100Continue = true;
                                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                               | SecurityProtocolType.Tls11
                                               | SecurityProtocolType.Ssl3
                                               | SecurityProtocolType.Tls12;


                                        ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;


                                        //ServicePointManager.Expect100Continue = true;
                                        //ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;


                                        //var httpWebRequest = (HttpWebRequest)WebRequest.Create("https://sts-st.deliveryhero.io/oauth2/token"); // Test Link
                                        var httpWebRequest = (HttpWebRequest)WebRequest.Create(URL1);
                                        httpWebRequest.ContentType = "application/json";
                                        httpWebRequest.Accept = "application/json";

                                        httpWebRequest.Method = "POST";



                                        using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                                        {
                                            //string json = "grant_type=client_credentials&client_id=pandago:sg:13217861-e813-4cc6-b0a2-4b5be300b0ca&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&client_assertion=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjYwODM4MTg5LWJjMmQtNDY2NS1hZmY0LTllZTdlZWI2MTVkMCJ9.eyJpc3MiOiJwYW5kYWdvOnNnOjEzMjE3ODYxLWU4MTMtNGNjNi1iMGEyLTRiNWJlMzAwYjBjYSIsInN1YiI6InBhbmRhZ286c2c6MTMyMTc4NjEtZTgxMy00Y2M2LWIwYTItNGI1YmUzMDBiMGNhIiwianRpIjoiMWUxNjAwMjgtNTc0Zi0xMWVjLWJmNjMtMDI0MmFjMTMwMDAyIiwiZXhwIjoxNjcwMzkzODQyLCJhdWQiOiJodHRwczovL3N0cy5kZWxpdmVyeWhlcm8uaW8ifQ.Otxg9lTf4Le56h-GRxkHQazN21qDtYYYuc3SmnWiBokhruqoYpbBxlTGJFBs0hvYfN_DEEtF8M9G0MZQlzPbjyh42MOcc87gpkv2mMGPAoEdFmZ5YCmfzwkVb_GFc2bUIGLK4m4BoV5qjHEAzdLiWynmof2JbA-PWjxLAggzzyRLf_UOaGKtJ_5MyySmaciebGJlkO0VwtOGF74FlaA_iucA7QzfE5TS1gbbdlzGErjd454Idluwqmt-kO63qZ_tCMW0SMnqjLLAcNSuMQHj3fdOXxmisypLfhvKtXMwhUHqurpXvITsO5s12pLXifdhg5UfuN7l59jJ2q0SFroyfQ&scope=pandago.api.sg.*";     //Staging
                                            //string json = "grant_type=client_credentials&client_id=pandago:pk:a6a300df-554a-4821-a7db-2ec08d5b5770&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&client_assertion=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjM0MGZhZDA2LTdlOTgtNGM0Mi1iZjdiLTJiZjA2OTA2NjM0ZSJ9.eyJpc3MiOiJwYW5kYWdvOnBrOmE2YTMwMGRmLTU1NGEtNDgyMS1hN2RiLTJlYzA4ZDViNTc3MCIsInN1YiI6InBhbmRhZ286cGs6YTZhMzAwZGYtNTU0YS00ODIxLWE3ZGItMmVjMDhkNWI1NzcwIiwianRpIjoiMWUxNjAwMjgtNTc0Zi0xMWVjLWJmNjMtMDI0MmFjMTMwMDAyIiwiZXhwIjoxNjcwMzkzODQyLCJhdWQiOiJodHRwczovL3N0cy5kZWxpdmVyeWhlcm8uaW8ifQ.ELIBoRjdbcLKYB8S9piqtrWt-SuP543RHc3iKO6Dt9BPpK0be6Gj0GkBwh6KG-ZEISpZhJYNKhWxWepS3pbFVMJQO6a46NFepAiCKb7jpvp2Ss_Ue5nqh1OuPoEFHtNJKjFYwvhkDC5sAMBS6vwH9a3_AgqD8UWjjChIYw-w3O8GXoePd_E5ZVH96QsvF7dQBDszxK4BY1vWUbpFF8h-o73AIgjWHD0erf4T825owAEERdFvWQ2eWZ6goNUgP4Sy8MtV5hhIAGg225CX7A6T4uyjR1lACJcXPsQ3HW4agDlLrv9TyBGoXtKcj72_exqCNl6QdEYc4-xK7bcTKsMPCw&scope=pandago.api.pk.*";     //Production
                                            streamWriter.Write(Message1);
                                            streamWriter.Flush();
                                            streamWriter.Close();
                                        }

                                        var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                                        {
                                            var result = streamReader.ReadToEnd();
                                            JObject json1 = JObject.Parse(result);

                                            string formUrl = json1.SelectToken("Transaction.PaymentPortal").ToString();

                                            URL = formUrl;


                                            string UBLOrderID = json1.SelectToken("Transaction.TransactionID").ToString();
                                            int a12 = DBHandler.InsertDataWithID(string.Format("update orders set ShopifyTransactionID = '{0}' where id = '{1}'", UBLOrderID, NewOrder));


                                           


                                        }
                                    }

                                }
                            }

                            int a11 = DBHandler.InsertDataWithID(string.Format("update appjson set OrderID = '{0}' where id = '{1}'", NewOrder, JSONID));

                            DBHandler.InsertDataForOrder("insert into log(object_id,object_type, Channel, logType,date) values('" + NewOrder + "','New Order " + strCurrentStatus + "','" + Platform + "', 'Order', '" + DateTime.Now.AddHours(Convert.ToDouble(System.Configuration.ConfigurationManager.AppSettings["AddHours"])).ToString("yyyy-MM-dd H:mm") + "')");

                            string Message = "{\"responseType\": 1, \"OrderID\": \"" + NewOrder + "\", \"DeliveryTime\": \"" + DeliveryTime.Replace(" Minutes", "") + "\", \"OrderAmount\": \"" + OrderAmount + "\", \"IsCustomerReviewed\": \"" + IsCustomerReviewed + "\", \"message\": \"Order Added Successfully\",	\"URL\": \"" + URL + "\"}";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);


                            ////Calling Auto DSP Assign API of Imran
                            //try
                            //{
                            //    DataTable dtOrder1 = DBHandler.GetData(string.Format(@"select * from orders where id = '{0}' ", NewOrder));


                            //    if (dtOrder1.Rows.Count > 0)
                            //    {
                            //        WebRequest wr = WebRequest.Create("https://backend.Jewar.pk/api/WebRequestsAPI/ApplyDeliveryRuleOnOrder?orderid=" + NewOrder );
                            //        //wr.Timeout = 3500;

                            //        try
                            //        {
                            //            HttpWebResponse response = (HttpWebResponse)wr.GetResponse();
                            //        }
                            //        catch (Exception ex)
                            //        {
                            //            //We know its going to fail but that dosent matter!!
                            //            Response.Write(ex.Message);
                            //        }
                            //    }
                            //}
                            //catch (Exception eeee)
                            //{ }
                            ////End Calling Auto DSP Assign API of Imran

                        }
                        else
                        {
                            string Message = "{\"responseType\":  0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"IsCustomerReviewed\": \"" + IsCustomerReviewed + "\", \"message\": \"Error while saving order\",	\"URL\": \"" + URL + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0, \"OrderID\": \"0\", \"DeliveryTime\": \"0\", \"OrderAmount\": \"0\", \"IsCustomerReviewed\": \"false\", \"message\": \"Please enter name and phone number.\",	\"URL\": \"" + URL + "\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);
            }
        }

        public void SearchProduct()
        {
            try
            {


                string Message = "";
                if (Request["ProductName"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductName"]))
                    {
                        string ProductName = Request["ProductName"].ToString();
                        
                        int a = DBHandler.InsertDataForOrder(string.Format(@"insert into searching(SearchItem, Created)values('{0}','{1}')", ProductName, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        string OutletID = "32";
                        string CategoryName = "0";
                        if (Request.QueryString["BranchCode"] != null)
                        {
                            if (!checkForSQLInjection(Request["BranchCode"]))
                            {
                                if (Request["BranchCode"].ToString() != "")
                                {
                                    OutletID = Request.QueryString["BranchCode"].ToString();
                                }
                            }
                        }
              


                        string limit = "";
                        if (Request["limit"] != null)
                        {
                            if (!checkForSQLInjection(Request["limit"]))
                            {
                                limit = "limit " + Request.QueryString["limit"].ToString();
                            }

                        }

//                        DataTable table = DBHandler.GetData(string.Format(@"SELECT p.`ID` , lower(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
//,FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder , IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'
//WHERE p.Combinataions LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%'
// ORDER BY p.title  {1}", ProductName, limit, OutletID));

                        DataTable table = DBHandler.GetData(string.Format(@"
SELECT p.`ID`, p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' and ps.price is not null
WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL
 ORDER BY p.title  {1}", ProductName, limit, OutletID));


                        string Result = "Actual Result";

                        if (table.Rows.Count == 0)
                        {
//                            table = DBHandler.GetData(string.Format(@"SELECT p.`ID` , lower(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
//,FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder , IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'
//WHERE p.title LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%'
// ORDER BY p.title {1}", ProductName, limit, OutletID));

//                            table = DBHandler.GetData(string.Format(@"
//SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
//,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'
//WHERE p.title LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%'
// ORDER BY p.title {1}", ProductName, limit, OutletID));

                        }




                        if (table.Rows.Count == 0)
                        {
                            string FistLetter = ProductName[0].ToString();
                            string LastLetter = ProductName[ProductName.Split(' ')[0].Length - 1].ToString();

//                            table = DBHandler.GetData(string.Format(@"
//SELECT p.`ID` , lower(REPLACE(p.`Title`, '\'','')) AS Title ,IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
//,FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder , IFNULL(ps.`DiscountPrice` * pv.`unitpercase` , pv.Price) as DiscountPrice, IFNULL(ps.`DiscountAmount` * pv.`unitpercase` , pv.Price) as DiscountAmount, p.PrescriptionRequired
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}'
//WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' ORDER BY p.title {2}", FistLetter, LastLetter, limit, OutletID));

                            table = DBHandler.GetData(string.Format(@"
SELECT p.`ID` , p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title ,IFNULL(ps.`Price` * p.unitpercase1 , 0) AS Price , IFNULL(ps.`Price` * p.unitpercase1 , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.unitpercase1 , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.unitpercase1 , 0) AS DiscountAmount, p.PrescriptionRequired
FROM `products` p 
INNER JOIN  `productvariation` pv ON p.id = pv.productid
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}'
WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL ORDER BY p.title {2}", FistLetter, LastLetter, limit, OutletID));


                            Result = "Did You Mean";
                        }

                        var JSONString = new StringBuilder();

                        if (table.Rows.Count > 0)
                        {
                            if (table.Rows.Count > 0)
                            {
                                System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                                foreach (DataRow dr in table.Rows) // search whole table
                                {
                                    dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                                }

                                JSONString.Append("{\"ResponseType\": 1, \"Result\":\""+Result+"\" ,\"Data\": [");
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    JSONString.Append("{");
                                    for (int j = 0; j < table.Columns.Count; j++)
                                    {
                                        if (j < table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                        else if (j == table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                        }
                                    }


                                    if (i == table.Rows.Count - 1)
                                    {
                                        JSONString.Append("}]");
                                    }
                                    else
                                    {
                                        JSONString.Append("},");
                                    }
                                }
                                JSONString.Append("}");
                            }

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(JSONString.ToString());
                        }
                        else
                        {
                            Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void SearchProductByJSON(string json)
        {
            try
            {
                SearchRoot f = JsonConvert.DeserializeObject<SearchRoot>(json);

                string Message = "";
                if (f.ProductName != null)
                {
                    if (!checkForSQLInjection(f.ProductName))
                    {
                        string ProductName = f.ProductName.ToString();

                        int a = DBHandler.InsertDataForOrder(string.Format(@"insert into searching(SearchItem, Created)values('{0}','{1}')", ProductName, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        string OutletID = "32";
                        string CategoryName = "0";
                        if (f.BranchCode != null)
                        {
                            if (!checkForSQLInjection(f.BranchCode))
                            {
                                if (f.BranchCode.ToString() != "")
                                {
                                    OutletID = f.BranchCode.ToString();
                                }
                            }
                        }



                        string limit = "";
                        if (f.limit != null)
                        {
                            if (!checkForSQLInjection(f.limit))
                            {
                                limit = "limit " + f.limit.ToString();
                            }

                        }


                        string Type = "";
                        string Category = "p.`ProductType`";
                        if (f.Type != null && f.Name != null)
                        {
                            if (!checkForSQLInjection(f.Type) && !checkForSQLInjection(f.Name))
                            {
                                if (f.Type != "" && f.Name != "")
                                {
                                    if (f.Type.ToLower() == "category")
                                    {
                                        //Type = " and p.ProductType = '" + f.Name + "'";

                                        Type = " INNER JOIN `productcategories` c ON p.id = c.productid and c.Category = '" + f.Name + "'";

                                        Category = "'" + f.Name + "'";

                                    }
                                    if (f.Type.ToLower() == "brand")
                                    {
                                        Type = " and p.Vendor = '" + f.Name + "'";
                                    }
                                }
                            }

                        }

                        DataTable table = new DataTable();
                        DataTable table1 = new DataTable();
                        string Result = "";
                        string RecordsCount = "0";

                        table = DBHandler.GetData(string.Format(@"
SELECT p.`ID`, p.`ID` as ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
WHERE p.title = '{0}' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

                        table1 = DBHandler.GetData(string.Format(@"
SELECT  count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
WHERE  p.title = '{0}'  and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
                        Result = "Actual Result";

                        if (table.Rows.Count == 0)
                        {

                            DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                            if (dtPrimaryBranch.Rows.Count > 0)
                            {
                                //if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                                //{

                                table = DBHandler.GetData(string.Format(@"
SELECT p.`ID`, p.`ID` as ProductID,p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

                                table1 = DBHandler.GetData(string.Format(@"
SELECT count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
                                // }
                                //                            else
                                //                            {
                                //                                table = DBHandler.GetData(string.Format(@"
                                //SELECT ID, `ID` as ProductID, Slug,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,Brand,SUM(AvailableQty) AS AvailableQty,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired
                                //FROM
                                //(SELECT p.`ID`, p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                                //ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
                                //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
                                //,p.sort
                                //FROM `products` p 
                                //LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` AND store_no = '{2}'  {3}
                                //WHERE p.tags LIKE '%{0}%' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'  AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)

                                // UNION

                                //SELECT p.`ID`, p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                                //ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
                                //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
                                //,p.sort
                                //FROM `products` p 
                                //LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` AND store_no = '{5}'  {3}
                                //WHERE p.tags LIKE '%{0}%' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'  AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                                //) AS a

                                //GROUP BY ID,Slug,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,Brand,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired,sort


                                // ORDER BY  AvailableQty DESC, sort DESC, title  {1}
                                // ", ProductName, limit, OutletID, Type, Category, dtPrimaryBranch.Rows[0]["primarybranch"].ToString()));
                                //                            }


                                Result = "Actual Result";
                            }
                            else
                            {
                                table = DBHandler.GetData(string.Format(@"
SELECT p.`ID`, p.`ID` as ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

                                table1 = DBHandler.GetData(string.Format(@"
SELECT  count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
                            }

                            if (table.Rows.Count == 0)
                            {
                                //                            table = DBHandler.GetData(string.Format(@"
                                //SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                                //ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
                                //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
                                //FROM `products` p 
                                //left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' {3} 
                                //WHERE p.title LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' 
                                // ORDER BY p.title {1}", ProductName, limit, OutletID, Type, Category));

                            }




                            if (table.Rows.Count == 0)
                            {
                                string FistLetter = ProductName[0].ToString();
                                string LastLetter = ProductName[ProductName.Split(' ')[0].Length - 1].ToString();


                                if (dtPrimaryBranch.Rows.Count > 0)
                                {
                                    //if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                                    //{
                                    table = DBHandler.GetData(string.Format(@"
SELECT p.`ID` , p.`ID` as ProductID,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage, {5} AS Category , p.`Vendor` AS Brand
,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)  ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.title {2}", FistLetter, LastLetter, limit, OutletID, Type, Category));


                                    table1 = DBHandler.GetData(string.Format(@"
SELECT  count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)  ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.title ", FistLetter, LastLetter, limit, OutletID, Type, Category));


                                    //}
                                    //                                else
                                    //                                {
                                    //                                    table = DBHandler.GetData(string.Format(@"
                                    //SELECT ID ,`ID` as ProductID ,Slug ,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,Brand,SUM(AvailableQty) AS AvailableQty,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired
                                    //FROM 
                                    //(SELECT p.`ID`,p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                                    //ImageURL AS ProductImage, {5} AS Category , p.`Vendor` AS Brand
                                    //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
                                    //FROM `products` p 
                                    //LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` AND store_no = '{3}' {4} 
                                    //WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' AND p.isactive = 1 AND p.purchase LIKE '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)

                                    //UNION

                                    //SELECT p.`ID` ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                                    //ImageURL AS ProductImage, {5} AS Category , p.`Vendor` AS Brand
                                    //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
                                    //FROM `products` p 
                                    //LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` AND store_no = '{6}' {4} 
                                    //WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'  AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
                                    //)
                                    //AS a
                                    //GROUP BY 
                                    //ID,Slug,Title,Price,SalePrice,SalePercent,Description,Variations,Highlights,ProductImage,Category,Brand,MaxOrder,DiscountPrice,DiscountAmount,PrescriptionRequired
                                    // ORDER BY  AvailableQty DESC,title {2}
                                    //",
                                    //                                    FistLetter, LastLetter, limit, OutletID, Type, Category, dtPrimaryBranch.Rows[0]["primarybranch"].ToString()));

                                    //                                }
                                }
                                else
                                {
                                    table = DBHandler.GetData(string.Format(@"
SELECT p.`ID`,p.Slug, p.`ID` as ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage, {5} AS Category , p.`Vendor` AS Brand
,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) ORDER BY FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC, p.title {2}", FistLetter, LastLetter, limit, OutletID, Type, Category));

                                    table1 = DBHandler.GetData(string.Format(@"
SELECT  count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) ORDER BY FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC, p.title ", FistLetter, LastLetter, limit, OutletID, Type, Category));

                                }

                                Result = "Did You Mean";
                            }
                        }



                        var JSONString = new StringBuilder();

                        if (table.Rows.Count > 0)
                        {
                            if (table1.Rows.Count > 0)
                            {
                                RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
                            }



                            if (table.Rows.Count > 0)
                            {
                                System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                                foreach (DataRow dr in table.Rows) // search whole table
                                {
                                    dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                                }

                                JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\", \"Result\":\"" + Result + "\" , \"BannerImageURL\":\"\" , \"CollectionName\":\"Search Product\" ,\"Data\": [");
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    JSONString.Append("{");
                                    for (int j = 0; j < table.Columns.Count; j++)
                                    {
                                        if (j < table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                        else if (j == table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                        }
                                    }


                                    if (i == table.Rows.Count - 1)
                                    {
                                        JSONString.Append("}]");
                                    }
                                    else
                                    {
                                        JSONString.Append("},");
                                    }
                                }
                                JSONString.Append("}");
                            }

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(JSONString.ToString());
                        }
                        else
                        {
                            Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }

        /*This method is for per box per strip */
        public void SearchProductByJSONV1(string json)
        {
            try
            {
                SearchRoot f = JsonConvert.DeserializeObject<SearchRoot>(json);

                string Message = "";
                if (f.ProductName != null)
                {
                    if (!checkForSQLInjection(f.ProductName))
                    {
                        string ProductName = f.ProductName.ToString();

                        int a = DBHandler.InsertDataForOrder(string.Format(@"insert into searching(SearchItem, Created)values('{0}','{1}')", ProductName, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        string OutletID = "32";
                        string CategoryName = "0";
                        if (f.BranchCode != null)
                        {
                            if (!checkForSQLInjection(f.BranchCode))
                            {
                                if (f.BranchCode.ToString() != "")
                                {
                                    OutletID = f.BranchCode.ToString();
                                }
                            }
                        }



                        string limit = "";
                        if (f.limit != null)
                        {
                            if (!checkForSQLInjection(f.limit))
                            {
                                limit = "limit " + f.limit.ToString();
                            }

                        }


                        string Type = "";
                        string Category = "p.`ProductType`";
                        if (f.Type != null && f.Name != null)
                        {
                            if (!checkForSQLInjection(f.Type) && !checkForSQLInjection(f.Name))
                            {
                                if (f.Type != "" && f.Name != "")
                                {
                                    if (f.Type.ToLower() == "category")
                                    {
                                        //Type = " and p.ProductType = '" + f.Name + "'";

                                        Type = " INNER JOIN `productcategories` c ON p.id = c.productid and c.Category = '" + f.Name + "'";

                                        Category = "'" + f.Name + "'";

                                    }
                                    if (f.Type.ToLower() == "brand")
                                    {
                                        Type = " and p.Vendor = '" + f.Name + "'";
                                    }
                                }
                            }

                        }

                        DataTable table = new DataTable();
                        DataTable table1 = new DataTable();
                        string Result = "";
                        string RecordsCount = "0";

                        table = DBHandler.GetData(string.Format(@"

SELECT p.`ID`, p.`ID` AS ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , '0' AS Price , '0'  AS SalePrice, 0 AS SalePercent, '' as `Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage,  p.`ProductType` AS Category , p.`Vendor` AS Brand
,'0' AS AvailableQty, p.MaxCount AS MaxOrder , '0' AS DiscountPrice,'0' AS DiscountAmount, p.PrescriptionRequired, p.unitpercase1 as unitpercase


, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, '0'  AS SaleStripPrice ,'0'  AS SaleBoxpPrice  , '0' AS StripAvailableQty, '0' AS DiscountStripPrice, '0' AS DiscountStripAmount, '0' AS DiscountBoxPrice, '0' AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor



FROM `products` p 
-- left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' 
{3}
WHERE p.title = '{0}' and p.isactive = 1 and p.purchase like '%Loc%' -- AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

                        table1 = DBHandler.GetData(string.Format(@"
SELECT  count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
WHERE  p.title = '{0}'  and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
                        Result = "Actual Result";

                        if (table.Rows.Count == 0)
                        {

                            //DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                            //if (dtPrimaryBranch.Rows.Count > 0)
                            //{
                               
                                table = DBHandler.GetData(string.Format(@"

SELECT p.`ID`, p.`ID` AS ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , '0' AS Price , '0'  AS SalePrice, 0 AS SalePercent,'' as `Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage,  p.`ProductType` AS Category , p.`Vendor` AS Brand
, '0'  AS AvailableQty, p.MaxCount AS MaxOrder , '0' AS DiscountPrice,'0' AS DiscountAmount, p.PrescriptionRequired, p.unitpercase1 as unitpercase


, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, '0'  AS SaleStripPrice ,'0'  AS SaleBoxpPrice  , '0' AS StripAvailableQty, '0' AS DiscountStripPrice, '0' AS DiscountStripAmount, '0' AS DiscountBoxPrice, '0' AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor



FROM `products` p 
-- left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' 
{3}
WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' -- AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

                                table1 = DBHandler.GetData(string.Format(@"
SELECT count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' 
{3}
WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 ORDER BY  p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
                               

                                Result = "Actual Result";
                            //}
//                            else
//                            {
//                                table = DBHandler.GetData(string.Format(@"
//SELECT p.`ID`, p.`ID` as ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
//,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired



//, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
//IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
//,'' AS ParentCategory
// ,'' AS ParentCategorySlug
//,p.Usedfor


//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
//WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
// ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

//                                table1 = DBHandler.GetData(string.Format(@"
//SELECT  count(p.id) as TotalRecords
//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
//WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
// ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
//                            }

                            if (table.Rows.Count == 0)
                            {
                                //                            table = DBHandler.GetData(string.Format(@"
                                //SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
                                //ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
                                //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
                                //FROM `products` p 
                                //left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' {3} 
                                //WHERE p.title LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' 
                                // ORDER BY p.title {1}", ProductName, limit, OutletID, Type, Category));

                            }




                            if (table.Rows.Count == 0)
                            {
                                string FistLetter = ProductName[0].ToString();
                                string LastLetter = ProductName[ProductName.Split(' ')[0].Length - 1].ToString();


                                //if (dtPrimaryBranch.Rows.Count > 0)
                                //{
                                    
                                    table = DBHandler.GetData(string.Format(@"

SELECT p.`ID`, p.`ID` AS ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , '0' AS Price , '0'  AS SalePrice, 0 AS SalePercent, '' as `Description`, '' AS Variations, '' AS Highlights, 
ImageURL AS ProductImage,  p.`ProductType` AS Category , p.`Vendor` AS Brand
,'0' AS AvailableQty, p.MaxCount AS MaxOrder , '0' AS DiscountPrice,'0' AS DiscountAmount, p.PrescriptionRequired, p.unitpercase1 as unitpercase


, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, '0'  AS SaleStripPrice ,'0'  AS SaleBoxpPrice  , '0' AS StripAvailableQty, '0' AS DiscountStripPrice, '0' AS DiscountStripAmount, '0' AS DiscountBoxPrice, '0' AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor



FROM `products` p 
-- left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' 
{4} 
WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' 
-- AND ps.price IS NOT NULL AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) 
ORDER BY  p.title {2}", FistLetter, LastLetter, limit, OutletID, Type, Category));


                                    table1 = DBHandler.GetData(string.Format(@"
SELECT  count(p.id) as TotalRecords
FROM `products` p 
left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)  ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.title ", FistLetter, LastLetter, limit, OutletID, Type, Category));

 
                                //}
//                                else
//                                {
//                                    table = DBHandler.GetData(string.Format(@"
//SELECT p.`ID`,p.Slug, p.`ID` as ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, {5} AS Category , p.`Vendor` AS Brand
//,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired



//, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
//IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
//,'' AS ParentCategory
// ,'' AS ParentCategorySlug
//,p.Usedfor


//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
//WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) ORDER BY FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC, p.title {2}", FistLetter, LastLetter, limit, OutletID, Type, Category));

//                                    table1 = DBHandler.GetData(string.Format(@"
//SELECT  count(p.id) as TotalRecords
//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
//WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) ORDER BY FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC, p.title ", FistLetter, LastLetter, limit, OutletID, Type, Category));

//                                }

                                Result = "Did You Mean";
                            }
                        }






                        DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));

                        //Response.Write("5");
                        if (dtStockJSON.Rows.Count > 0)
                        {
                            string json1 = dtStockJSON.Rows[0]["JSON"].ToString();
                            DataTable dt = (DataTable)JsonConvert.DeserializeObject(json1, (typeof(DataTable)));

                            for (int a1 = 0; a1 < table.Rows.Count; a1++)
                            {
                                DataRow[] rows = dt.Select("ProductID = '" + table.Rows[a1]["ProductID"].ToString() + "'");

                                if (rows.Length > 0)
                                {
                                    try
                                    {
                                        //Response.Write(table.Rows[a1]["ProductID"].ToString() + "<br/>");
                                        table.Rows[a1]["Price"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
                                        table.Rows[a1]["SalePrice"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
                                        table.Rows[a1]["AvailableQty"] = Math.Floor(Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table.Rows[a1]["unitpercase"]));
                                        table.Rows[a1]["DiscountPrice"] = Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
                                        table.Rows[a1]["DiscountAmount"] = Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);

                                        //table.Rows[a1]["SaleBoxpPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
                                        //table.Rows[a1]["DiscountBoxPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
                                        //table.Rows[a1]["DiscountBoxAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
                                        //table.Rows[a1]["TotalTablets"] = Convert.ToDecimal(table.Rows[a1]["unitpercase"]) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
                                        //table.Rows[a1]["BoxAvailableQty"] = (Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["noofstrips"]);

                                        table.Rows[a1]["SaleStripPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["NoofStrips"]);
                                        table.Rows[a1]["StripAvailableQty"] = Math.Floor((Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]));
                                        table.Rows[a1]["DiscountStripPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["NoofStrips"]);
                                        table.Rows[a1]["DiscountStripAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["NoofStrips"]);


                                    }
                                    catch (Exception erq)
                                    {
                                        Response.Write(a + " - " + table.Rows[a1]["Slug"].ToString());
                                    }

                                }
                            }


                            for (int i = table.Rows.Count - 1; i >= 0; i--)
                            {
                                DataRow dr = table.Rows[i];
                                if (dr["AvailableQty"].ToString() == "0")
                                    dr.Delete();
                            }
                            table.AcceptChanges();

                            //if (table1.Rows.Count > 0)
                            //{
                            //    table = table1.AsEnumerable().Skip(startingIndex).Take(numberOfRowsToRetrieve).CopyToDataTable();
                            //}

                            //if (table.Rows.Count > 0)
                            //{
                            //    RecordsCount = table1.Rows.Count.ToString();
                            //}
                        }





                        var JSONString = new StringBuilder();

                        if (table.Rows.Count > 0)
                        {
                            if (table1.Rows.Count > 0)
                            {
                                RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
                            }



                            if (table.Rows.Count > 0)
                            {
                                System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                                foreach (DataRow dr in table.Rows) // search whole table
                                {
                                    dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                                }

                                JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\", \"Result\":\"" + Result + "\" , \"BannerImageURL\":\"\" , \"CollectionName\":\"Search Product\" ,\"Data\": [");
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    JSONString.Append("{");
                                    for (int j = 0; j < table.Columns.Count; j++)
                                    {
                                        if (j < table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                        else if (j == table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

                                            try
                                            {
                                                if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                                {

                                                    JSONString.Append(",\"Variation\": [");
                                                    JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                                    JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                                    JSONString.Append("]");
                                                }
                                                else
                                                {
                                                    JSONString.Append(",\"Variation\": []");
                                                }
                                            }
                                            catch (Exception ee)
                                            { }

                                        }
                                    }


                                    if (i == table.Rows.Count - 1)
                                    {
                                        JSONString.Append("}]");
                                    }
                                    else
                                    {
                                        JSONString.Append("},");
                                    }
                                }
                                JSONString.Append("}");
                            }

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(JSONString.ToString());
                        }
                        else
                        {
                            Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }

//        public void SearchProductByJSONV1(string json)
//        {
//            try
//            {
//                SearchRoot f = JsonConvert.DeserializeObject<SearchRoot>(json);

//                string Message = "";
//                if (f.ProductName != null)
//                {
//                    if (!checkForSQLInjection(f.ProductName))
//                    {
//                        string ProductName = f.ProductName.ToString();

//                        int a = DBHandler.InsertDataForOrder(string.Format(@"insert into searching(SearchItem, Created)values('{0}','{1}')", ProductName, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

//                        string OutletID = "32";
//                        string CategoryName = "0";
//                        if (f.BranchCode != null)
//                        {
//                            if (!checkForSQLInjection(f.BranchCode))
//                            {
//                                if (f.BranchCode.ToString() != "")
//                                {
//                                    OutletID = f.BranchCode.ToString();
//                                }
//                            }
//                        }



//                        string limit = "";
//                        if (f.limit != null)
//                        {
//                            if (!checkForSQLInjection(f.limit))
//                            {
//                                limit = "limit " + f.limit.ToString();
//                            }

//                        }


//                        string Type = "";
//                        string Category = "p.`ProductType`";
//                        if (f.Type != null && f.Name != null)
//                        {
//                            if (!checkForSQLInjection(f.Type) && !checkForSQLInjection(f.Name))
//                            {
//                                if (f.Type != "" && f.Name != "")
//                                {
//                                    if (f.Type.ToLower() == "category")
//                                    {
//                                        //Type = " and p.ProductType = '" + f.Name + "'";

//                                        Type = " INNER JOIN `productcategories` c ON p.id = c.productid and c.Category = '" + f.Name + "'";

//                                        Category = "'" + f.Name + "'";

//                                    }
//                                    if (f.Type.ToLower() == "brand")
//                                    {
//                                        Type = " and p.Vendor = '" + f.Name + "'";
//                                    }
//                                }
//                            }

//                        }

//                        DataTable table = new DataTable();
//                        DataTable table1 = new DataTable();
//                        string Result = "";
//                        string RecordsCount = "0";

//                        table = DBHandler.GetData(string.Format(@"

//SELECT p.`ID`, p.`ID` AS ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , '0' AS Price , '0'  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, '' AS Category , p.`Vendor` AS Brand
//,'0' AS AvailableQty, p.MaxCount AS MaxOrder , '0' AS DiscountPrice,'0' AS DiscountAmount, p.PrescriptionRequired, p.unitpercase1 as unitpercase


//, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, '0'  AS SaleStripPrice ,'0'  AS SaleBoxpPrice  , '0' AS StripAvailableQty, '0' AS DiscountStripPrice, '0' AS DiscountStripAmount, '0' AS DiscountBoxPrice, '0' AS DiscountBoxAmount,
//IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
//,'' AS ParentCategory
// ,'' AS ParentCategorySlug
//,p.Usedfor



//FROM `products` p 
//-- left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' 
//{3}
//WHERE  p.isactive = 1 and p.purchase like '%Loc%' -- AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
// ORDER BY  p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

//                        table1 = DBHandler.GetData(string.Format(@"
//SELECT  count(p.id) as TotalRecords
//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
//WHERE  p.title = '{0}'  and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
// ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
//                        Result = "Actual Result";

//                        if (table.Rows.Count == 0)
//                        {

//                            //DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
//                            //if (dtPrimaryBranch.Rows.Count > 0)
//                            //{

//                            table = DBHandler.GetData(string.Format(@"

//SELECT p.`ID`, p.`ID` AS ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , '0' AS Price , '0'  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, '' AS Category , p.`Vendor` AS Brand
//, '0'  AS AvailableQty, p.MaxCount AS MaxOrder , '0' AS DiscountPrice,'0' AS DiscountAmount, p.PrescriptionRequired, p.unitpercase1 as unitpercase


//, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, '0'  AS SaleStripPrice ,'0'  AS SaleBoxpPrice  , '0' AS StripAvailableQty, '0' AS DiscountStripPrice, '0' AS DiscountStripAmount, '0' AS DiscountBoxPrice, '0' AS DiscountBoxAmount,
//IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
//,'' AS ParentCategory
// ,'' AS ParentCategorySlug
//,p.Usedfor



//FROM `products` p 
//-- left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' 
//{3}
//WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' -- AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
// ORDER BY  p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

//                            table1 = DBHandler.GetData(string.Format(@"
//SELECT count(p.id) as TotalRecords
//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' 
//{3}
//WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
// ORDER BY  p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));


//                            Result = "Actual Result";
//                            //}
//                            //                            else
//                            //                            {
//                            //                                table = DBHandler.GetData(string.Format(@"
//                            //SELECT p.`ID`, p.`ID` as ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//                            //ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
//                            //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired



//                            //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
//                            //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//                            //, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
//                            //,'' AS ParentCategory
//                            // ,'' AS ParentCategorySlug
//                            //,p.Usedfor


//                            //FROM `products` p 
//                            //left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
//                            //WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
//                            // ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title  {1}", ProductName, limit, OutletID, Type, Category));

//                            //                                table1 = DBHandler.GetData(string.Format(@"
//                            //SELECT  count(p.id) as TotalRecords
//                            //FROM `products` p 
//                            //left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}'  {3}
//                            //WHERE p.tags LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
//                            // ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.sort DESC, p.title ", ProductName, limit, OutletID, Type, Category));
//                            //                            }

//                            if (table.Rows.Count == 0)
//                            {
//                                //                            table = DBHandler.GetData(string.Format(@"
//                                //SELECT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//                                //ImageURL AS ProductImage, {4} AS Category , p.`Vendor` AS Brand
//                                //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
//                                //FROM `products` p 
//                                //left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{2}' {3} 
//                                //WHERE p.title LIKE '%{0}%' and p.isactive = 1 and p.purchase like '%Loc%' 
//                                // ORDER BY p.title {1}", ProductName, limit, OutletID, Type, Category));

//                            }




//                            if (table.Rows.Count == 0)
//                            {
//                                string FistLetter = ProductName[0].ToString();
//                                string LastLetter = ProductName[ProductName.Split(' ')[0].Length - 1].ToString();


//                                //if (dtPrimaryBranch.Rows.Count > 0)
//                                //{

//                                table = DBHandler.GetData(string.Format(@"

//SELECT p.`ID`, p.`ID` AS ProductID ,p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title , '0' AS Price , '0'  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//ImageURL AS ProductImage, '' AS Category , p.`Vendor` AS Brand
//,'0' AS AvailableQty, p.MaxCount AS MaxOrder , '0' AS DiscountPrice,'0' AS DiscountAmount, p.PrescriptionRequired, p.unitpercase1 as unitpercase


//, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, '0'  AS SaleStripPrice ,'0'  AS SaleBoxpPrice  , '0' AS StripAvailableQty, '0' AS DiscountStripPrice, '0' AS DiscountStripAmount, '0' AS DiscountBoxPrice, '0' AS DiscountBoxAmount,
//IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
//,'' AS ParentCategory
// ,'' AS ParentCategorySlug
//,p.Usedfor



//FROM `products` p 
//-- left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' 
//{4} 
//WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' 
//-- AND ps.price IS NOT NULL AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) 
//ORDER BY  p.title {2}", FistLetter, LastLetter, limit, OutletID, Type, Category));


//                                table1 = DBHandler.GetData(string.Format(@"
//SELECT  count(p.id) as TotalRecords
//FROM `products` p 
//left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
//WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%'  AND ps.price IS NOT NULL AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)  ORDER BY  FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC,p.title ", FistLetter, LastLetter, limit, OutletID, Type, Category));


//                                //}
//                                //                                else
//                                //                                {
//                                //                                    table = DBHandler.GetData(string.Format(@"
//                                //SELECT p.`ID`,p.Slug, p.`ID` as ProductID , LOWER(REPLACE(p.`Title`, '\'','')) AS Title , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, 0 AS SalePercent, p.`Description`, '' AS Variations, '' AS Highlights, 
//                                //ImageURL AS ProductImage, {5} AS Category , p.`Vendor` AS Brand
//                                //,FLOOR((IFNULL(Qty,0) / p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder , IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired



//                                //, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
//                                //IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
//                                //, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
//                                //,'' AS ParentCategory
//                                // ,'' AS ParentCategorySlug
//                                //,p.Usedfor


//                                //FROM `products` p 
//                                //left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
//                                //WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) ORDER BY FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC, p.title {2}", FistLetter, LastLetter, limit, OutletID, Type, Category));

//                                //                                    table1 = DBHandler.GetData(string.Format(@"
//                                //SELECT  count(p.id) as TotalRecords
//                                //FROM `products` p 
//                                //left JOIN productsstock ps ON p.`ID` = ps.`ProductID` and store_no = '{3}' {4} 
//                                //WHERE SUBSTRING_INDEX(REPLACE(p.title,'-',' ') , ' ', 1) LIKE '{0}%{1}' and p.isactive = 1 and p.purchase like '%Loc%' AND ps.price IS NOT NULL  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0) ORDER BY FLOOR((IFNULL(Qty,0) / p.unitpercase1)) DESC, p.title ", FistLetter, LastLetter, limit, OutletID, Type, Category));

//                                //                                }

//                                Result = "Did You Mean";
//                            }
//                        }






//                        DataTable dtStockJSON = DBHandler.GetData(string.Format(@"select * from productsstockjson where store_no = '{0}' and isactive = 1 order by created desc", OutletID));

//                        //Response.Write("5");
//                        if (dtStockJSON.Rows.Count > 0)
//                        {
//                            string json1 = dtStockJSON.Rows[0]["JSON"].ToString();
//                            DataTable dt = (DataTable)JsonConvert.DeserializeObject(json1, (typeof(DataTable)));

//                            for (int a1 = 0; a1 < table.Rows.Count; a1++)
//                            {
//                                DataRow[] rows = dt.Select("ProductID = '" + table.Rows[a1]["ProductID"].ToString() + "'");

//                                if (rows.Length > 0)
//                                {
//                                    try
//                                    {
//                                        //Response.Write(table.Rows[a1]["ProductID"].ToString() + "<br/>");
//                                        table.Rows[a1]["Price"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        table.Rows[a1]["SalePrice"] = Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        table.Rows[a1]["AvailableQty"] = Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        table.Rows[a1]["DiscountPrice"] = Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        table.Rows[a1]["DiscountAmount"] = Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);

//                                        //table.Rows[a1]["SaleBoxpPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        //table.Rows[a1]["DiscountBoxPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        //table.Rows[a1]["DiscountBoxAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        //table.Rows[a1]["TotalTablets"] = Convert.ToDecimal(table.Rows[a1]["unitpercase"]) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]); // Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"]);
//                                        //table.Rows[a1]["BoxAvailableQty"] = (Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["noofstrips"]);

//                                        table.Rows[a1]["SaleStripPrice"] = (Convert.ToDecimal(rows[0]["Price"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["NoofStrips"]);
//                                        table.Rows[a1]["StripAvailableQty"] = Math.Floor((Convert.ToDecimal(rows[0]["Qty"]) / Convert.ToDecimal(table.Rows[a1]["unitpercase"])) * Convert.ToDecimal(table.Rows[a1]["NoofStrips"]));
//                                        table.Rows[a1]["DiscountStripPrice"] = (Convert.ToDecimal(rows[0]["DiscountPrice"].ToString() == "" ? "0" : rows[0]["DiscountPrice"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["NoofStrips"]);
//                                        table.Rows[a1]["DiscountStripAmount"] = (Convert.ToDecimal(rows[0]["DiscountAmount"].ToString() == "" ? "0" : rows[0]["DiscountAmount"]) * Convert.ToDecimal(table.Rows[a1]["unitpercase"])) / Convert.ToDecimal(table.Rows[a1]["NoofStrips"]);


//                                    }
//                                    catch (Exception erq)
//                                    {
//                                        Response.Write(a + " - " + table.Rows[a1]["Slug"].ToString());
//                                    }

//                                }
//                            }


//                            for (int i = table.Rows.Count - 1; i >= 0; i--)
//                            {
//                                DataRow dr = table.Rows[i];
//                                if (dr["AvailableQty"].ToString() == "0")
//                                    dr.Delete();
//                            }
//                            table.AcceptChanges();

//                            //if (table1.Rows.Count > 0)
//                            //{
//                            //    table = table1.AsEnumerable().Skip(startingIndex).Take(numberOfRowsToRetrieve).CopyToDataTable();
//                            //}

//                            //if (table.Rows.Count > 0)
//                            //{
//                            //    RecordsCount = table1.Rows.Count.ToString();
//                            //}
//                        }





//                        var JSONString = new StringBuilder();

//                        if (table.Rows.Count > 0)
//                        {
//                            if (table1.Rows.Count > 0)
//                            {
//                                RecordsCount = table1.Rows[0]["TotalRecords"].ToString();
//                            }



//                            if (table.Rows.Count > 0)
//                            {
//                                System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

//                                foreach (DataRow dr in table.Rows) // search whole table
//                                {
//                                    dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

//                                }

//                                JSONString.Append("{\"ResponseType\": 1,\"RecordsCount\": \"" + RecordsCount + "\", \"Result\":\"" + Result + "\" , \"BannerImageURL\":\"\" , \"CollectionName\":\"Search Product\" ,\"Data\": [");
//                                for (int i = 0; i < table.Rows.Count; i++)
//                                {
//                                    JSONString.Append("{");
//                                    for (int j = 0; j < table.Columns.Count; j++)
//                                    {
//                                        if (j < table.Columns.Count - 1)
//                                        {
//                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
//                                        }
//                                        else if (j == table.Columns.Count - 1)
//                                        {
//                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

//                                            try
//                                            {
//                                                if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
//                                                {

//                                                    JSONString.Append(",\"Variation\": [");
//                                                    JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
//                                                    JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
//                                                    JSONString.Append("]");
//                                                }
//                                                else
//                                                {
//                                                    JSONString.Append(",\"Variation\": []");
//                                                }
//                                            }
//                                            catch (Exception ee)
//                                            { }

//                                        }
//                                    }


//                                    if (i == table.Rows.Count - 1)
//                                    {
//                                        JSONString.Append("}]");
//                                    }
//                                    else
//                                    {
//                                        JSONString.Append("},");
//                                    }
//                                }
//                                JSONString.Append("}");
//                            }

//                            Response.Clear();
//                            Response.ContentType = "application/json; charset=utf-8";
//                            Response.Write(JSONString.ToString());
//                        }
//                        else
//                        {
//                            Message = "{\"responseType\": \"0\",\"Data\": [] }";


//                            Response.Clear();
//                            Response.ContentType = "application/json; charset=utf-8";
//                            Response.Write(Message.ToString());
//                        }


//                    }
//                }
//            }
//            catch (Exception ex)
//            { }
//        }



        public void GetTrending()
        {
            try
            {


                string Message = "";

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }



                DataTable table = DBHandler.GetData(string.Format(@"SELECT  * from trending ORDER BY Trend {0}", limit));

                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Trend"] = cityTI.ToTitleCase(dr["Trend"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1 ,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }
        
        public void GetNotification()
        {
            try
            {


                string Message = "";

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }

                }



                DataTable table = DBHandler.GetData(string.Format(@"SELECT  * from notification ORDER BY notification {0}", limit));

                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["notification"] = cityTI.ToTitleCase(dr["notification"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1 ,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }
       
        public void SearchText()
        {
            try
            {


                string Message = "";
                if (Request["ProductName"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductName"]))
                    {
                        string ProductName = Request["ProductName"].ToString();

                        string limit = "";
                        if (Request["limit"] != null)
                        {
                            if (!checkForSQLInjection(Request["limit"]))
                            {
                                limit = "limit " + Request.QueryString["limit"].ToString();
                            }

                        }



                        //                        DataTable table = DBHandler.GetData(string.Format(@"
                        //SELECT  p.id, lower(REPLACE(p.`Title`, '\'','')) AS Title FROM `products` p 
                        //WHERE  p.title LIKE '{0}%' and p.isactive = 1 and p.purchase like '%Loc%' ORDER BY p.title {1}
                        //
                        //", ProductName, limit));

                        DataTable dtCacheData = DBHandler.GetDataCache(string.Format(@"
SELECT  p.id, p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title FROM `products` p 
WHERE   p.isactive = 1 AND p.purchase LIKE '%Loc%'
UNION
SELECT 0 AS id, '' AS Slug, `used for` AS title FROM productdescription
ORDER BY  title"), "SearchTextAPI");


                        DataTable table = new DataTable();

                        DataRow[] rows = dtCacheData.Select("title like '" + ProductName + "%'");

                        if (rows.Length > 0)
                        {
                            table = rows.CopyToDataTable();
                        }
                        if (table.Rows.Count == 0)
                        {
                            table = DBHandler.GetData(string.Format(@"
SELECT  p.id, p.Slug, LOWER(REPLACE(p.`Title`, '\'','')) AS Title FROM `products` p 
WHERE  p.title LIKE '{0}%' AND p.isactive = 1 AND p.purchase LIKE '%Loc%'
UNION
SELECT 0 AS id, IFNULL((SELECT slug FROM products WHERE upc = products.`ShopifyProductID`),'') as Slug , `used for` AS title FROM productdescription 
WHERE  `used for` LIKE '{0}%' 
 ORDER BY  title  {1}
                        ", ProductName, limit));


                            try
                            {
                                if (Request.QueryString["Method"].ToString().ToLower() != "searchtext")
                                {
                                    //long a = DBHandler.InsertDataWithIDForOrder(string.Format("insert into apicalllogs(APIName, Platform,Created) values('{0}','{1}','{2}')", Request.QueryString["Method"].ToString().ToLower() + "-" + ProductName, "", DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));
                                }
                            }
                            catch (Exception ee)
                            { }
                        }
                        string Result = "Actual Result";
                         
                        var JSONString = new StringBuilder();

                        if (table.Rows.Count > 0)
                        {
                            if (table.Rows.Count > 0)
                            {
                                System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                                foreach (DataRow dr in table.Rows) // search whole table
                                {
                                    dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                                }

                                JSONString.Append("{\"ResponseType\": 1, \"Result\":\"" + Result + "\" ,\"Data\": [");
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    JSONString.Append("{");
                                    for (int j = 0; j < table.Columns.Count; j++)
                                    {
                                        if (j < table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                        else if (j == table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                        }
                                    }


                                    if (i == table.Rows.Count - 1)
                                    {
                                        JSONString.Append("}]");
                                    }
                                    else
                                    {
                                        JSONString.Append("},");
                                    }
                                }
                                JSONString.Append("}");
                            }

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(JSONString.ToString());
                        }
                        else
                        {
                            Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }
        
        public void AddInquiry()
        {
            try
            {
                if ( Request["BranchCode"] != null && Request["ProductID"] != null && Request["Type"] != null)
                {
                    if ( !checkForSQLInjection(Request["BranchCode"]) && !checkForSQLInjection(Request["ProductID"])
                        && !checkForSQLInjection(Request["Type"]))
                    {

                        string CustomerID = "";
                        //if (Request["CustomerID"] != null)
                        //{
                        //    if (!checkForSQLInjection(Request["CustomerID"]))
                        //    {
                        //        CustomerID = Request["CustomerID"].ToString();
                        //    }
                        //}
                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }




                        //CustomerID = Request.QueryString["CustomerID"].ToString();
                        string BranchCode = Request.QueryString["BranchCode"].ToString();
                        string ProductID = Request.QueryString["ProductID"].ToString();
                        string Type = Request.QueryString["Type"].ToString();
                        string PrescriptionURL = "";
                        if (Request["PrescriptionURL"] != null)
                        {
                            if (!checkForSQLInjection(Request["PrescriptionURL"]))
                            {
                                PrescriptionURL = Request.QueryString["PrescriptionURL"].ToString();
                            }
                        }

                        Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  inquiry(CustomerID,BranchCode,ProductID,Type,PrescriptionURL,Created) values('{0}','{1}','{2}','{3}','{4}','{5}')",
                                       CustomerID, BranchCode, ProductID, Type, PrescriptionURL, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        if (JSONID > 0)
                        {
                            string Message = "{\"responseType\": 1,\"message\": \"Record added successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot add Record at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Special characters not allowed\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void AddAddress()
        {
            try
            {
                //if ( Request["Address"] != null && Request["Latitude"] != null && Request["Longitude"] != null && Request["Type"] != null)
                //{
                //string Address = Request.QueryString["Address"].ToString().Replace("'","");
                //string Latitude = Request.QueryString["Latitude"].ToString().Replace("'", "");
                //string Longitude = Request.QueryString["Longitude"].ToString().Replace("'", "");
                //string NearestLandmark = Request.QueryString["NearestLandmark"].ToString().Replace("'", "");
                //string Type = Request.QueryString["Type"].ToString().Replace("'", "");
                //string City = Request.QueryString["City"].ToString().Replace("'", "");
                //string Area = Request.QueryString["Area"].ToString().Replace("'", "");

                string Address = "";
                string Latitude = "";
                string Longitude = "";
                string NearestLandmark = "";
                string Type = "";
                string City = "";
                string Area = "";


                try
                {
                    //String strPathAndQuery = HttpContext.Current.Request.Url.PathAndQuery;
                    String strUrl = HttpContext.Current.Request.Url.AbsoluteUri;

                    Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  tempaddresslink(Description) values('{0}')",strUrl.ToString()));


                }
                catch (Exception ee)
                { }

                if (!string.IsNullOrEmpty(Request.QueryString["Address"]))
                {
                    Address = Request.QueryString["Address"].ToString().Replace("'", "");
                }
                if (!string.IsNullOrEmpty(Request.QueryString["Latitude"]))
                {
                    Latitude = Request.QueryString["Latitude"].ToString().Replace("'", "");
                }
                if (!string.IsNullOrEmpty(Request.QueryString["Longitude"]))
                {
                    Longitude = Request.QueryString["Longitude"].ToString().Replace("'", "");
                }
                if (!string.IsNullOrEmpty(Request.QueryString["NearestLandmark"]))
                {
                    NearestLandmark = Request.QueryString["NearestLandmark"].ToString().Replace("'", "");
                }
                if (!string.IsNullOrEmpty(Request.QueryString["Type"]))
                {
                    Type = Request.QueryString["Type"].ToString().Replace("'", "");
                }
                if (!string.IsNullOrEmpty(Request.QueryString["City"]))
                {
                    City = Request.QueryString["City"].ToString().Replace("'", "");
                }
                if (!string.IsNullOrEmpty(Request.QueryString["Area"]))
                {
                    Area = Request.QueryString["Area"].ToString().Replace("'", "");
                }


                //if ( !checkForSQLInjection(Request["Address"]) && !checkForSQLInjection(Request["Latitude"]) && !checkForSQLInjection(Request["Longitude"]) && 
                //    !checkForSQLInjection(Request["NearestLandmark"]) && !checkForSQLInjection(Request["Type"]) && !checkForSQLInjection(Request["City"])
                //    && !checkForSQLInjection(Request["Area"]))
                //{

                if (!checkForSQLInjection(Address) && !checkForSQLInjection(Latitude) && !checkForSQLInjection(Longitude) &&
                     !checkForSQLInjection(NearestLandmark) && !checkForSQLInjection(Type) && !checkForSQLInjection(City)
                     && !checkForSQLInjection(Area))
                    {


                        //string CustomerID = Request.QueryString["CustomerID"].ToString();
                        string CustomerID = "";
                        //if (Request["CustomerID"] != null)
                        //{
                        //    if (!checkForSQLInjection(Request["CustomerID"]))
                        //    {
                        //        CustomerID = Request["CustomerID"].ToString();
                        //    }
                        //}


                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                    else
                    {
                        string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());

                        return;
                    }






                    DataTable dtSubscribe = DBHandler.GetData("SELECT * FROM customer WHERE ID = '" + CustomerID.Replace("'", "''") + "'");

                        if (dtSubscribe.Rows.Count > 0)
                        {
                            Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  customerddress(CustomerID,Address,Latitude,Longitude,NearestLandmark,Created,Type, City, Area,Location) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{1}')",
                                            dtSubscribe.Rows[0]["ID"].ToString(), Address, Latitude, Longitude, NearestLandmark, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), Type, City, Area));

                            if (JSONID > 0)
                            {
                                string Message = "{\"ResponseType\": 1,\"message\": \"Address added successfully\",\"AddressID\": \""+ JSONID + "\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                            }
                            else
                            {
                                string Message = "{\"ResponseType\": 0,\"message\": \"Cannot add address at the moment\",\"AddressID\": \""+ JSONID + "\"}";
                                
                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                            }
                        
                        }
                        else
                        {
                            string Message = "{\"ResponseType\": 0,\"message\": \"CustomerID not found\",\"AddressID\": \"0\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        
                    }
                    else
                    {
                        string Message = "{\"ResponseType\": 0,\"message\": \"Special characters not allowed\",\"AddressID\": \"0\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                //}
            }
            catch (Exception ex)
            { }
        }

        public void AddAddressV1(string json)
        {
            try
            {
                //if ( Request["Address"] != null && Request["Latitude"] != null && Request["Longitude"] != null && Request["Type"] != null)
                //{
                //string Address = Request.QueryString["Address"].ToString().Replace("'","");
                //string Latitude = Request.QueryString["Latitude"].ToString().Replace("'", "");
                //string Longitude = Request.QueryString["Longitude"].ToString().Replace("'", "");
                //string NearestLandmark = Request.QueryString["NearestLandmark"].ToString().Replace("'", "");
                //string Type = Request.QueryString["Type"].ToString().Replace("'", "");
                //string City = Request.QueryString["City"].ToString().Replace("'", "");
                //string Area = Request.QueryString["Area"].ToString().Replace("'", "");

                string Address = "";
                string Latitude = "";
                string Longitude = "";
                string NearestLandmark = "";
                string Type = "";
                string City = "";
                string Area = "";

                JObject json1 = JObject.Parse(json);

                try
                {
                    //String strPathAndQuery = HttpContext.Current.Request.Url.PathAndQuery;
                    String strUrl = HttpContext.Current.Request.Url.AbsoluteUri;

                    Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  tempaddresslink(Description,HowItWorks) values('{0}','{1}')", strUrl.ToString(), json));


                }
                catch (Exception ee)
                { }


                if (json1["Address"] != null)
                {
                    Address = json1["Address"].ToString().Replace("'","''");
                }

                if (json1["Latitude"] != null)
                {
                    Latitude = json1["Latitude"].ToString().Replace("'", "''");
                }

                if (json1["Longitude"] != null)
                {
                    Longitude = json1["Longitude"].ToString().Replace("'", "''");
                }

                if (json1["NearestLandmark"] != null)
                {
                    NearestLandmark = json1["NearestLandmark"].ToString().Replace("'", "''");
                }

                if (json1["Type"] != null)
                {
                    Type = json1["Type"].ToString();
                }

                if (json1["City"] != null)
                {
                    City = json1["City"].ToString();
                }

                if (json1["Area"] != null)
                {
                    Area = json1["Area"].ToString();
                } 
                 
                //if ( !checkForSQLInjection(Request["Address"]) && !checkForSQLInjection(Request["Latitude"]) && !checkForSQLInjection(Request["Longitude"]) && 
                //    !checkForSQLInjection(Request["NearestLandmark"]) && !checkForSQLInjection(Request["Type"]) && !checkForSQLInjection(Request["City"])
                //    && !checkForSQLInjection(Request["Area"]))
                //{

                //if (!checkForSQLInjection(Address) && !checkForSQLInjection(Latitude) && !checkForSQLInjection(Longitude) &&
                //     !checkForSQLInjection(NearestLandmark) && !checkForSQLInjection(Type) && !checkForSQLInjection(City)
                //     && !checkForSQLInjection(Area))
                //{


                    //string CustomerID = Request.QueryString["CustomerID"].ToString();
                    string CustomerID = "";
                    //if (Request["CustomerID"] != null)
                    //{
                    //    if (!checkForSQLInjection(Request["CustomerID"]))
                    //    {
                    //        CustomerID = Request["CustomerID"].ToString();
                    //    }
                    //}





                    //if (Request.QueryString["CustomerToken"] != null)
                    if (Request.Headers["X-Authorization"] != null)
                    {
                        string CustomerToken = Request.Headers["X-Authorization"].ToString();
                        string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                        CustomerID = ValidateCustomerToken.Split(',')[1];
                        if (ValidateCustomerToken.Split(',')[0] != "Valid")
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                            //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());

                        return;
                    }






                    DataTable dtSubscribe = DBHandler.GetData("SELECT * FROM customer WHERE ID = '" + CustomerID.Replace("'", "''") + "'");

                    if (dtSubscribe.Rows.Count > 0)
                    {
                        Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  customerddress(CustomerID,Address,Latitude,Longitude,NearestLandmark,Created,Type, City, Area,Location) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{1}')",
                                        dtSubscribe.Rows[0]["ID"].ToString(), Address, Latitude, Longitude, NearestLandmark, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), Type, City, Area));

                        if (JSONID > 0)
                        {
                            string Message = "{\"ResponseType\": 1,\"message\": \"Address added successfully\",\"AddressID\": \"" + JSONID + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"ResponseType\": 0,\"message\": \"Cannot add address at the moment\",\"AddressID\": \"" + JSONID + "\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }

                    }
                    else
                    {
                        string Message = "{\"ResponseType\": 0,\"message\": \"CustomerID not found\",\"AddressID\": \"0\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }

                //}
                //else
                //{
                //    string Message = "{\"ResponseType\": 0,\"message\": \"Special characters not allowed\",\"AddressID\": \"0\"}";

                //    Response.Clear();
                //    Response.ContentType = "application/json; charset=utf-8";
                //    Response.Write(Message);
                //}
                //}
            }
            catch (Exception ex)
            { }
        }


        public void GetAddress()
        {
            try
            {
                //if (Request["CustomerID"] != null)
                //{
                //    if (!checkForSQLInjection(Request["CustomerID"]))
                //    {
                var token = "";
                string CustomerID = "";
                //if (Request["CustomerID"] != null)
                //{
                //    if (!checkForSQLInjection(Request["CustomerID"]))
                //    {
                //        CustomerID = Request["CustomerID"].ToString();
                //    }
                //}


               if (Request.Headers["X-Authorization"] != null)
                {
                     string CustomerToken = Request.Headers["X-Authorization"].ToString();
                    string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                    CustomerID = ValidateCustomerToken.Split(',')[1];
                    if (ValidateCustomerToken.Split(',')[0] != "Valid")
                    {
                        string Message = "{\"ResponseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                        //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());

                        return;
                    }
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }

                DataTable table = DBHandler.GetData(string.Format("select * from customerddress where customerid = '{0}' order by id desc", CustomerID));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\\","") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\\", "") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"ResponseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


                //    }
                //}
            }
            catch (Exception ex)
            { }
        }


        public void CheckOrderStatus()
        {
            try
            {
                if (Request["OrderID"] != null)
                {
                    if (!checkForSQLInjection(Request["OrderID"]))
                    {
                        string CustomerID = "";
                        //if (Request["CustomerID"] != null)
                        //{
                        //    if (!checkForSQLInjection(Request["CustomerID"]))
                        //    {
                        //        CustomerID = " and customerid = " + Request["CustomerID"].ToString();
                        //    }
                        //}

                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = " and customerid = " + ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }



                        DataTable table = DBHandler.GetData(string.Format(@"SELECT ID, IFNULL(OrderStatus,'Pending') AS FinancialStatus, Fulfillment_Status AS FulfillmentStatus , DeliveryStatus, CancelReason, 
DATE_FORMAT(Created_at, '%d/%m/%Y | %r')  as Created_at, 
CASE WHEN Assigned_at = Created_at THEN '' ELSE  DATE_FORMAT(Assigned_at, '%d/%m/%Y | %r')  END AS Assigned_at, 
CASE WHEN Picked_at = Created_at THEN '' ELSE  DATE_FORMAT(Picked_at, '%d/%m/%Y | %r')  END AS Picked_at,                         
CASE WHEN Cancelled_at = Created_at THEN '' ELSE DATE_FORMAT(Cancelled_at, '%d/%m/%Y | %r')  END AS Cancelled_at, 
CASE WHEN Delivered_at = Created_at THEN '' ELSE DATE_FORMAT(Delivered_at, '%d/%m/%Y | %r')  END AS Delivered_at, 
CASE WHEN Verified_at = Created_at THEN '' ELSE DATE_FORMAT(Verified_at, '%d/%m/%Y | %r')  END AS Verified_at FROM orders WHERE ID = '{0}'  {1} ", Request["OrderID"].ToString(),CustomerID));


                        if (table.Rows.Count == 0)
                        {
                            table = DBHandler.GetData(string.Format(@"SELECT ID, IFNULL(OrderStatus,'Pending') AS FinancialStatus, Fulfillment_Status AS FulfillmentStatus , DeliveryStatus, CancelReason, 
DATE_FORMAT(Created_at, '%d/%m/%Y | %r')  as Created_at, 
CASE WHEN Assigned_at = Created_at THEN '' ELSE  DATE_FORMAT(Assigned_at, '%d/%m/%Y | %r')  END AS Assigned_at, 
CASE WHEN Picked_at = Created_at THEN '' ELSE  DATE_FORMAT(Picked_at, '%d/%m/%Y | %r')  END AS Picked_at,                         
CASE WHEN Cancelled_at = Created_at THEN '' ELSE  DATE_FORMAT(Cancelled_at, '%d/%m/%Y | %r')  END AS Cancelled_at, 
CASE WHEN Delivered_at = Created_at THEN '' ELSE  DATE_FORMAT(Delivered_at, '%d/%m/%Y | %r')  END AS Delivered_at, 
CASE WHEN Verified_at = Created_at THEN '' ELSE  DATE_FORMAT(Verified_at, '%d/%m/%Y | %r')  END AS Verified_at FROM ordersarchive WHERE ID = '{0}' {1} ", Request["OrderID"].ToString(), CustomerID));
                        }

                        var JSONString = new StringBuilder();
                        if (table.Rows.Count > 0)
                        {
                            if (table.Rows.Count > 0)
                            {

                                JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                                for (int i = 0; i < table.Rows.Count; i++)
                                {
                                    JSONString.Append("{");
                                    for (int j = 0; j < table.Columns.Count; j++)
                                    {
                                        if (j < table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                        else if (j == table.Columns.Count - 1)
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                        }
                                    }


                                    if (i == table.Rows.Count - 1)
                                    {
                                        JSONString.Append("}]");
                                    }
                                    else
                                    {
                                        JSONString.Append("},");
                                    }
                                }
                                JSONString.Append("}");
                            }

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(JSONString.ToString());
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void CheckVoucher()
        {
            string DiscountAmount = "0";
            string voucherMessage = "";
            string Gateway = "";
            string CapAmount = "0";
            string Type = "";
            // if (Request["Voucher"] != null && Request["City"] != null && Request["NetTotal"] != null)
            if (Request["Voucher"] != null)
            {
                if (!checkForSQLInjection(Request["Voucher"]))
                {

                    string Voucher = Request.QueryString["Voucher"].ToString().Replace("'", "");
                    //string City = Request.QueryString["City"].ToString().Replace("'", "");
                    //string NetTotal = Request.QueryString["NetTotal"].ToString().Replace("'", "");

                    //if (Int32.Parse(NetTotal) > 999)
                    //{
                    DataTable table = DBHandler.GetData(string.Format("SELECT *, '' as ApplicableCategoriesName FROM discountvouchers WHERE CustomerVoucherCode  = '{0}' and isactive = 1", Voucher));




                    var JSONString = new StringBuilder();
                    if (table.Rows.Count > 0)
                    {
                        try
                        {
                            DataTable dtCategoryName = DBHandler.GetData(string.Format("SELECT `name` FROM `categories_new` WHERE id IN ({0})", table.Rows[0]["ApplicableCategories"].ToString()));

                            if (dtCategoryName != null)
                            {
                                if (dtCategoryName.Rows.Count > 0)
                                {
                                    for (int aa = 0; aa < dtCategoryName.Rows.Count; aa++)
                                    {
                                        table.Rows[0]["ApplicableCategoriesName"] += dtCategoryName.Rows[aa]["name"].ToString() + ",";
                                    }

                                }
                            }


                            table.Rows[0]["ApplicableCategoriesName"] = table.Rows[0]["ApplicableCategoriesName"].ToString().TrimEnd(',');
                        }
                        catch (Exception ee)
                        { }
                        if (table.Rows.Count > 0)
                        {
                            JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < table.Columns.Count; j++)
                                {
                                    if (j < table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }
                                    else if (j == table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                    }



                                }


                                if (i == table.Rows.Count - 1)
                                {
                                    JSONString.Append("}]");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                            JSONString.Append("}");
                        }

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(JSONString.ToString());
                    }
                    else
                    {
                        string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());
                    }

                }
            }
        }

        public void CheckVoucherNew(string json)
        {

            VoucherRoot f = JsonConvert.DeserializeObject<VoucherRoot>(json);


            string branchCode = f.branchCode;
            string customerID = "0";
            string Message = "Voucher is applied";
            bool IsValid = false;

            string creditCardToken = f.creditCardToken;
            string voucherCode = f.voucherCode;
            double orderSubtotal = f.orderSubtotal;
            double orderTotal = f.orderTotal;
            string paymentType = f.paymentType;

            if (f.customerID != null)
            {
                if (f.customerID != "")
                {
                    customerID = f.customerID;
                }
            }

            Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into checkvoucherjson(JSON,BranchCode,CustomerID,created) values('{0}','{1}','{2}','{3}')", json, branchCode, customerID, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));




           if (Request.Headers["X-Authorization"] != null)
            {
                if (Request.QueryString["CustomerToken"] != "undefined")
                {
                     string CustomerToken = Request.Headers["X-Authorization"].ToString();
                    string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, customerID); //"Valid"; // 
                    customerID = ValidateCustomerToken.Split(',')[1];
                    if (ValidateCustomerToken.Split(',')[0] != "Valid")
                    {
                        //string Message1 = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";
                        Message = "Invalid Customer Token";
                        IsValid = false;
                        //string Message = "{\"responseType\": \"0\",\"Data\": [] }";
                        VoucherResponseRoot vr = new VoucherResponseRoot();
                        vr.ResponseType = "";
                        vr.isValid = IsValid; // Convert.ToBoolean(table.Rows[0]["IsActive"]);
                        vr.message = Message;//table.Rows[0]["IsActive"].ToString();
                        vr.voucherCode = "";
                        vr.voucherAmount = "";

                        string s = JsonConvert.SerializeObject(vr, Formatting.Indented);


                        try
                        {
                            int a1122 = DBHandler.InsertDataWithID(string.Format("update checkvoucherjson set ResponseJSON = '{0}' , isValid = {1} , Message = '{2}', VoucherCode = '{3}' where id = '{4}'", s, IsValid, Message, voucherCode, JSONID));

                        }
                        catch (Exception exxxx111)
                        { }


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(s.ToString());

                        return;
                    }
                }
                else
                {
                    Message = "Customer login is required to apply voucher";
                    IsValid = false;


                    VoucherResponseRoot vr = new VoucherResponseRoot();
                    vr.ResponseType = "";
                    vr.isValid = IsValid; // Convert.ToBoolean(table.Rows[0]["IsActive"]);
                    vr.message = Message;//table.Rows[0]["IsActive"].ToString();
                    vr.voucherCode = "";
                    vr.voucherAmount = "";

                    string s = JsonConvert.SerializeObject(vr, Formatting.Indented);


                    try
                    {
                        int a1122 = DBHandler.InsertDataWithID(string.Format("update checkvoucherjson set ResponseJSON = '{0}' , isValid = {1} , Message = '{2}', VoucherCode = '{3}' where id = '{4}'", s, IsValid, Message, voucherCode, JSONID));

                    }
                    catch (Exception exxxx111)
                    { }


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(s.ToString());


                    return;

                }
            }
            else
            {
                string Message1 = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message1.ToString());

                return;
            }



            if (voucherCode != "")
            {
                if (!checkForSQLInjection(voucherCode))
                {

                    string Voucher = f.voucherCode; // Request.QueryString["Voucher"].ToString().Replace("'", "");
                    //string City = Request.QueryString["City"].ToString().Replace("'", "");
                    //string NetTotal = Request.QueryString["NetTotal"].ToString().Replace("'", "");

                    //if (Int32.Parse(NetTotal) > 999)
                    //{
                    DataTable table = DBHandler.GetData(string.Format("SELECT *, '' as ApplicableCategoriesName, ifnull(CapAmount,0) as CapAmount1 FROM discountvouchers WHERE CustomerVoucherCode  = '{0}' and isactive = 1 and '{1}' between DATE_SUB(startdatetime , INTERVAL 1 DAY)  AND enddatetime", Voucher, DateTime.Now.ToString("yyyy-MM-dd")));
                    double DiscountAmount = 0;
                    var JSONString = new StringBuilder();
                    if (table.Rows.Count > 0)
                    {
                        try
                        {





                            ///////////////////////Check if voucher is for customer only -- 17-Nov-2022
                            if (Convert.ToBoolean(table.Rows[0]["IsCustomerVoucherCode"]) == true)
                            {
                                DataTable table1 = DBHandler.GetData(string.Format("SELECT * FROM `customerVoucher` c INNER JOIN discountvouchers d ON c.voucherid = d.id where c.customerid = '{0}' and d.CustomerVoucherCode  = '{1}' and isused = 0 and '{2}' between DATE_SUB(startdate , INTERVAL 1 DAY) AND enddate", f.customerID, Voucher, DateTime.Now.ToString("yyyy-MM-dd")));

                                try
                                {
                                    if (Voucher.ToLower() == "sihacharge" || Voucher.ToLower() == "healthxcharge")
                                    {
                                        table1 = DBHandler.GetData(string.Format("SELECT * FROM `customerVoucher` c INNER JOIN discountvouchers d ON c.voucherid = d.id where c.customerid = '{0}' and d.CustomerVoucherCode  = '{1}'  and '{2}' between DATE_SUB(startdate , INTERVAL 1 DAY) AND enddate", f.customerID, Voucher, DateTime.Now.ToString("yyyy-MM-dd")));
                                    }
                                }
                                catch (Exception ee)
                                { }
                                if (table1.Rows.Count > 0)
                                {
                                    if (table.Rows[0]["DiscountType"].ToString().ToLower() == "percent")
                                    {
                                        DiscountAmount = (Convert.ToDouble(f.orderSubtotal) * (Convert.ToDouble(table.Rows[0]["Amount"]) / 100));
                                        if (Convert.ToDouble(table.Rows[0]["CapAmount1"]) > 0)
                                        {
                                            if (DiscountAmount > Convert.ToDouble(table.Rows[0]["CapAmount1"]))
                                            {
                                                DiscountAmount = Convert.ToDouble(table.Rows[0]["CapAmount1"]);
                                            }
                                        }

                                        IsValid = true;
                                    }
                                    else
                                    {
                                        DiscountAmount =  Convert.ToDouble(table.Rows[0]["Amount"]);
                                        IsValid = true;
                                    }
                                }
                                else
                                {
                                    //IsValid = false;
                                    Message = "Voucher is not applicable."; 
                                }
                            }

                            ///////////////////////For remaining vouchers(First check ApplicableCategories and then check ApplicableProducts as per Irham Instructions )-- 17-Nov-2022
                            else if (Convert.ToBoolean(table.Rows[0]["IsCustomerVoucherCode"]) == false)
                            {
                                if (f.orderdata.Count > 0)
                                {
                                    string[] ApplicableCategories = table.Rows[0]["ApplicableCategories"].ToString().Split(',');
                                    if (table.Rows[0]["ApplicableCategories"].ToString() == "")
                                    {
                                        ApplicableCategories = new string[0];
                                    }

                                    string[] ApplicableProducts = table.Rows[0]["ApplicableProducts"].ToString().Split(',');
                                    if (table.Rows[0]["ApplicableProducts"].ToString() == "")
                                    {
                                        ApplicableProducts = new string[0];
                                    }

                                    if (ApplicableCategories.Length > 0)
                                    {
                                        for (int a = 0; a < f.orderdata.Count; a++)
                                        {
                                            DataTable dt = DBHandler.GetData(string.Format("SELECT CategoryID FROM products WHERE id = '{0}'", f.orderdata[a].ItemID.ToString()));

                                            if (dt.Rows.Count > 0)
                                            {
                                                for (int b = 0; b < ApplicableCategories.Length; b++)
                                                {
                                                    if (dt.Rows[0]["CategoryID"].ToString() == ApplicableCategories[b].ToString())
                                                    {
                                                        if (table.Rows[0]["DiscountType"].ToString().ToLower() == "percent")
                                                        {
                                                            DiscountAmount = DiscountAmount + ((Convert.ToDouble(f.orderdata[a].Price) * Convert.ToDouble(f.orderdata[a].Quantity)) * (Convert.ToDouble(table.Rows[0]["Amount"]) / 100));
                                                            if (Convert.ToDouble(table.Rows[0]["CapAmount1"]) > 0)
                                                            {
                                                                if (DiscountAmount > Convert.ToDouble(table.Rows[0]["CapAmount1"]))
                                                                {
                                                                    DiscountAmount = Convert.ToDouble(table.Rows[0]["CapAmount1"]);
                                                                }
                                                            }

                                                            IsValid = true;
                                                            //break;
                                                        }
                                                        else
                                                        {
                                                            DiscountAmount = Convert.ToDouble(table.Rows[0]["Amount"]);//DiscountAmount + ((Convert.ToDouble(f.orderdata[a].Price) * Convert.ToDouble(f.orderdata[a].Quantity)) - Convert.ToDouble(table.Rows[0]["Amount"]));
                                                            IsValid = true;
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //IsValid = false;
                                                        Message = "Discount cannot be applied to this category";
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (ApplicableProducts.Length > 0)
                                    {
                                        for (int a = 0; a < f.orderdata.Count; a++)
                                        {
                                            //DataTable dt = DBHandler.GetData(string.Format("SELECT CategoryID FROM products WHERE id = '{0}'", f.orderdata[a].ItemID.ToString()));

                                            for (int b = 0; b < ApplicableProducts.Length; b++)
                                            {
                                                if (f.orderdata[a].ItemID.ToString() == ApplicableProducts[b].ToString())
                                                {
                                                    if (table.Rows[0]["DiscountType"].ToString().ToLower() == "percent")
                                                    {
                                                        DiscountAmount = DiscountAmount + (Convert.ToDouble(f.orderdata[a].Price) * (Convert.ToDouble(table.Rows[0]["Amount"]) / 100));
                                                        if (Convert.ToDouble(table.Rows[0]["CapAmount1"]) > 0)
                                                        {
                                                            if (DiscountAmount > Convert.ToDouble(table.Rows[0]["CapAmount1"]))
                                                            {
                                                                DiscountAmount = Convert.ToDouble(table.Rows[0]["CapAmount1"]);
                                                            }
                                                        }

                                                        IsValid = true;
                                                    }
                                                    else
                                                    {
                                                        DiscountAmount = Convert.ToDouble(table.Rows[0]["Amount"]);// DiscountAmount + (Convert.ToDouble(f.orderdata[a].Price) - Convert.ToDouble(table.Rows[0]["Amount"]));
                                                        IsValid = true;
                                                    }
                                                }
                                                else
                                                {
                                                    //IsValid = false;
                                                    Message = "Discount cannot be applied to this category";
                                                }
                                            }

                                        }
                                    }


                                }
                            }
                            else
                            {
                                //IsValid = false;
                                Message = "Invalid Voucher";
                            }

                             
                        }
                        catch (Exception ee)
                        { }

                        if (DiscountAmount < 0)
                        {
                            Message = "Discount amount cannot be negative. Please add more items";
                        }

                        if (Convert.ToBoolean(table.Rows[0]["IsNewCustomer"]))
                        {
                            DataTable dtCheckCustomerOrder = DBHandler.GetData(string.Format(@"select ordercount from customer where id = '{0}'", customerID));

                            if (dtCheckCustomerOrder.Rows.Count > 0)
                            {
                                if (Convert.ToInt32(dtCheckCustomerOrder.Rows[0]["ordercount"]) > 0)
                                {
                                    Message = "New customer voucher cannot be applied to old customer";
                                    IsValid = false;
                                }
                            }
                        }

                        try
                        {
                            if (paymentType != null)
                            {
                                if (paymentType == "Cash On Delivery")
                                {
                                    if (!table.Rows[0]["PaymentMethods"].ToString().Contains("cod"))
                                    {
                                        Message = "This voucher can only apply on credit card";
                                        IsValid = false;
                                    }
                                }

                                else if (paymentType == "CreditCard")
                                {
                                    if (!table.Rows[0]["PaymentMethods"].ToString().Contains("card"))
                                    {
                                        Message = "This voucher can only apply on cash";
                                        IsValid = false;
                                    }
                                }
                            }
                            else
                            {
                                Message = "Please select payment type";
                                IsValid = false;
                            }
                        }
                        catch (Exception ex)
                        { }



                        try
                        {
                            ///////////////////////Check if voucher is for for branch referral only -- 01-Mar-2023
                            if (Convert.ToBoolean(table.Rows[0]["IsBranchReferralVouchers"]) == true)
                            {
                                //string CustomerID = Request.QueryString["CustomerID"].ToString();
                                DataTable dtOrders = DBHandler.GetData(string.Format(@"
SELECT SUM(TotalOrder) AS TotalOrder FROM 
(
SELECT COUNT(ID) AS TotalOrder
FROM orders WHERE customerid = '{0}'
UNION
SELECT COUNT(ID) AS TotalOrder
FROM ordersarchive WHERE customerid = '{0}'
) AS a
", customerID));
                                if (dtOrders.Rows.Count > 0)
                                {
                                    if (Convert.ToInt32(dtOrders.Rows[0]["TotalOrder"]) > 0)
                                    {
                                        Message = "Branch referral voucher cannot be applied to old customer";
                                        IsValid = false;
                                    }
                                }
                            }
                            ///////////////////////End Check if voucher is for for branch referral only -- 01-Mar-2023
                        }
                        catch (Exception ee)
                        { }



                        try
                        {
                            ///////////////////////Check if voucher is for multiple use by single user-- 16-May-2023
                            if (Convert.ToInt32(table.Rows[0]["NumberOfTransactions"]) > 0 && Convert.ToInt32(table.Rows[0]["NumberOfDays"]) > 0)
                            {

                                string StartDate = DateTime.Now.AddDays(-Convert.ToInt32(table.Rows[0]["NumberOfDays"])).ToString("yyyy-MM-dd 23:59:59");
                                string EndDate = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd 00:00:00");

                                //string CustomerID = Request.QueryString["CustomerID"].ToString();
                                DataTable dtOrders = DBHandler.GetData(string.Format(@"
SELECT COUNT(*) as TotalOrders FROM orders WHERE customerid = '{0}' AND vouchercode = '{1}' AND createdat BETWEEN '{2}' AND '{3}' and gateway = 'Paid'
", customerID, voucherCode , StartDate, EndDate));
                                if (dtOrders.Rows.Count > 0)
                                {
                                    if (Convert.ToInt32(dtOrders.Rows[0]["TotalOrders"]) >= Convert.ToInt32(table.Rows[0]["NumberOfTransactions"]))
                                    {
                                        Message = "Voucher usage limit reached for this customer.";
                                        IsValid = false;
                                    }
                                }
                            }
                            ///////////////////////End Check if voucher is for multiple use by single user-- 16-May-2023
                        }
                        catch (Exception ee)
                        { }

                        try
                        {
                            ///////////////////////Check if voucher is for multiple use by single user-- 16-May-2023
                            if (Convert.ToInt32(table.Rows[0]["MinimumOrderValue"]) > 0)
                            {

                                if (f.orderSubtotal < Convert.ToDouble(table.Rows[0]["MinimumOrderValue"]))
                                {
                                    //Message = "Minimum " + table.Rows[0]["MinimumOrderValue"].ToString() + " amount items should be added in cart to avail this discount";
                                    Message = "This voucher is applicable for orders totaling " + table.Rows[0]["MinimumOrderValue"].ToString() + " rupees or above.";
                                    IsValid = false;
                                }
                            }
                            ///////////////////////End Check if voucher is for multiple use by single user-- 16-May-2023
                        }
                        catch (Exception ee)
                        { }



                        VoucherResponseRoot vr = new VoucherResponseRoot();
                        vr.ResponseType = table.Rows[0]["Name"].ToString();
                        vr.isValid = IsValid; // Convert.ToBoolean(table.Rows[0]["IsActive"]);
                        vr.message = Message;//table.Rows[0]["IsActive"].ToString();
                        vr.voucherCode = Voucher;
                        vr.voucherAmount = DiscountAmount.ToString();

                        string s = JsonConvert.SerializeObject(vr, Formatting.Indented);


                        try
                        {
                            int a1122 = DBHandler.InsertDataWithID(string.Format("update checkvoucherjson set ResponseJSON = '{0}' , isValid = {1} , Message = '{2}', VoucherCode = '{3}' where id = '{4}'", s , IsValid , Message, voucherCode, JSONID));

                        }
                        catch (Exception exxxx111)
                        { }


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(s.ToString());



                    }
                    else
                    {
                        VoucherResponseRoot vr = new VoucherResponseRoot();
                        vr.ResponseType = voucherCode;
                        vr.isValid = false; // Convert.ToBoolean(table.Rows[0]["IsActive"]);
                        vr.message = "Voucher is either inactive or expired.";//table.Rows[0]["IsActive"].ToString();
                        vr.voucherCode = Voucher;
                        vr.voucherAmount = "0";

                        string s = JsonConvert.SerializeObject(vr, Formatting.Indented);

                        try
                        {
                            int a1122 = DBHandler.InsertDataWithID(string.Format("update checkvoucherjson set ResponseJSON = '{0}' , isValid = {1} , Message = '{2}', VoucherCode = '{3}' where id = '{4}'", s, IsValid, vr.message, voucherCode, JSONID));

                        }
                        catch (Exception exxxx111)
                        { }

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(s.ToString());
                        //string Message1 = "{\"responseType\": \"0\",\"Data\": [\"Voucher is either inactive or expired.\"] }";


                        //Response.Clear();
                        //Response.ContentType = "application/json; charset=utf-8";
                        //Response.Write(Message1.ToString());
                    }

                }
            }
        }

        public void GetVoucher()
        {
            try
            {

                string Type = "";
                string Condition = "";
                string CustomerID= "0";
                if (Request["Type"] != null)
                {
                    if (!checkForSQLInjection(Request["Type"]))
                    {
                        Type = Request["Type"].ToString();

                        if (Type.ToLower() == "used")
                        {
                            Condition = " and isused = 1";
                        }

                        if (Type.ToLower() == "unused")
                        {
                            Condition = " and isused = 0";
                        }
                        
                        if (Type.ToLower() == "expire")
                        {
                            Condition = string.Format(" and '{0}' > enddate", DateTime.Now.ToString("yyyy-MM-dd"));
                        }
                    }
                }

                if (Request["CustomerID"] != null)
                {
                    if (!checkForSQLInjection(Request["CustomerID"]))
                    {
                        CustomerID = Request["CustomerID"].ToString();
                    }
                }

                DataTable table = DBHandler.GetData(string.Format("SELECT dv.Name, dv.VoucherCode, dv.CustomerVoucherCode, cv.EndDate AS EndDateTime, cv.CustomerID FROM customerVoucher cv INNER JOIN discountvouchers dv ON cv.voucherid = dv.id where cv.CustomerID = {0} {1} ", CustomerID, Condition));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }

        public void MyOrders()
        {
            //if (Request.QueryString["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {

            string CustomerID = "";
            //if (Request["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {
            //        CustomerID = Request["CustomerID"].ToString();
            //    }
            //}

           if (Request.Headers["X-Authorization"] != null)
            {
                 string CustomerToken = Request.Headers["X-Authorization"].ToString();
                string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                CustomerID = ValidateCustomerToken.Split(',')[1];
                if (ValidateCustomerToken.Split(',')[0] != "Valid")
                {
                    string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                    //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }
            }
            else
            {
                string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());

                return;
            }


            string limit = "";
            if (Request["limit"] != null)
            {
                if (!checkForSQLInjection(Request["limit"]))
                {
                    limit = "limit " + Request.QueryString["limit"].ToString();
                }

            }





            //string CustomerID = Request.QueryString["CustomerID"].ToString();
            DataTable table = DBHandler.GetData(string.Format(@"
SELECT ID, ''  AS CustomerName, Total, TRIM(REPLACE(REPLACE(REPLACE(REPLACE(IFNULL(`ShippingAddress`,''),'\t',''),'\n',''),'\r',''),'\""',''))   AS ShippingAddress, CASE WHEN IFNULL(OrderStatus,'Pending') = 'Rejected' THEN 'Pending' ELSE IFNULL(OrderStatus,'Pending') END AS OrderStatus,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') as Created_at, (SELECT `title` FROM branch WHERE id = orders.`branchid`) AS OutletName
,-- IFNULL((SELECT COUNT(*) FROM `orderdetail` WHERE orderid = orders.`ID`),0) 
'0' AS TotalItems 
FROM orders WHERE customerid = '{0}' and orderstatus != 'Discard'
UNION
SELECT ID,  '' as  CustomerName, Total, TRIM(REPLACE(REPLACE(REPLACE(REPLACE(IFNULL(`ShippingAddress`,''),'\t',''),'\n',''),'\r',''),'\""',''))   AS ShippingAddress, CASE WHEN IFNULL(OrderStatus,'Pending') = 'Rejected' THEN 'Pending' ELSE IFNULL(OrderStatus,'Pending') END AS OrderStatus,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r')  as Created_at, 
(SELECT `title` FROM branch WHERE id = ordersarchive.`branchid`) AS OutletName 
, -- IFNULL((SELECT COUNT(*) FROM `orderdetailarchive` WHERE orderid = ordersarchive.`ID`),0) 
'0' AS TotalItems
FROM ordersarchive WHERE customerid = '{0}' and orderstatus != 'Discard'

ORDER BY id DESC {1}", CustomerID, limit));
            var JSONString = new StringBuilder();
            if (table.Rows.Count > 0)
            {
                if (table.Rows.Count > 0)
                {
                    JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                    for (int i = 0; i < table.Rows.Count; i++)
                    {
                        JSONString.Append("{");
                        for (int j = 0; j < table.Columns.Count; j++)
                        {
                            if (j < table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                            }
                            else if (j == table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                            }



                        }


                        if (i == table.Rows.Count - 1)
                        {
                            JSONString.Append("}]");
                        }
                        else
                        {
                            JSONString.Append("},");
                        }
                    }
                    JSONString.Append("}");
                }

                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(JSONString.ToString());
            }
            else
            {
                string Message = "{\"ResponseType\": \"0\",\"Data\": [] }";


                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());
            }

            //    }
            //}
        }


        public void MyPendingOrders()
        {
            //if (Request.QueryString["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {
            string CustomerID = "";
            //if (Request["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {
            //        CustomerID = Request["CustomerID"].ToString();
            //    }
            //}


           if (Request.Headers["X-Authorization"] != null)
            {
                 string CustomerToken = Request.Headers["X-Authorization"].ToString();
                string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                CustomerID = ValidateCustomerToken.Split(',')[1];
                if (ValidateCustomerToken.Split(',')[0] != "Valid")
                {
                    string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                    //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }
            }
            else
            {
                string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());

                return;
            }



            //            DataTable table = DBHandler.GetData(string.Format(@"SELECT ID,  CustomerName, Total, REPLACE(ShippingAddress,'\r\n','') AS ShippingAddress, ifnull(OrderStatus,'Pending') as OrderStatus, DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS  Created_at, (SELECT `title` FROM branch WHERE id = orders.`branchid`) AS OutletName FROM orders WHERE customerid = '{0}' AND ifnull(OrderStatus,'Pending') in ('Pending', 'Assigned_To_DSP', 'Assigned_To_Rider')
            //ORDER BY id DESC", CustomerID));

            DataTable table = DBHandler.GetData(string.Format(@"SELECT ID,  TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName, Total, REPLACE(ShippingAddress,'\r\n','') AS ShippingAddress, IFNULL(OrderStatus,'Pending') AS OrderStatus, DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS  Created_at, (SELECT `title` FROM branch WHERE id = orders.`branchid`) AS OutletName FROM orders WHERE customerid = '{0}' AND IFNULL(OrderStatus,'Pending') IN ('Pending', 'Assigned_To_DSP', 'Assigned_To_Rider')
UNION
SELECT ID, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName, Total, REPLACE(ShippingAddress,'\r\n','') AS ShippingAddress, IFNULL(OrderStatus,'Pending') AS OrderStatus, DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS  Created_at, (SELECT `title` FROM branch WHERE id = ordersarchive.`branchid`) AS OutletName FROM ordersarchive WHERE customerid = '{0}' AND IFNULL(OrderStatus,'Pending') IN ('Pending', 'Assigned_To_DSP', 'Assigned_To_Rider')
ORDER BY id DESC", CustomerID));



            var JSONString = new StringBuilder();
            if (table.Rows.Count > 0)
            {
                if (table.Rows.Count > 0)
                {
                    JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                    for (int i = 0; i < table.Rows.Count; i++)
                    {
                        JSONString.Append("{");
                        for (int j = 0; j < table.Columns.Count; j++)
                        {
                            if (j < table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                            }
                            else if (j == table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                            }



                        }


                        if (i == table.Rows.Count - 1)
                        {
                            JSONString.Append("}]");
                        }
                        else
                        {
                            JSONString.Append("},");
                        }
                    }
                    JSONString.Append("}");
                }

                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(JSONString.ToString());
            }
            else
            {
                string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());
            }

            //    }
            //}
        }

        public void MyCancelledOrders()
        {
            //if (Request.QueryString["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {

            string CustomerID = "";
            //if (Request["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {
            //        CustomerID = Request["CustomerID"].ToString();
            //    }
            //}


           if (Request.Headers["X-Authorization"] != null)
            {
                 string CustomerToken = Request.Headers["X-Authorization"].ToString();
                string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                CustomerID = ValidateCustomerToken.Split(',')[1];
                if (ValidateCustomerToken.Split(',')[0] != "Valid")
                {
                    string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                    //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }
            }
            else
            {
                string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());

                return;
            }

            string limit = "";
            if (Request["limit"] != null)
            {
                if (!checkForSQLInjection(Request["limit"]))
                {
                    limit = "limit " + Request.QueryString["limit"].ToString();
                }

            }

            //string CustomerID = Request.QueryString["CustomerID"].ToString();
            DataTable table = DBHandler.GetData(string.Format(@"SELECT ID,TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as  CustomerName, Total, REPLACE(ShippingAddress,'\r\n','') AS ShippingAddress, IFNULL(OrderStatus,'Pending') AS OrderStatus, DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS  Created_at, (SELECT `title` FROM branch WHERE id = orders.`branchid`) AS OutletName FROM orders WHERE customerid = '{0}' AND IFNULL(OrderStatus,'CANCELLED') IN ('CANCELLED', 'Re-Punched')
UNION
SELECT ID,TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as  CustomerName, Total, REPLACE(ShippingAddress,'\r\n','') AS ShippingAddress, IFNULL(OrderStatus,'Pending') AS OrderStatus, DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS  Created_at, (SELECT `title` FROM branch WHERE id = ordersarchive.`branchid`) AS OutletName FROM ordersarchive WHERE customerid = '{0}' AND IFNULL(OrderStatus,'CANCELLED') IN ('CANCELLED', 'Re-Punched')
ORDER BY id DESC {1}", CustomerID, limit));
            
            var JSONString = new StringBuilder();
            if (table.Rows.Count > 0)
            {
                if (table.Rows.Count > 0)
                {
                    JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                    for (int i = 0; i < table.Rows.Count; i++)
                    {
                        JSONString.Append("{");
                        for (int j = 0; j < table.Columns.Count; j++)
                        {
                            if (j < table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                            }
                            else if (j == table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                            }



                        }


                        if (i == table.Rows.Count - 1)
                        {
                            JSONString.Append("}]");
                        }
                        else
                        {
                            JSONString.Append("},");
                        }
                    }
                    JSONString.Append("}");
                }

                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(JSONString.ToString());
            }
            else
            {
                string Message = "{\"ResponseType\": \"0\",\"Data\": [] }";


                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());
            }

            //    }
            //}
        }

        public void MyCompletedOrders()
        {
            //if (Request.QueryString["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {
            string CustomerID = "";
            //if (Request["CustomerID"] != null)
            //{
            //    if (!checkForSQLInjection(Request["CustomerID"]))
            //    {
            //        CustomerID = Request["CustomerID"].ToString();
            //    }
            //}


           if (Request.Headers["X-Authorization"] != null)
            {
                 string CustomerToken = Request.Headers["X-Authorization"].ToString();
                string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                CustomerID = ValidateCustomerToken.Split(',')[1];
                if (ValidateCustomerToken.Split(',')[0] != "Valid")
                {
                    string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                    //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }
            }
            else
            {
                string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());

                return;
            }

            string limit = "";
            if (Request["limit"] != null)
            {
                if (!checkForSQLInjection(Request["limit"]))
                {
                    limit = "limit " + Request.QueryString["limit"].ToString();
                }

            }
            //string CustomerID = Request.QueryString["CustomerID"].ToString();
            DataTable table = DBHandler.GetData(string.Format(@"SELECT ID, TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName, Total, REPLACE(ShippingAddress,'\r\n','') AS ShippingAddress, IFNULL(OrderStatus,'Pending') AS OrderStatus,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS  Created_at, (SELECT `title` FROM branch WHERE id = orders.`branchid`) AS OutletName FROM orders WHERE customerid = '{0}' AND IFNULL(OrderStatus,'Delivered') IN ('Delivered')
UNION
SELECT ID,TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName, Total, REPLACE(ShippingAddress,'\r\n','') AS ShippingAddress, IFNULL(OrderStatus,'Pending') AS OrderStatus,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS  Created_at, (SELECT `title` FROM branch WHERE id = ordersarchive.`branchid`) AS OutletName FROM ordersarchive WHERE customerid = '{0}' AND IFNULL(OrderStatus,'Delivered') IN ('Delivered')
ORDER BY id DESC {1}", CustomerID, limit));
            var JSONString = new StringBuilder();  
            if (table.Rows.Count > 0)
            {
                if (table.Rows.Count > 0)
                {
                    JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                    for (int i = 0; i < table.Rows.Count; i++)
                    {
                        JSONString.Append("{");
                        for (int j = 0; j < table.Columns.Count; j++)
                        {
                            if (j < table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                            }
                            else if (j == table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                            }



                        }


                        if (i == table.Rows.Count - 1)
                        {
                            JSONString.Append("}]");
                        }
                        else
                        {
                            JSONString.Append("},");
                        }
                    }
                    JSONString.Append("}");
                }

                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(JSONString.ToString());
            }
            else
            {
                string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());
            }

            //    }
            //}
        }

        public void GetOrderDetail()
        {
            if (Request.QueryString["OrderID"] != null)
            {
                if (!checkForSQLInjection(Request["OrderID"]))
                {
                    string OrderID = Request.QueryString["OrderID"].ToString().Replace("'", "");

                    string CustomerID = "";
                   if (Request.Headers["X-Authorization"] != null)
                    {
                         string CustomerToken = Request.Headers["X-Authorization"].ToString();
                        string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                        CustomerID = ValidateCustomerToken.Split(',')[1];
                        if (ValidateCustomerToken.Split(',')[0] != "Valid")
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                            //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());

                        return;
                    }

                    //DataTable dtCheckCustomer = DBHandler.GetData(string.Format("select CustomerID from orders where mobile = '{0}'", OrderID));
                    //if (dtCheckCustomer.Rows.Count > 0)
                    //{
                    //    if (CustomerID != dtCheckCustomer.Rows[0]["CustomerID"].ToString())
                    //    {
                    //        string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                    //        Response.Clear();
                    //        Response.ContentType = "application/json; charset=utf-8";
                    //        Response.Write(Message.ToString());

                    //        return;
                    //    }
                    //}



                    // DataTable table = DBHandler.GetData(string.Format("SELECT ID,OrderPlatformID,ShopifyOrderID,app_id,browser_ip,contact_email,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS CreatedAt,OrderTime,Shopify_CreatedAt,Shopify_UpdatedAt,Currency,Subtotal,Total,Total_Tax,IFNULL(OrderStatus,'Pending') AS OrderStatus,Fulfillment_status,Gateway,OrderNumber,Phone,ProcessingMethod,Source,TotalPriceUSD,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName,ShopifyPayload,CustomerID,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(ShippingAddress, '\'','')),''),'\t',''),'\n',''),'\r','')) as ShippingAddress,DeliveryStatus,CASE WHEN orderstatus != 'CANCELLED' THEN '' ELSE CancelReason END AS CancelReason,Latitude,Longitude,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(Remarks, '\'','')),''),'\t',''),'\n',''),'\r','')) as Remarks,CustomerAddressID,CreatedBy,BranchID,DATE_FORMAT(Created_at, '%d/%m/%Y | %r') AS Created_at,DATE_FORMAT(Assigned_at, '%d/%m/%Y | %r') AS Assigned_at,DATE_FORMAT(Picked_at, '%d/%m/%Y | %r') AS Picked_at,DATE_FORMAT(Cancelled_at, '%d/%m/%Y | %r') AS Cancelled_at,DATE_FORMAT(Delivered_at, '%d/%m/%Y | %r') AS Delivered_at,DATE_FORMAT(Verified_at, '%d/%m/%Y | %r') AS Verified_at,AssignedRiderID,DATE_FORMAT(Accepted_at, '%d/%m/%Y | %r') AS Accepted_at,invc_sid,OrderChecked,AppliedRuleID,DSPID,VoucherID,VoucherCode,VoucherValue,(SELECT title FROM branch WHERE id = orders.`branchid`) AS BranchName,(SELECT DeliveryMins FROM branch WHERE id = orders.`branchid`) AS ExpectedDeliveryTime,orders.`Discount`, orders.`DeliveryFees`, orders.PlatformFees FROM orders WHERE id = '{0}'", OrderID));
                    DataTable table = DBHandler.GetData(string.Format(@"SELECT ID,OrderPlatformID,ShopifyOrderID,app_id,browser_ip,contact_email,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS CreatedAt,OrderTime,Shopify_CreatedAt,Shopify_UpdatedAt,Currency,Subtotal,Total,Total_Tax,IFNULL(OrderStatus,'Pending') AS OrderStatus,Fulfillment_status,Gateway,OrderNumber,Phone,ProcessingMethod,Source,TotalPriceUSD,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName,ShopifyPayload,CustomerID,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(ShippingAddress, '\'','')),''),'\t',''),'\n',''),'\r','')) as ShippingAddress,DeliveryStatus,CASE WHEN orderstatus != 'CANCELLED' THEN '' ELSE CancelReason END AS CancelReason,Latitude,Longitude,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(Remarks, '\'','')),''),'\t',''),'\n',''),'\r','')) as Remarks,CustomerAddressID,CreatedBy,BranchID,DATE_FORMAT(Created_at, '%d/%m/%Y | %r') AS Created_at,DATE_FORMAT(Assigned_at, '%d/%m/%Y | %r') AS Assigned_at,DATE_FORMAT(Picked_at, '%d/%m/%Y | %r') AS Picked_at,DATE_FORMAT(Cancelled_at, '%d/%m/%Y | %r') AS Cancelled_at,DATE_FORMAT(Delivered_at, '%d/%m/%Y | %r') AS Delivered_at,DATE_FORMAT(Verified_at, '%d/%m/%Y | %r') AS Verified_at,AssignedRiderID,DATE_FORMAT(Accepted_at, '%d/%m/%Y | %r') AS Accepted_at,invc_sid,OrderChecked,AppliedRuleID,DSPID,VoucherID,VoucherCode,VoucherValue,(SELECT title FROM branch WHERE id = orders.`branchid`) AS BranchName,(SELECT DeliveryMins FROM branch WHERE id = orders.`branchid`) AS ExpectedDeliveryTime,orders.`Discount`, orders.`DeliveryFees`, orders.PlatformFees, orders.ActualTotalAmount,orders.IsEdited ,orders.EditCount ,orders.PreviousVoucherCode
, IFNULL((SELECT branchcode from branch where id = orders.branchid),'0') as BranchCode 
, CASE WHEN CancelReason IN (SELECT  CancelReason FROM cancelreason WHERE IsActive = 1 AND `type` = 'Customer'  ) THEN CancelReason ELSE '' END AS CancelReason1
FROM orders WHERE id = '{0}'", OrderID));

                    if (table.Rows.Count == 0)
                    {
                        //                        table = DBHandler.GetData(string.Format(@"SELECT ID,OrderPlatformID,ShopifyOrderID,app_id,browser_ip,contact_email,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS CreatedAt,OrderTime,Shopify_CreatedAt,Shopify_UpdatedAt,Currency,Subtotal,Total,Total_Tax,IFNULL(OrderStatus,'Pending') AS OrderStatus,Fulfillment_status,Gateway,OrderNumber,Phone,ProcessingMethod,Source,TotalPriceUSD,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName,ShopifyPayload,CustomerID,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(ShippingAddress, '\'','')),''),'\t',''),'\n',''),'\r','')) as ShippingAddress,DeliveryStatus,CASE WHEN orderstatus != 'CANCELLED' THEN '' ELSE CancelReason END AS CancelReason,Latitude,Longitude,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(Remarks, '\'','')),''),'\t',''),'\n',''),'\r','')) as Remarks,CustomerAddressID,CreatedBy,BranchID,DATE_FORMAT(Created_at, '%d/%m/%Y | %r') AS Created_at,DATE_FORMAT(Assigned_at, '%d/%m/%Y | %r') AS Assigned_at,DATE_FORMAT(Picked_at, '%d/%m/%Y | %r') AS Picked_at,DATE_FORMAT(Cancelled_at, '%d/%m/%Y | %r') AS Cancelled_at,DATE_FORMAT(Delivered_at, '%d/%m/%Y | %r') AS Delivered_at,DATE_FORMAT(Verified_at, '%d/%m/%Y | %r') AS Verified_at,AssignedRiderID,DATE_FORMAT(Accepted_at, '%d/%m/%Y | %r') AS Accepted_at,invc_sid,OrderChecked,AppliedRuleID,DSPID,VoucherID,VoucherCode,VoucherValue,(SELECT title FROM branch WHERE id = ordersarchive.`branchid`) AS BranchName,(SELECT DeliveryMins FROM branch WHERE id = ordersarchive.`branchid`) AS ExpectedDeliveryTime,ordersarchive.`Discount`, ordersarchive.`DeliveryFees`, ordersarchive.PlatformFees
                        //, CASE WHEN CancelReason IN (SELECT  CancelReason FROM cancelreason WHERE IsActive = 1 AND `type` = 'Customer'  ) THEN CancelReason ELSE '' END AS CancelReason1
                        //FROM ordersarchive WHERE id = '{0}'", OrderID));

                        table = DBHandler.GetData(string.Format(@"SELECT ID,OrderPlatformID,ShopifyOrderID,app_id,browser_ip,contact_email,DATE_FORMAT(CreatedAt, '%d/%m/%Y | %r') AS CreatedAt,OrderTime,Shopify_CreatedAt,Shopify_UpdatedAt,Currency,Subtotal,Total,Total_Tax,IFNULL(OrderStatus,'Pending') AS OrderStatus,Fulfillment_status,Gateway,OrderNumber,Phone,ProcessingMethod,Source,TotalPriceUSD,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(CustomerName, '\'','')),''),'\t',''),'\n',''),'\r','')) as CustomerName,ShopifyPayload,CustomerID,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(ShippingAddress, '\'','')),''),'\t',''),'\n',''),'\r','')) as ShippingAddress,DeliveryStatus,CASE WHEN orderstatus != 'CANCELLED' THEN '' ELSE CancelReason END AS CancelReason,Latitude,Longitude,TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(Remarks, '\'','')),''),'\t',''),'\n',''),'\r','')) as Remarks,CustomerAddressID,CreatedBy,BranchID,DATE_FORMAT(Created_at, '%d/%m/%Y | %r') AS Created_at,DATE_FORMAT(Assigned_at, '%d/%m/%Y | %r') AS Assigned_at,DATE_FORMAT(Picked_at, '%d/%m/%Y | %r') AS Picked_at,DATE_FORMAT(Cancelled_at, '%d/%m/%Y | %r') AS Cancelled_at,DATE_FORMAT(Delivered_at, '%d/%m/%Y | %r') AS Delivered_at,DATE_FORMAT(Verified_at, '%d/%m/%Y | %r') AS Verified_at,AssignedRiderID,DATE_FORMAT(Accepted_at, '%d/%m/%Y | %r') AS Accepted_at,invc_sid,OrderChecked,AppliedRuleID,DSPID,VoucherID,VoucherCode,VoucherValue,(SELECT title FROM branch WHERE id = ordersarchive.`branchid`) AS BranchName,(SELECT DeliveryMins FROM branch WHERE id = ordersarchive.`branchid`) AS ExpectedDeliveryTime,ordersarchive.`Discount`, ordersarchive.`DeliveryFees`, ordersarchive.PlatformFees, ordersarchive.ActualTotalAmount,ordersarchive.IsEdited ,ordersarchive.EditCount ,ordersarchive.PreviousVoucherCode
, IFNULL((SELECT branchcode from branch where id = ordersarchive.branchid),'0') as BranchCode 
, CASE WHEN CancelReason IN (SELECT  CancelReason FROM cancelreason WHERE IsActive = 1 AND `type` = 'Customer'  ) THEN CancelReason ELSE '' END AS CancelReason1
FROM ordersarchive WHERE id = '{0}'", OrderID));

                    }

                    DataTable table1 = DBHandler.GetData(string.Format("select * from orderdetail where orderid = '{0}'", OrderID));
                    if (table1.Rows.Count == 0)
                    {
                        table1 = DBHandler.GetData(string.Format("select * from orderdetailarchive where orderid = '{0}'", OrderID));
                    }

                    // DataTable table2 = DBHandler.GetData(string.Format("select * from orderdetailoptions where orderdetailid in (select ID from orderdetail where orderid = '{0}')", OrderID));

                    var JSONString = new StringBuilder();
                    if (table.Rows.Count > 0)
                    {
                        if (table.Rows.Count > 0)
                        {
                            ///  JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < table.Columns.Count; j++)
                                {
                                    if (j < table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }
                                    else if (j == table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                    }
                                }

                                if (i == table.Rows.Count - 1)
                                {
                                    if (table1.Rows.Count > 0)
                                    {
                                        if (table1.Rows.Count > 0)
                                        {
                                            JSONString.Append(",\"Detail\": [");
                                            for (int i1 = 0; i1 < table1.Rows.Count; i1++)
                                            {
                                                JSONString.Append("{");
                                                for (int j = 0; j < table1.Columns.Count; j++)
                                                {
                                                    if (j < table1.Columns.Count - 1)
                                                    {
                                                        JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\",");
                                                    }
                                                    else if (j == table1.Columns.Count - 1)
                                                    {
                                                        JSONString.Append("\"" + table1.Columns[j].ColumnName.ToString() + "\":" + "\"" + table1.Rows[i1][j].ToString() + "\"");
                                                    }
                                                }
                                                if (i1 == table1.Rows.Count - 1)
                                                {

                                                    //JSONString.Append("}]");
                                                }
                                                else
                                                {
                                                    JSONString.Append("},");
                                                }

                                            }
                                        }

                                        JSONString.Append("}]");
                                    }
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                            JSONString.Append("}");
                        }
                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(JSONString.ToString());

                    }
                    else
                    {
                        string Message = "{\"ResponseType\": \"0\",\"Data\": [] }";


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());
                    }


                }

            }
        }

        public void DeleteAddress()
        {
            try
            {
                if (Request["AddressID"] != null)
                {
                    if (!checkForSQLInjection(Request["AddressID"]))
                    {
                        string AddressID = Request["AddressID"].ToString();
                        string CustomerID = "";
                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = " and customerid = " + ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"ResponseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }

                        Int64 JSONID = DBHandler.InsertDataForOrder(string.Format("delete from customerddress where id = '{0}' {1}", AddressID, CustomerID));

                        if (JSONID > 0)
                        {
                            string Message = "{\"ResponseType\": 1,\"message\": \"Adderss deleted successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"ResponseType\": 0,\"message\": \"Cannot deleted address at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }

                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void CancelOrder()
        {
            try
            {
                if (Request["OrderID"] != null &&  Request["CancelReason"] != null)
                {
                    if (!checkForSQLInjection(Request["OrderID"]) && !checkForSQLInjection(Request["CancelReason"]))
                    {
                        string CustomerID = "";
                        //if (Request["CustomerID"] != null)
                        //{
                        //    if (!checkForSQLInjection(Request["CustomerID"]))
                        //    {
                        //        CustomerID = " and customerid = " + Request["CustomerID"].ToString();
                        //    }
                        //}

                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = " and customerid = " + ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }


                        string OrderID = Request["OrderID"].ToString();
                        string CancelReason = Request["CancelReason"].ToString().Replace("'", "");

                        DataTable dtOrder1 = DBHandler.GetData(string.Format(@"select * from orders where id = '{0}' {1} ", OrderID,CustomerID));

                        if (dtOrder1.Rows.Count > 0)
                        {
                            if (dtOrder1.Rows[0]["DeliveryStatus"].ToString() == "Order Picked" || dtOrder1.Rows[0]["DeliveryStatus"].ToString() == "Delivered by Rider")
                            {
                                string Message = "{\"responseType\": 1,\"message\": \"This order cannot be cancelled\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);

                                return;
                            }
                        }


                        if (CancelReason != "invalid prescription")
                        {
                            if (Convert.ToDateTime(dtOrder1.Rows[0]["CreatedAt"]) < DateTime.Now.AddMinutes(-10))
                            {
                                string Message = "{\"responseType\": 1,\"message\": \"Cancellation Not Allowed After 10 Minutes- Please Contact With Our Customer Support Team at 021-111-138-246\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);

                                return;
                            }

                            Int64 JSONID = DBHandler.InsertDataForOrder(string.Format("update orders set orderstatus = 'CANCELLED', deliverystatus = 'Cancelled By Customer', CancelReason = '{0}' , Cancelled_at = '{1}'  where id = '{2}'", CancelReason, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), OrderID));

                            if (JSONID > 0)
                            {
                                string Message = "{\"responseType\": 1,\"message\": \"Order cancelled successfully\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);

                                WebRequest wr = WebRequest.Create("https://apidb.Jewar.pk/BykeaAPI.aspx?Method=CancelPandaGo&OrderID=" + OrderID + "&CancelReason=REASON_UNKNOWN");
                                //wr.Timeout = 3500;

                                try
                                {
                                    HttpWebResponse response = (HttpWebResponse)wr.GetResponse();
                                }
                                catch (Exception ex)
                                {
                                    //We know its going to fail but that dosent matter!!
                                    Response.Write(ex.Message);
                                }
                            }
                            else
                            {
                                string Message = "{\"responseType\": 0,\"message\": \"Cannot cancel order at the moment\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                            }
                        }
                        else
                        {
                             Int64 JSONID = DBHandler.InsertDataForOrder(string.Format("update orders set  CancelReason = '{0}' , Cancelled_at = '{1}'  where id = '{2}'", CancelReason, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), OrderID));

                             if (JSONID > 0)
                             {
                                 string Message = "{\"responseType\": 1,\"message\": \"Cancel reason mark successfully\"}";

                                 Response.Clear();
                                 Response.ContentType = "application/json; charset=utf-8";
                                 Response.Write(Message);
                             }
                             else
                             {
                                 string Message = "{\"responseType\": 0,\"message\": \"Cannot mark cancel reason at the moment\"}";

                                 Response.Clear();
                                 Response.ContentType = "application/json; charset=utf-8";
                                 Response.Write(Message);
                             }
                        }
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void UpdatePrescription()
        {
            try
            {
                if (Request["OrderID"] != null && Request["PrescriptionURL"] != null)
                {
                    if (!checkForSQLInjection(Request["OrderID"]) && !checkForSQLInjection(Request["PrescriptionURL"]))
                    {
                        string OrderID = Request["OrderID"].ToString();
                        string PrescriptionURL = Request["PrescriptionURL"].ToString().Replace("'", "");

                        string CustomerID = "";
                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }

                        //DataTable dtCheckCustomer = DBHandler.GetData(string.Format("select CustomerID from orders where id = '{0}'", OrderID));
                        //if (dtCheckCustomer.Rows.Count > 0)
                        //{
                        //    if (CustomerID != dtCheckCustomer.Rows[0]["CustomerID"].ToString())
                        //    {
                        //        string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                        //        Response.Clear();
                        //        Response.ContentType = "application/json; charset=utf-8";
                        //        Response.Write(Message.ToString());

                        //        return;
                        //    }
                        //}

                        Int64 JSONID = DBHandler.InsertDataForOrder(string.Format("update orders set PrescriptionURL = '{0}' , CancelReason = '' , OrderStatus = 'Pending' where id = '{1}'", PrescriptionURL, OrderID));

                        if (JSONID > 0)
                        {
                            string Message = "{\"responseType\": 1,\"message\": \"Prescription updated successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot update prescription at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }

                    }
                }
            }
            catch (Exception ex)
            { }
        }
        
        public void RateOrder()
        {
            try
            {
                if (Request["OrderID"] != null && Request["Rate"] != null && Request["Reviews"] != null)
                {
                    if (!checkForSQLInjection(Request["OrderID"]) && !checkForSQLInjection(Request["Rate"]) && !checkForSQLInjection(Request["Reviews"]))
                    {
                        string OrderID = Request["OrderID"].ToString();
                        string Rate = Request["Rate"].ToString().Replace("'", "");
                        string Reviews = Request["Reviews"].ToString(); 

                        //Int64 JSONID = DBHandler.InsertDataForOrder(string.Format("update orders set orderstatus = 'CANCELLED', CancelReason = '{0}' , Cancelled_at = '{1}'  where id = '{2}'", CancelReason, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), OrderID));

                        //if (JSONID > 0)
                        //{
                            string Message = "{\"responseType\": 1,\"message\": \"Rating added successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        //}
                        //else
                        //{
                        //    string Message = "{\"responseType\": 0,\"message\": \"Cannot cancel order at the moment\"}";

                        //    Response.Clear();
                        //    Response.ContentType = "application/json; charset=utf-8";
                        //    Response.Write(Message);
                        //}

                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void GetMultipleProducts()
        {
            try
            {
                string ProductID = "";
                string OutletID = "32";
                if (Request.QueryString["ProductID"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductID"]))
                    {
                        if (Request["ProductID"].ToString() != "")
                        {
                            ProductID = Request.QueryString["ProductID"].ToString();
                            ProductID = ProductID.Replace("|", ",");
                        }
                    }
                }
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }

                DataTable table = new DataTable();

                 DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
//                 if (dtPrimaryBranch.Rows.Count > 0)
//                 {
//                     if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
//                     {
//                         table = DBHandler.GetData(string.Format(@"
//SELECT DISTINCT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
// , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
//, p.`Description`, '' AS Variations
//,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
//,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
//,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
// left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.id in  ({0})  AND ImageURL != ''  and ps.store_no = '{1}' 
// 
//", ProductID, OutletID));
//                     }
//                     else
//                     {
//                         table = DBHandler.GetData(string.Format(@"SELECT ID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,CategoryID,BrandID
//FROM 
//(SELECT DISTINCT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
// , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
//, p.`Description`, '' AS Variations
//,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
//,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
//,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.id IN  ({0})  AND ImageURL != ''  AND ps.store_no = '{1}' 
// 
//UNION
//
//SELECT DISTINCT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
// , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
//, p.`Description`, '' AS Variations
//,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
//,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
//,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
//FROM `products` p 
//INNER JOIN  `productvariation` pv ON p.id = pv.productid
// LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
//WHERE p.id IN  ({0})  AND ImageURL != ''  AND ps.store_no = '{2}'
//)
//AS a
//GROUP BY 
//ID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,CategoryID,BrandID
// 
// 
//", ProductID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString()));
//                     }

//                 }
                 if(table.Rows.Count == 0)
                 {
                     table = DBHandler.GetData(string.Format(@"
SELECT DISTINCT p.`ID`,  p.`ID` AS ProductID,p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` *  p.unitpercase1 , ps.`Price`) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , ps.Price)  AS SalePrice, p.`ShopifyProductID` ,  p.variationtitle AS VariationTitle, p.unitpercase1 AS unitpercase , FLOOR((IFNULL(Qty,0) /  p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, p.`Description`, '' AS Variations
,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.id in  ({0})  AND ImageURL != ''  and ps.store_no = '{1}' 
 
", ProductID, OutletID));
 
                 }


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"ResponseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetMultipleProductsV1()
        {
            try
            {
                string ProductID = "";
                string OutletID = "32";
                if (Request.QueryString["ProductID"] != null)
                {
                    if (!checkForSQLInjection(Request["ProductID"]))
                    {
                        if (Request["ProductID"].ToString() != "")
                        {
                            ProductID = Request.QueryString["ProductID"].ToString();
                            ProductID = ProductID.Replace("|", ",");
                        }
                    }
                }
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }

                DataTable table = new DataTable();

                DataTable dtPrimaryBranch = DBHandler.GetData(string.Format("select primarybranch from branch where branchcode = '{0}'", OutletID));
                //                 if (dtPrimaryBranch.Rows.Count > 0)
                //                 {
                //                     if (dtPrimaryBranch.Rows[0]["primarybranch"].ToString() == OutletID)
                //                     {
                //                         table = DBHandler.GetData(string.Format(@"
                //SELECT DISTINCT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount as MaxOrder -- , pv.*
                //, p.`Description`, '' AS Variations
                //,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
                //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
                //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // left JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.id in  ({0})  AND ImageURL != ''  and ps.store_no = '{1}' 
                // 
                //", ProductID, OutletID));
                //                     }
                //                     else
                //                     {
                //                         table = DBHandler.GetData(string.Format(@"SELECT ID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,SUM(AvailableQty) AS AvailableQty,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,CategoryID,BrandID
                //FROM 
                //(SELECT DISTINCT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                //, p.`Description`, '' AS Variations
                //,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
                //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
                //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.id IN  ({0})  AND ImageURL != ''  AND ps.store_no = '{1}' 
                // 
                //UNION
                //
                //SELECT DISTINCT p.`ID` , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
                // , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price) AS Price , IFNULL(ps.`Price` * pv.`unitpercase` , pv.Price)  AS SalePrice, pv.`ShopifyProductID` ,  pv.Title AS VariationTitle,   pv.unitpercase , FLOOR((IFNULL(Qty,0) / unitpercase)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
                //, p.`Description`, '' AS Variations
                //,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
                //,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
                //,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID
                //FROM `products` p 
                //INNER JOIN  `productvariation` pv ON p.id = pv.productid
                // LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
                //WHERE p.id IN  ({0})  AND ImageURL != ''  AND ps.store_no = '{2}'
                //)
                //AS a
                //GROUP BY 
                //ID,Title,SalePercent,Highlights,ProductImage,Category,Brand,Price,SalePrice,ShopifyProductID,VariationTitle,unitpercase,MaxOrder,Description,Variations,DiscountPrice,DiscountAmount,PrescriptionRequired,CategoryID,BrandID
                // 
                // 
                //", ProductID, OutletID, dtPrimaryBranch.Rows[0]["primarybranch"].ToString()));
                //                     }

                //                 }
                if (table.Rows.Count == 0)
                {
                    table = DBHandler.GetData(string.Format(@"
SELECT DISTINCT p.`ID`,  p.`ID` AS ProductID,p.Slug , LOWER(REPLACE(p.`Title`, '\'','')) AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` *  p.unitpercase1 , ps.`Price`) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , ps.Price)  AS SalePrice, p.`ShopifyProductID` ,  p.variationtitle AS VariationTitle, p.unitpercase1 AS unitpercase , FLOOR((IFNULL(Qty,0) /  p.unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, p.`Description`, '' AS Variations
,  IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount,  p.PrescriptionRequired
,IFNULL((SELECT CategoryID FROM `productcategories` WHERE p.id = productcategories.productid LIMIT 1),'0') AS CategoryID
,IFNULL((SELECT id FROM brands WHERE p.vendor = brands.name),'0') AS BrandID



, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor

FROM `products` p 
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
WHERE p.id in  ({0})  AND ImageURL != ''  and ps.store_no = '{1}' 
 
", ProductID, OutletID));

                }


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        // cityTI.ToTitleCase("[Title]")
                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {



                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");

                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            //JSONString.Append(",\"Variation\": [");
                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            //JSONString.Append("]");

                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");
                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }

                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"ResponseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }


        public void AddComplaint()
        {
            try
            {
                if (Request["Name"] != null && Request["Number"] != null && Request["BranchCode"] != null && Request["Type"] != null && Request["Complaint"] != null)
                {
                    if (!checkForSQLInjection(Request["Name"]) && !checkForSQLInjection(Request["Number"]) && !checkForSQLInjection(Request["BranchCode"])
                        && !checkForSQLInjection(Request["Type"]) && !checkForSQLInjection(Request["Complaint"]))
                    {
                       
                       

                        string Name = Request.QueryString["Name"].ToString();
                        string Number = Request.QueryString["Number"].ToString();
                        string BranchCode = Request.QueryString["BranchCode"].ToString();
                        string Type = Request.QueryString["Type"].ToString();
                        string Complaint = Request.QueryString["Complaint"].ToString();

                        string CustomerID = "";
                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }

                        //DataTable dtCheckCustomer = DBHandler.GetData(string.Format("select ID from customer where mobile = '{0}'", Number));
                        //if (dtCheckCustomer.Rows.Count > 0)
                        //{
                        //    if (CustomerID != dtCheckCustomer.Rows[0]["ID"].ToString())
                        //    {
                        //        string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                        //        Response.Clear();
                        //        Response.ContentType = "application/json; charset=utf-8";
                        //        Response.Write(Message.ToString());

                        //        return;
                        //    }
                        //}


                        Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  complaint(Name,Number,BranchCode,Type,Complaint,Created) values('{0}','{1}','{2}','{3}','{4}','{5}')",
                                       Name, Number, BranchCode, Type, Complaint, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        if (JSONID > 0)
                        {
                            string Message = "{\"responseType\": 1,\"ComplaintNumber\": " + JSONID + ",\"message\": \"Complaint added successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot add Record at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Special characters not allowed\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void AddCreditCard()
        {
            try
            {
                if (Request["Name"] != null && Request["CardNumber"] != null && Request["CVC"] != null && Request["Expiry"] != null)
                {
                    if (!checkForSQLInjection(Request["Name"]) && !checkForSQLInjection(Request["CardNumber"])
                        && !checkForSQLInjection(Request["CVC"]) && !checkForSQLInjection(Request["Expiry"]))
                    {

                        string CustomerID = "";
                        //if (Request["CustomerID"] != null)
                        //{
                        //    if (!checkForSQLInjection(Request["CustomerID"]))
                        //    {
                        //        CustomerID = Request["CustomerID"].ToString();
                        //    }
                        //}


                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }

                        //string CustomerID = Request.QueryString["CustomerID"].ToString();
                        string Name = Request.QueryString["Name"].ToString();
                        string CardNumber = Request.QueryString["CardNumber"].ToString();
                        string CVC = Request.QueryString["CVC"].ToString();
                        string Expiry = Request.QueryString["Expiry"].ToString();
                        string Token = GenerateVerificationCode();


                        Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  creditcard(CustomerID,Name,CardNumber,CVC,Expiry,Token,Created) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}')",
                                       CustomerID, Name, CardNumber, CVC, Expiry, Token, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        if (JSONID > 0)
                        {

                            string Message = "{\"responseType\": 1,\"token\": \"" + Token + "\",\"message\": \"Record added successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot add Record at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Special characters not allowed\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void test()
        {
             try
            {

                DataTable dt = DBHandler.GetData("select * from bykeastatusflows where bookingid is null AND responsestring != ''");
                string s1 = "";
                if (dt.Rows.Count > 0)
                {
                    int insert = 0;
                    for (int a = 0; a < dt.Rows.Count; a++)
                    {

                        JObject json1 = JObject.Parse(dt.Rows[a]["responsestring"].ToString());
                        var jsonData = json1["data"];

                        string TripID = jsonData["trip_id"].ToString();

                        s1 += string.Format("update bykeastatusflows set BookingID = '{0}' where id = '{1}';", TripID, dt.Rows[a]["ID"].ToString());

                       

                    }

                    insert = DBHandler.InsertDataWithID(s1);

                }

                Response.Write(dt.Rows.Count + " Rows Inserted");

            }
            catch (Exception ex)
            {
                //We know its going to fail but that dosent matter!!
                Response.Write(ex.Message);


            }
 
        }

        public string ProcessNewAccount(string Name, string Number, string CustomerEmail)
        {
            string VerificationCode = "";
            try
            {

                string Message = "";

                string Password = "";//Request["Password"].ToString();
                //check existing email

                Name = Process.TextCase(Name);

                VerificationCode =   GenerateVerificationCode();

                int customerID = DBHandler.InsertDataWithID("insert into customer(name,mobile,password,verificationcode,email) values('" + Name.Replace("'", "''") + "','" + Number.Replace("'", "''") + "','" + Password.Replace("'", "''") + "','" + VerificationCode.Replace("'", "''") + "','" + CustomerEmail.Replace("'", "''") + "')");

                string SMSMessage = string.Format("Jewar verification code is : {0} ", VerificationCode);

                SMS.SendMessage(Number.Replace("'", "''"), SMSMessage);

                try
                {
                    //if (CustomerEmail != "")
                    //{
                    //    string JewarEmail = "no-reply@Jewar.pk";

                    //    Email.SendMail("admin@Jewar.pk", JewarEmail, "Jewar Verification Code ", SMSMessage, "Jewar Pharmacy");
                    //}
                }
                catch (Exception ee)
                { }

                //Message = "{\"message\": \"Customer Created\",	\"Code\": \"" + VerificationCode + "\"}";

                //Response.Write(Message);



            }
            catch (Exception ex)
            { }
            return VerificationCode;
        }


        public void GetCustomerCreditCard()
        {
            try
            {
                //if (Request["CustomerID"] != null)
                //{
                //    if (!checkForSQLInjection(Request["CustomerID"]))
                //    {
                string CustomerID = "";
                //if (Request["CustomerID"] != null)
                //{
                //    if (!checkForSQLInjection(Request["CustomerID"]))
                //    {
                //        CustomerID = Request["CustomerID"].ToString();
                //    }
                //}


               if (Request.Headers["X-Authorization"] != null)
                {
                     string CustomerToken = Request.Headers["X-Authorization"].ToString();
                    string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                    CustomerID = ValidateCustomerToken.Split(',')[1];
                    if (ValidateCustomerToken.Split(',')[0] != "Valid")
                    {
                        string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                        //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());

                        return;
                    }
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }


                DataTable table = DBHandler.GetData(string.Format("select * from creditcard where customerid = '{0}' order by id desc", CustomerID));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {


                    if (table.Rows.Count > 0)
                    {

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


                //    }
                //}
            }
            catch (Exception ex)
            { }
        }

        public void GetChildCategory()
        {
            try
            {

                string CategoryID = "0";
                if (Request["CategoryID"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryID"]))
                    {
                        CategoryID = Request["CategoryID"].ToString();

                    }
                }

                DataTable table = DBHandler.GetData(string.Format("SELECT ID,`Name`, ParentID, Slug FROM `categories_new` WHERE parentid = '{0}' order by Name", CategoryID));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }
            
        public void GetChildCategoryBySlug()
        {
            try
            {

                string CategorySlug = "";
                if (Request["CategorySlug"] != null)
                {
                    if (!checkForSQLInjection(Request["CategorySlug"]))
                    {
                        CategorySlug = Request["CategorySlug"].ToString();

                    }
                }

                DataTable table = DBHandler.GetData(string.Format("SELECT ID,`Name`, Slug, ParentID FROM `categories_new` WHERE parentid = (select ID from categories_new where slug = '{0}' limit 1) order by Name", CategorySlug));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }
        
        public void GetCancelReason()
        {
            DataTable table = DBHandler.GetData(string.Format(@" SELECT id,CancelReason FROM cancelreason WHERE IsActive = 1 and `type` = 'Customer' ORDER BY `Order` "));
            var JSONString = new StringBuilder();
            if (table.Rows.Count > 0)
            {
                if (table.Rows.Count > 0)
                {
                    JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                    for (int i = 0; i < table.Rows.Count; i++)
                    {
                        JSONString.Append("{");
                        for (int j = 0; j < table.Columns.Count; j++)
                        {
                            if (j < table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                            }
                            else if (j == table.Columns.Count - 1)
                            {
                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                            }
                        }


                        if (i == table.Rows.Count - 1)
                        {
                            JSONString.Append("}]");
                        }
                        else
                        {
                            JSONString.Append("},");
                        }
                    }
                    JSONString.Append("}");
                }

                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(JSONString.ToString());
            }
            else
            {
                string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(Message.ToString());
            }


        }

        public void AddCustomerToken(string JSON)
        {
            try
            {
                CustomerTokenRoot f = JsonConvert.DeserializeObject<CustomerTokenRoot>(JSON);


                string CustomerID = f.CustomerID.ToString();
                string Token = f.Token.ToString();
                string Channel = f.Channel.ToString();

                try
                {
                    Int64 DeleteRow = DBHandler.InsertDataWithID(string.Format("delete from customertoken where customerid = '{0}'", CustomerID));
                }
                catch (Exception e)
                { }

                //DataTable dtCheckToken = DBHandler.GetData(string.Format("select * from customertoken where token = '{0}'", Token));
                //if (dtCheckToken.Rows.Count == 0)
                //{
                Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  customertoken(CustomerID,Token, Channel,Created) values('{0}','{1}','{2}','{3}')",
                                   CustomerID, Token, Channel, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                    if (JSONID > 0)
                    {
                        string Message = "{\"responseType\": 1,\"message\": \"Token added successfully\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Cannot add token at the moment\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                //}
                //else
                //{
                //    string Message = "{\"responseType\": 0,\"message\": \"Token already added\"}";

                //    Response.Clear();
                //    Response.ContentType = "application/json; charset=utf-8";
                //    Response.Write(Message);
                //}


            }
            catch (Exception ex)
            { }
        }

        public void AddCustomerTokenWeb(string JSON)
        {
            try
            {
                CustomerTokenWebRoot f = JsonConvert.DeserializeObject<CustomerTokenWebRoot>(JSON);


                string CustomerID = f.CustomerID.ToString();
                string Token = f.Token.ToString();
                string Channel = f.Channel.ToString();
                string Latitude = f.Latitude;
                string Longitude = f.Longitude;
                //try
                //{
                //    Int64 DeleteRow = DBHandler.InsertDataWithID(string.Format("delete from customertokenweb where customerid = '{0}'", CustomerID));


                //    DeleteRow = DBHandler.InsertDataWithID(string.Format("delete from customertokenweb where Token = '{0}' ", Token));

                //}
                //catch (Exception e)
                //{ }

                //DataTable dtCheckToken = DBHandler.GetData(string.Format("select * from customertoken where token = '{0}'", Token));
                if (Token != "")
                {
                    Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  customertokenweb(CustomerID,Token, Channel,Latitude, Longitude,Created) values('{0}','{1}','{2}','{3}','{4}','{5}')",
                                   CustomerID, Token, Channel, Latitude, Longitude, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                    if (JSONID > 0)
                    {
                        string Message = "{\"responseType\": 1,\"message\": \"Token added successfully\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Cannot add token at the moment\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
                else
                {
                    string Message = "{\"responseType\": 0,\"message\": \"Token is required\"}";

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message);
                }


        }
            catch (Exception ex)
            { }
        }

        public void GetBranchSchedule()
        {
            try
            {
                if (Request["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {

                        DataTable table = DBHandler.GetData(string.Format("select schedulejson from branch where BranchCode = '{0}' ", Request["BranchCode"].ToString()));

                        if (table.Rows.Count > 0)
                        { 
                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(table.Rows[0]["schedulejson"].ToString());
                          
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void MeezanReversal()
        {
            long MappingOrderID = 0;
            try
            {
                if (Request["OrderID"] != null)
                {
                    if (!checkForSQLInjection(Request["OrderID"]))
                    {
                        string OrderID = Request["OrderID"].ToString();

                        DataTable table = DBHandler.GetData(string.Format("select ShopifyTransactionID from orders where id = '{0}' ", OrderID));

                        if (table.Rows.Count > 0)
                        {
                            string URL2 = "https://acquiring.meezanbank.com/payment/rest/reverse.do?userName=Jewar_nova&password=Jewar@1234&orderId=" + table.Rows[0]["ShopifyTransactionID"].ToString();


                            MappingOrderID = DBHandler.InsertDataGetInsertedID(string.Format("insert into meezandata (OrderID, RequestString, Created) Values('{0}','{1}','{2}')"
                                                                                                        , OrderID, URL2, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));


                            ServicePointManager.Expect100Continue = true;
                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                   | SecurityProtocolType.Tls11
                                   | SecurityProtocolType.Ssl3
                                   | SecurityProtocolType.Tls12;



                            //WebRequest wr = WebRequest.Create(URL1);
                            HttpWebRequest wr1 = (HttpWebRequest)WebRequest.Create(URL2);

                            HttpWebResponse response = (HttpWebResponse)wr1.GetResponse();
                            var encoding = ASCIIEncoding.ASCII;
                            using (var reader = new System.IO.StreamReader(response.GetResponseStream(), encoding))
                            {
                                string responseText = reader.ReadToEnd();
                                JObject json1 = JObject.Parse(responseText);
                                //var jsonData = json1["data"];




                                var OrderStatus = json1["errorCode"].ToString();


                                string strUpdate = string.Format(@"update meezandata set  `errorCode` = '{0}' , errorMessage= '{1}' , orderStatus= '{2}' , actionCode= '{3}' , actionCodeDescription= '{4}' 
    , amount= '{5}' , currency= '{6}' , date= '{7}' , MeezanOrderID= '{8}' , Name= '{9}', ResponseString = '{10}' where id = '{11}'",
                                             json1["errorCode"].ToString(), json1["errorMessage"].ToString(), json1["orderStatus"].ToString(), json1["actionCode"].ToString(), json1["actionCodeDescription"].ToString(),
                json1["amount"].ToString(), json1["currency"].ToString(), json1["date"].ToString(), "", "", responseText, MappingOrderID);
                                int update = DBHandler.InsertDataForOrder(strUpdate);



                                if (OrderStatus == "2")
                                {
                                    int a11 = DBHandler.InsertDataWithID(string.Format("update orders set gateway = 'Paid' where id = '{0}'", OrderID));
                                }


                            }


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(table.Rows[0]["schedulejson"].ToString());

                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }
        
        public void MeezanRefund()
        {
            long MappingOrderID = 0;
            try
            {
                if (Request["OrderID"] != null)
                {
                    if (!checkForSQLInjection(Request["OrderID"]))
                    {
                        string OrderID = Request["OrderID"].ToString();

                        DataTable table = DBHandler.GetData(string.Format("select ShopifyTransactionID from order where id = '{0}' ", OrderID));

                        if (table.Rows.Count > 0)
                        {
                            string URL2 = "https://acquiring.meezanbank.com/payment/rest/reverse.do?userName=Jewar_nova&password=Jewar@1234&orderId=" + table.Rows[0]["ShopifyTransactionID"].ToString();


                            MappingOrderID = DBHandler.InsertDataGetInsertedID(string.Format("insert into meezandata (OrderID, RequestString, Created) Values('{0}','{1}','{2}')"
                                                                                                        , OrderID, URL2, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));


                            ServicePointManager.Expect100Continue = true;
                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                                   | SecurityProtocolType.Tls11
                                   | SecurityProtocolType.Ssl3
                                   | SecurityProtocolType.Tls12;



                            //WebRequest wr = WebRequest.Create(URL1);
                            HttpWebRequest wr1 = (HttpWebRequest)WebRequest.Create(URL2);

                            HttpWebResponse response = (HttpWebResponse)wr1.GetResponse();
                            var encoding = ASCIIEncoding.ASCII;
                            using (var reader = new System.IO.StreamReader(response.GetResponseStream(), encoding))
                            {
                                string responseText = reader.ReadToEnd();
                                JObject json1 = JObject.Parse(responseText);
                                //var jsonData = json1["data"];




                                var OrderStatus = json1["errorCode"].ToString();


                                string strUpdate = string.Format(@"update meezandata set  `errorCode` = '{0}' , errorMessage= '{1}' , orderStatus= '{2}' , actionCode= '{3}' , actionCodeDescription= '{4}' 
    , amount= '{5}' , currency= '{6}' , date= '{7}' , MeezanOrderID= '{8}' , Name= '{9}', ResponseString = '{10}' where id = '{11}'",
                                             json1["errorCode"].ToString(), json1["errorMessage"].ToString(), json1["orderStatus"].ToString(), json1["actionCode"].ToString(), json1["actionCodeDescription"].ToString(),
                json1["amount"].ToString(), json1["currency"].ToString(), json1["date"].ToString(), "", "", responseText, MappingOrderID);
                                int update = DBHandler.InsertDataForOrder(strUpdate);



                                if (OrderStatus == "2")
                                {
                                    int a11 = DBHandler.InsertDataWithID(string.Format("update orders set gateway = 'Paid' where id = '{0}'", OrderID));
                                }


                            }


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(table.Rows[0]["schedulejson"].ToString());

                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void GetCustomerLoginLog()
        {
            try
            {

                string CategoryID = "0";
                if (Request["CategoryID"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryID"]))
                    {
                        CategoryID = Request["CategoryID"].ToString();

                    }
                }
                DataTable table = new DataTable();

                //                DataTable table = DBHandler.GetData(string.Format(@"SELECT CustomerID , '' as `Name` , '' as phone  , verificationcode, DATE_FORMAT(Created ,'%d-%m-%Y') AS AttemptDate, COUNT(*) TotalAttempts 
                //FROM `logcustomerlogin` 
                //WHERE `Status` = 'Code Sent' AND customerid NOT IN
                //(SELECT a.customerid FROM logcustomerlogin a WHERE  a.`status` = 'Code Verified' AND DATE_FORMAT(a.Created ,'%d-%m-%Y')  = DATE_FORMAT(logcustomerlogin.Created ,'%d-%m-%Y') )
                //GROUP BY CustomerID , `Name` , phone , verificationcode, DATE_FORMAT(Created ,'%d-%m-%Y') 
                //ORDER BY created DESC"));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }

        public void GetBuildDetails()
        {
            try
            {
                DataTable table = DBHandler.GetData(string.Format("SELECT * from appversion1"));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }

        public void GetBuildDetailsV1()
        {
            try
            {
                DataTable table = DBHandler.GetData(string.Format("SELECT * from appversion2"));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            { }
        }


        public void GetOrderCount()
        {
            try
            {
                if (Request["Phone"] != null)
                {
                    if (!checkForSQLInjection(Request["Phone"]))
                    {

                        DataTable table = DBHandler.GetData(string.Format("SELECT COUNT(*) AS OrderCount FROM orders WHERE phone = '{0}' AND DATE_FORMAT(createdat, '%Y-%m-%d') = '{1}'", Request["Phone"].ToString(), DateTime.Now.ToString("yyyy-MM-dd")));



                        if (table.Rows.Count > 0)
                        {
                            if (Convert.ToInt32(table.Rows[0]["OrderCount"]) > 6)
                            {
                                string Token = table.Rows[0]["OrderCount"].ToString();
                                string Message = "{\"responseType\": 0,\"TotalOrders\": \"" + Token + "\",\"Allowed\": \"false\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                            }
                            else
                            {
                                string Token = table.Rows[0]["OrderCount"].ToString();
                                string Message = "{\"responseType\": 0,\"TotalOrders\": \"" + Token + "\",\"Allowed\": \"true\"}";

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message);
                            }

                        }
                        else
                        {
                            string Message = "{\"responseType\": 1,\"TotalOrders\": \"0\",\"Allowed\": \"false\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }

                    }
                }
            }
            catch (Exception ex)
            { }
        }
      
        public void AddFeedback()
        {
            try
            {
                if (Request["Name"] != null && Request["Phone"] != null && Request["Feedback"] != null)
                {
                    if (!checkForSQLInjection(Request["Name"]) && !checkForSQLInjection(Request["Phone"]) && !checkForSQLInjection(Request["Feedback"]))
                    {
                        string Name = Request.QueryString["Name"].ToString();
                        string Phone = Request.QueryString["Phone"].ToString();
                        string Feedback = Request.QueryString["Feedback"].ToString();

                        string CustomerID = "";
                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }

                        //DataTable dtCheckCustomer = DBHandler.GetData(string.Format("select ID from customer where mobile = '{0}'", Phone));
                        //if (dtCheckCustomer.Rows.Count > 0)
                        //{
                        //    if (CustomerID != dtCheckCustomer.Rows[0]["ID"].ToString())
                        //    {
                        //        string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                        //        Response.Clear();
                        //        Response.ContentType = "application/json; charset=utf-8";
                        //        Response.Write(Message.ToString());

                        //        return;
                        //    }
                        //}



                        Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  feedback(Name,Phone,Feedback,Created) values('{0}','{1}','{2}','{3}')",
                                       Name, Phone, Feedback, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        if (JSONID > 0)
                        {
                            string Message = "{\"responseType\": 1,\"FeedbackNumber\": " + JSONID + ",\"message\": \"Feedback added successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot add Record at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Special characters not allowed\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            { }
        }
        
        public void CustomerAdditionalInfo()
        {
            try
            {
                if (Request["Email"] != null && Request["Birthday"] != null && Request["Gender"] != null && Request["CustomerID"] != null)
                {
                    if (!checkForSQLInjection(Request["Email"]) && !checkForSQLInjection(Request["Birthday"]) && !checkForSQLInjection(Request["Gender"]) && !checkForSQLInjection(Request["CustomerID"]))
                    {
                        string Email = Request.QueryString["Email"].ToString();
                        string Birthday = Request.QueryString["Birthday"].ToString();
                        string Gender = Request.QueryString["Gender"].ToString();
                        string CustomerID = Request.QueryString["CustomerID"].ToString();

                        Int64 JSONID = 0;
                        if (Email != "")
                        {
                            //Birthday = Convert.ToDateTime(Birthday).ToString("yyyy-MM-dd");

                            JSONID = DBHandler.InsertDataForOrder(string.Format("update customer set  Email = '{0}' where id = '{1}'",
                                       Email, CustomerID));
                        }
                        if (Birthday != "")
                        {
                            //Birthday = Convert.ToDateTime(Birthday).ToString("yyyy-MM-dd");

                            JSONID = DBHandler.InsertDataForOrder(string.Format("update customer set  DOB = '{0}' where id = '{1}'",
                                       Birthday, CustomerID));
                        }
                        if (Gender != "")
                        {
                            //Birthday = Convert.ToDateTime(Birthday).ToString("yyyy-MM-dd");

                            JSONID = DBHandler.InsertDataForOrder(string.Format("update customer set  Gender = '{0}' where id = '{1}'",
                                       Gender, CustomerID));
                        }


                        //Int64 JSONID = DBHandler.InsertDataForOrder(string.Format("update customer set Email = '{0}', DOB = '{1}', Gender = '{2}' where id = '{3}'",
                        //               Email, Birthday, Gender, CustomerID));

                        if (JSONID > 0)
                        {
                            string Message = "{\"responseType\": 1,\"message\": \"Information updated successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot update information at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Special characters not allowed\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void GetCustomerInfo()
        {
            try
            {
                //if (Request["CustomerID"] != null)
                //{
                //    if (!checkForSQLInjection(Request["CustomerID"]))
                //    {
                string CustomerID = "";
                //if (Request["CustomerID"] != null)
                //{
                //    if (!checkForSQLInjection(Request["CustomerID"]))
                //    {
                //        CustomerID = Request["CustomerID"].ToString();
                //    }
                //}

               if (Request.Headers["X-Authorization"] != null)
                {
                     string CustomerToken = Request.Headers["X-Authorization"].ToString();
                    string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                    CustomerID = ValidateCustomerToken.Split(',')[1];
                    if (ValidateCustomerToken.Split(',')[0] != "Valid")
                    {
                        string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                        //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());

                        return;
                    }
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }


                DataTable table = DBHandler.GetData(string.Format("SELECT * FROM customer WHERE ID = '{0}'  ", CustomerID));

                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {


                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }

                //    }
                //}
            }
            catch (Exception ex)
            { }
        }

        public void AddViewUnavailableItem()
        {
            try
            {
                if (Request["CustomerID"] != null && Request["BranchCode"] != null && Request["ProductID"] != null && Request["UPC"] != null && Request["ProdutName"] != null)
                {
                    if (!checkForSQLInjection(Request["CustomerID"]) && !checkForSQLInjection(Request["BranchCode"]) && !checkForSQLInjection(Request["ProductID"]) && !checkForSQLInjection(Request["UPC"]) && !checkForSQLInjection(Request["ProdutName"]))
                    {
                        string CustomerID = Request.QueryString["CustomerID"].ToString();
                        string BranchCode = Request.QueryString["BranchCode"].ToString();
                        string ProductID = Request.QueryString["ProductID"].ToString();
                        string UPC = Request.QueryString["UPC"].ToString();
                        string ProdutName = Request.QueryString["ProdutName"].ToString();


                        Int64 JSONID = DBHandler.InsertDataWithID(string.Format("insert into  viewunavailableitem(CustomerID,BranchCode,ProductID,UPC,ProductName,Created) values('{0}','{1}','{2}','{3}','{4}','{5}')",
                                       CustomerID, BranchCode, ProductID, UPC, ProdutName, DateTime.Now.ToString("yyyy-MM-dd H:mm:ss")));

                        if (JSONID > 0)
                        {
                            string Message = "{\"responseType\": 1,\"message\": \"Record added successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot add Record at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                    }
                    else
                    {
                        string Message = "{\"responseType\": 0,\"message\": \"Special characters not allowed\"}";

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message);
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void GetCustomerVouchers()
        {
            try
            {
                string Message = "";
                string CustomerID = "";

                //if (Request["CustomerID"] != null)
                //{
                //    if (!checkForSQLInjection(Request["CustomerID"]))
                //    {
                //        CustomerID = Request["CustomerID"].ToString();
                //    }
                //}

               if (Request.Headers["X-Authorization"] != null)
                {
                     string CustomerToken = Request.Headers["X-Authorization"].ToString();
                    string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                    CustomerID = ValidateCustomerToken.Split(',')[1];
                    if (ValidateCustomerToken.Split(',')[0] != "Valid")
                    {
                        Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                        //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());

                        return;
                    }
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());

                    return;
                }

                DataTable table = DBHandler.GetData(string.Format("SELECT * FROM `customerVoucher` c INNER JOIN discountvouchers d ON c.voucherid = d.id where c.customerid = '{0}'", CustomerID));
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {



                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "'") + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString().Replace("\"", "'") + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void DeleteCreditCard()
        {
            try
            {
                if (Request["Token"] != null)
                {
                    if (!checkForSQLInjection(Request["Token"]))
                    {
                        string CustomerID = "";
                        //if (Request["CustomerID"] != null)
                        //{
                        //    if (!checkForSQLInjection(Request["CustomerID"]))
                        //    {
                        //        CustomerID = Request["CustomerID"].ToString();
                        //    }
                        //}


                       if (Request.Headers["X-Authorization"] != null)
                        {
                             string CustomerToken = Request.Headers["X-Authorization"].ToString();
                            string ValidateCustomerToken = ValidateCustomerJWT(CustomerToken, CustomerID); //"Valid"; // 
                            CustomerID = ValidateCustomerToken.Split(',')[1];
                            if (ValidateCustomerToken.Split(',')[0] != "Valid")
                            {
                                string Message = "{\"responseType\": \"0\",\"Message\": \"Invalid Customer Token\",\"Data\": [] }";

                                //string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());

                                return;
                            }
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Message\": \"Customer token is requied\", \"CustomerID\": \"0\"}";
                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());

                            return;
                        }


                        //string CustomerID = Request["CustomerID"].ToString();
                        string Token = Request["Token"].ToString();
                        Int64 JSONID = DBHandler.InsertDataForOrder(string.Format("delete from creditcard where CustomerID = '{0}' and token = '{1}'", CustomerID, Token));

                        if (JSONID > 0)
                        {
                            string Message = "{\"responseType\": 1,\"message\": \"Credit Card deleted successfully\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }
                        else
                        {
                            string Message = "{\"responseType\": 0,\"message\": \"Cannot deleted credit card at the moment\"}";

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message);
                        }

                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void GetNewSlug()
        {
            try
            {
                if (Request["OldSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["OldSlug"]))
                    {

                        DataTable table1 = DBHandler.GetDataCache(string.Format("SELECT * FROM slugoldnew ", Request["OldSlug"].ToString()), "GetNewSlug");


                        // DataTable table = DBHandler.GetData(string.Format("SELECT * FROM slugoldnew WHERE oldslug = '{0}'  ", Request["OldSlug"].ToString()));
                        DataTable table = new DataTable();

                        DataRow[] rows = table1.Select("oldslug = '" + Request["OldSlug"].ToString() + "' ");

                        //Random r = new Random();
                        //var rowsTaken = new HashSet<int>();
                        //table = dtCacheData.Clone();
                        //for (int i = 0; i < 15; i++)
                        //{
                        //    int rndRowIndex = r.Next(dtCacheData.Rows.Count);
                        //    while (!rowsTaken.Add(rndRowIndex))
                        //        rndRowIndex = r.Next(dtCacheData.Rows.Count);
                        //    DataRow randomRow = dtCacheData.Rows[rndRowIndex];
                        //    table.ImportRow(randomRow);
                        //}




                        if (rows.Length > 0)
                        {
                            table = rows.CopyToDataTable();

                            var JSONString = new StringBuilder();

                            if (table.Rows.Count > 0)
                            {
                                if (table.Rows.Count > 0)
                                {
                                    JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                                    for (int i = 0; i < table.Rows.Count; i++)
                                    {
                                        JSONString.Append("{");
                                        for (int j = 0; j < table.Columns.Count; j++)
                                        {
                                            if (j < table.Columns.Count - 1)
                                            {
                                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                            }
                                            else if (j == table.Columns.Count - 1)
                                            {
                                                JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                            }
                                        }


                                        if (i == table.Rows.Count - 1)
                                        {
                                            JSONString.Append("}]");
                                        }
                                        else
                                        {
                                            JSONString.Append("},");
                                        }
                                    }
                                    JSONString.Append("}");
                                }

                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(JSONString.ToString());
                            }
                            else
                            {
                                string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                                Response.Clear();
                                Response.ContentType = "application/json; charset=utf-8";
                                Response.Write(Message.ToString());
                            }

                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            { }
        }

        public void GetBankBanners()
        {
            try
            {
                string Message = "";
                string Number = "";

                DataTable table = DBHandler.GetData("SELECT * FROM bankbanners WHERE isactive = 1 ORDER BY `order`");
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    if (table.Columns[j].ColumnName.ToString() == "Details")
                                    {
                                        if (table.Rows[i][j].ToString() != "")
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "" + table.Rows[i][j].ToString() + ",");
                                        }
                                        else
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                    }
                                    else
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }
                                    
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }
        
        public void GetProductsforSiteMap()
        {
            try
            {
                string Message = "";
                string Number = "";
                string Alphabet = "";
                if (Request.QueryString["Alphabet"] != null)
                {
                    if (!checkForSQLInjection(Request["Alphabet"]))
                    {
                        Alphabet = Request.QueryString["Alphabet"].ToString();
                    }
                }
                //DataTable table = DBHandler.GetData("SELECT title, `ImageURL`,  CONCAT('https://Jewar.pk/products/',slug) AS ProductLink, NOW() AS `Date` FROM products WHERE isactive = 1");
                DataTable table = DBHandler.GetData(string.Format("SELECT  CONCAT('https://Jewar.pk/p/',slug) AS 'loc' ,  NOW() as `lastmod`   FROM products WHERE  title like '{0}%' order by title", Alphabet));
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (Request["download"] != null)
                    {
                        if (Request["download"].ToString() == "yes")
                        {
                            table = DBHandler.GetData("SELECT   CONCAT('https://Jewar.pk/products/',slug) AS ProductLink, NOW() AS `Date` FROM products");

                            DataSet ds = new DataSet();

                            DataTable dtCopy = table.Copy();
                            ds.Tables.Add(dtCopy);

                            //ds.Tables.Add(dtCopy); // Table 1 
                            string dsXml = ds.GetXml();

                            //string fileName = @"C:\Users\amanm\Downloads\sitemap.xml";
                            // string fileName = @"C:\sitemap\sitemap.xml";
                            //using (StreamWriter fs = new StreamWriter(fileName)) // XML File Path
                            //{
                            //    ds.WriteXml(fs);
                            //}

                            
                            ds.WriteXml(Server.MapPath("~/sitemap.xml"));

                            if (System.IO.File.Exists(Server.MapPath("~/sitemap.xml")))
                            {
                                //DownloadFile(Server.MapPath("~/sitemap.xml"));

                                Response.ContentType = "application/xml";
                                Response.AddHeader("Content-Disposition", "attachment;filename=sitemap.xml");
                                Response.WriteFile(Server.MapPath("~/sitemap.xml"));
                                Response.End();

                            }

                        }
                    }

                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    if (table.Columns[j].ColumnName.ToString() == "Details")
                                    {
                                        if (table.Rows[i][j].ToString() != "")
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "" + table.Rows[i][j].ToString() + ",");
                                        }
                                        else
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                    }
                                    else
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }

                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);
            }
        }

        public void GetCategoriesforSiteMap()
        {
            try
            {
                string Message = "";
                string Number = "";

                //DataTable table = DBHandler.GetData("SELECT title, `ImageURL`,  CONCAT('https://Jewar.pk/products/',slug) AS ProductLink, NOW() AS `Date` FROM products WHERE isactive = 1");
                DataTable table = DBHandler.GetData("SELECT  CONCAT('https://Jewar.pk/cat/',slug) AS 'loc' ,  ModifiedDate AS `lastmod`   FROM categories_new WHERE isactive = 1 ORDER BY `name`");
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (Request["download"] != null)
                    {
                        if (Request["download"].ToString() == "yes")
                        {
                            DataSet ds = new DataSet();

                            DataTable dtCopy = table.Copy();
                            ds.Tables.Add(dtCopy);

                            //ds.Tables.Add(dtCopy); // Table 1 
                            string dsXml = ds.GetXml();

                            //string fileName = @"C:\sitemap\categoriessitemap.xml";
                            //using (StreamWriter fs = new StreamWriter(fileName)) // XML File Path
                            //{
                            //    ds.WriteXml(fs);
                            //}

                            ds.WriteXml(Server.MapPath("~/categoriessitemap.xml"));

                            if (System.IO.File.Exists(Server.MapPath("~/categoriessitemap.xml")))
                            {
                                //DownloadFile(Server.MapPath("~/sitemap.xml"));

                                Response.ContentType = "application/xml";
                                Response.AddHeader("Content-Disposition", "attachment;filename=categoriessitemap.xml");
                                Response.WriteFile(Server.MapPath("~/categoriessitemap.xml"));
                                Response.End();

                            }
                        }
                    }

                            if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    if (table.Columns[j].ColumnName.ToString() == "Details")
                                    {
                                        if (table.Rows[i][j].ToString() != "")
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "" + table.Rows[i][j].ToString() + ",");
                                        }
                                        else
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                    }
                                    else
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }

                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);
            }
        }

        public void GetBrandsforSiteMap()
        {
            try
            {
                string Message = "";
                string Number = "";

                //DataTable table = DBHandler.GetData("SELECT title, `ImageURL`,  CONCAT('https://Jewar.pk/products/',slug) AS ProductLink, NOW() AS `Date` FROM products WHERE isactive = 1");
                DataTable table = DBHandler.GetData("SELECT  CONCAT('https://Jewar.pk/brands/',slug) AS 'loc' ,  NOW() AS `lastmod`   FROM brands order by `name`");
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (Request["download"] != null)
                    {
                        if (Request["download"].ToString() == "yes")
                        {
                            DataSet ds = new DataSet();

                            DataTable dtCopy = table.Copy();
                            ds.Tables.Add(dtCopy);

                            //ds.Tables.Add(dtCopy); // Table 1 
                            string dsXml = ds.GetXml();

                            //string fileName = @"C:\sitemap\brandssitemap.xml";
                            //using (StreamWriter fs = new StreamWriter(fileName)) // XML File Path
                            //{
                            //    ds.WriteXml(fs);
                            //}

                            ds.WriteXml(Server.MapPath("~/brandssitemap.xml"));

                            if (System.IO.File.Exists(Server.MapPath("~/brandssitemap.xml")))
                            {
                                //DownloadFile(Server.MapPath("~/sitemap.xml"));

                                Response.ContentType = "application/xml";
                                Response.AddHeader("Content-Disposition", "attachment;filename=brandssitemap.xml");
                                Response.WriteFile(Server.MapPath("~/brandssitemap.xml"));
                                Response.End();

                            }

                        }
                    }
                            if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    if (table.Columns[j].ColumnName.ToString() == "Details")
                                    {
                                        if (table.Rows[i][j].ToString() != "")
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "" + table.Rows[i][j].ToString() + ",");
                                        }
                                        else
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                    }
                                    else
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }

                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);
            }
        }

        public void GetBlogsforSiteMap()
        {
            try
            {
                string Message = "";
                string Number = "";

                //DataTable table = DBHandler.GetData("SELECT title, `ImageURL`,  CONCAT('https://Jewar.pk/products/',slug) AS ProductLink, NOW() AS `Date` FROM products WHERE isactive = 1");
                DataTable table = DBHandler.GetData("SELECT  CONCAT('https://Jewar.pk/blogs/',slug) AS 'loc' ,  NOW() AS `lastmod`   FROM blogs order by `name`");
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (Request["download"] != null)
                    {
                        if (Request["download"].ToString() == "yes")
                        {
                            DataSet ds = new DataSet();

                            DataTable dtCopy = table.Copy();
                            ds.Tables.Add(dtCopy);

                            //ds.Tables.Add(dtCopy); // Table 1 
                            string dsXml = ds.GetXml();

                            //string fileName = @"C:\sitemap\blogssitemap.xml";
                            //using (StreamWriter fs = new StreamWriter(fileName)) // XML File Path
                            //{
                            //    ds.WriteXml(fs);
                            //}


                            ds.WriteXml(Server.MapPath("~/blogssitemap.xml"));

                            if (System.IO.File.Exists(Server.MapPath("~/blogssitemap.xml")))
                            {
                                //DownloadFile(Server.MapPath("~/sitemap.xml"));

                                Response.ContentType = "application/xml";
                                Response.AddHeader("Content-Disposition", "attachment;filename=blogssitemap.xml");
                                Response.WriteFile(Server.MapPath("~/blogssitemap.xml"));
                                Response.End();

                            }
                        }
                    }

                            if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    if (table.Columns[j].ColumnName.ToString() == "Details")
                                    {
                                        if (table.Rows[i][j].ToString() != "")
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "" + table.Rows[i][j].ToString() + ",");
                                        }
                                        else
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                    }
                                    else
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }

                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);
            }
        }

        public void GetBannerforCheckout()
        {
            try
            {
                string Message = "";
                string CartType = "cart";

                if (Request["CartType"] != null)
                {
                    if (!checkForSQLInjection(Request["CartType"]))
                    {
                        CartType = Request["CartType"].ToString();
                    }
                }

                        DataTable table = DBHandler.GetData(string.Format(@"SELECT CONCAT('https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Banners/',BannerImageGUID ,'.jpg') AS ImageURL
FROM bannerimages
WHERE typevalue = '{0}' and IsActive = 1", CartType));
                var JSONString = new StringBuilder();

                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    if (table.Columns[j].ColumnName.ToString() == "Details")
                                    {
                                        if (table.Rows[i][j].ToString() != "")
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "" + table.Rows[i][j].ToString() + ",");
                                        }
                                        else
                                        {
                                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                        }
                                    }
                                    else
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }

                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }



            }
            catch (Exception ex)
            { }
        }

        public void CheckTypeBySlug()
        {
            try
            {
                if (Request["OldSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["OldSlug"]))
                    {

                        DataTable table = DBHandler.GetData(string.Format(@"
SELECT 'Brand' AS `Type`, ID , `name` AS Title, Slug, 
(SELECT COUNT(*) FROM products WHERE vendor = brands.name) AS ProductCount FROM  brands WHERE slug LIKE '{0}%' 
UNION
SELECT 'Collection' AS `Type`, ID , Title, Slug , 
0 AS ProductCount FROM  productcollection  WHERE slug LIKE  '{0}%'   AND isactive = 1
UNION
SELECT 'Category' AS `Type`, ID , `name` AS Title, Slug, 
(SELECT COUNT(*) FROM products p INNER JOIN `productcategories` c ON p.id = c.productid
WHERE c.`CategoryID` = categories_new.`ID` ) AS ProductCount FROM  categories_new  WHERE slug LIKE '{0}%'  AND isactive = 1
ORDER BY ProductCount DESC   LIMIT 1
", Request["OldSlug"].ToString()));

                        if (table.Rows.Count == 0)
                        {
                            table = DBHandler.GetData(string.Format(@"
SELECT 'Brand' AS `Type`, ID , `name` AS Title, Slug, 
(SELECT COUNT(*) FROM products WHERE vendor = brands.name) AS ProductCount FROM  brands WHERE slug LIKE '{0}%' 
UNION
SELECT 'Collection' AS `Type`, ID , Title, Slug , 
0 AS ProductCount FROM  productcollection  WHERE slug LIKE  '{0}%'   AND isactive = 1
UNION
SELECT 'Category' AS `Type`, ID , `name` AS Title, Slug, 
(SELECT COUNT(*) FROM products p INNER JOIN `productcategories` c ON p.id = c.productid
WHERE c.`CategoryID` = categories_new.`ID` ) AS ProductCount FROM  categories_new  WHERE slug LIKE '{0}%'  AND isactive = 1
ORDER BY ProductCount DESC   LIMIT 1
", Request["OldSlug"].ToString().Split('-')[0]));

                        }


                        // DataTable table = DBHandler.GetData(string.Format("SELECT * FROM slugoldnew WHERE oldslug = '{0}'  ", Request["OldSlug"].ToString()));


                        var JSONString = new StringBuilder();

                        if (table.Rows.Count > 0)
                        {


                            JSONString.Append("{\"ResponseType\": 1,\"Data\": ");
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < table.Columns.Count; j++)
                                {
                                    if (j < table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }
                                    else if (j == table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                    }
                                }


                                if (i == table.Rows.Count - 1)
                                {
                                    JSONString.Append("}");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                            JSONString.Append("}");

                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(JSONString.ToString());
                        }
                        else
                        {
                            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                            Response.Clear();
                            Response.ContentType = "application/json; charset=utf-8";
                            Response.Write(Message.ToString());
                        }

                    //Response.Clear();
                    //    Response.ContentType = "application/json; charset=utf-8";
                    //    Response.Write(JSONString.ToString());
                    }
                    else
                    {
                        string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(Message.ToString());
                    }


                }
            }
            catch (Exception ex)
            { }
        }


        public void BlogListing()
        {
            try
            {

                string where = "";

                if (Request["Search"] != null)
                {
                    if (!checkForSQLInjection(Request["Search"]))
                    {
                        string Search = Request["Search"].ToString();
                        where = string.Format(" AND (NAME LIKE '%{0}%' OR title LIKE '%{0}%' OR content LIKE '%{0}%')", Search);
                    }
                }
                //DataTable table = DBHandler.GetData(string.Format(@"select * from blogs where isactive = 1 {0} order by id desc",where));

                DataTable table = DBHandler.GetData(string.Format(@"select Slug, Title,  ImageURL1, Created , IsFeatured, IsTrending from blogs where isactive = 1 {0} order by id desc", where));

                var JSONString = new StringBuilder();
                    if (table.Rows.Count > 0)
                    {
                        if (table.Rows.Count > 0)
                        {
                            JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                            for (int i = 0; i < table.Rows.Count; i++)
                            {
                                JSONString.Append("{");
                                for (int j = 0; j < table.Columns.Count; j++)
                                {
                                    if (j < table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                    }
                                    else if (j == table.Columns.Count - 1)
                                    {
                                        JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                    }
                                }

                                if (i == table.Rows.Count - 1)
                                {
                                    JSONString.Append("}]");
                                }
                                else
                                {
                                    JSONString.Append("},");
                                }
                            }
                            JSONString.Append("}");
                        }

                        Response.Clear();
                        Response.ContentType = "application/json; charset=utf-8";
                        Response.Write(JSONString.ToString());
                   

                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }
            }
            catch (Exception ex)
            { }
        }

        //public void VideoListing()
        //{
        //    try
        //    {

        //        string where = "";
        //        string Search = "";
        //        if (Request["Search"] != null)
        //        {
        //            if (!checkForSQLInjection(Request["Search"]))
        //            {
        //                Search = Request["Search"].ToString();
        //                where = string.Format(" AND (Title LIKE '%{0}%' OR tags LIKE '%{0}%')", Search);
        //            }
        //        }

        //        string limit = "";
        //        if (Request["limit"] != null)
        //        {
        //            if (!checkForSQLInjection(Request["limit"]))
        //            {
        //                limit = "limit " + Request.QueryString["limit"].ToString();
        //            }
        //        }

        //        DataTable table1 = DBHandler.GetData(string.Format(@"select tags from videos where isactive = 1 order by tags"));


        //        DataTable table = DBHandler.GetData(string.Format(@"select * from videos where isactive = 1 {0} order by id desc {1}", where, limit));

        //        string Tags = "";
        //        string ProductTags = "";
        //        if (table1.Rows.Count > 0)
        //        {
        //            if (Search == "")
        //            {
        //                for (int i = 0; i < table1.Rows.Count; i++)
        //                {
        //                    if (!Tags.Contains(table1.Rows[i]["tags"].ToString()))
        //                    {
        //                        Tags += "\"" + table1.Rows[i]["tags"].ToString() + "\",";
        //                    }
        //                }
        //                Tags = Tags.TrimEnd(',');
        //            }
        //        }



        //        var JSONString = new StringBuilder();
        //        if (table.Rows.Count > 0)
        //        {
        //            if (table.Rows.Count > 0)
        //            {
        //                JSONString.Append("{\"ResponseType\": 1,\"Tags\": [" + Tags + "],\"Data\": [");
        //                for (int i = 0; i < table.Rows.Count; i++)
        //                {
        //                    string Products = "";
        //                    string TagSingle = "";

        //                    for(int b=0;b< table.Rows[i]["Tags"].ToString().Split(',').Length;b++)
        //                    {
        //                        TagSingle +=  "\"" + table.Rows[i]["tags"].ToString().Split(',')[b] + "\",";
        //                    }

        //                    TagSingle = TagSingle.TrimEnd(',');

        //                    DataTable dtProducts = DBHandler.GetData(string.Format("select ID,Slug,Title,ImageURL,VariationTitle, ifnull((select price from productsstock where productid = products.id limit 1),'0' ) as Price from products where usedfor in ({0}) and isactive = 1 limit 6 ", TagSingle));

        //                    JSONString.Append("{");


        //                    if (dtProducts.Rows.Count > 0)
        //                    {
        //                        for (int a = 0; a < dtProducts.Rows.Count; a++)
        //                        {
        //                            Products += "{\"ID\" : \"" + dtProducts.Rows[a]["ID"].ToString() + "\",\"Slug\" : \"" + dtProducts.Rows[a]["Slug"].ToString() + "\",\"Title\" : \"" + dtProducts.Rows[a]["Title"].ToString() + "\",\"ImageURL\" : \"" + dtProducts.Rows[a]["ImageURL"].ToString() + "\",\"VariationTitle\" : \"" + dtProducts.Rows[a]["VariationTitle"].ToString() + "\",\"Price\" : \"" + dtProducts.Rows[a]["Price"].ToString() + "\"},";
        //                        }

        //                        Products = Products.TrimEnd(',');
        //                    }


        //                    for (int j = 0; j < table.Columns.Count; j++)
        //                    {
        //                        if (j < table.Columns.Count - 1)
        //                        {
        //                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
        //                        }
        //                        else if (j == table.Columns.Count - 1)
        //                        {
        //                            JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
        //                        }
        //                    }

        //                    if (i == table.Rows.Count - 1)
        //                    {
        //                        if (Products != "")
        //                        {
        //                            JSONString.Append(",\"Products\": [");
        //                            JSONString.Append(Products);
        //                            JSONString.Append("]");
        //                        }
        //                        else
        //                        {
        //                            JSONString.Append(",\"Products\": []");
        //                        }


        //                        JSONString.Append("}]");
        //                    }
        //                    else
        //                    {
        //                        if (Products != "")
        //                        {
        //                            JSONString.Append(",\"Products\": [");
        //                            JSONString.Append(Products);
        //                            JSONString.Append("]");
        //                        }
        //                        else
        //                        {
        //                            JSONString.Append(",\"Products\": []");
        //                        }


        //                        JSONString.Append("},");
        //                    }
        //                }
        //                JSONString.Append("}");
        //            }

        //            Response.Clear();
        //            Response.ContentType = "application/json; charset=utf-8";
        //            Response.Write(JSONString.ToString());


        //        }
        //        else
        //        {
        //            string Message = "{\"responseType\": \"0\",\"Data\": [] }";


        //            Response.Clear();
        //            Response.ContentType = "application/json; charset=utf-8";
        //            Response.Write(Message.ToString());
        //        }
        //    }
        //    catch (Exception ex)
        //    { }
        //}


        public void VideoListing()
        {
            try
            {

                string where = "";
                string Search = "";
                if (Request["Search"] != null)
                {
                    if (!checkForSQLInjection(Request["Search"]))
                    {
                        Search = Request["Search"].ToString();
                        where = string.Format(" AND (Title LIKE '%{0}%' OR tags LIKE '%{0}%')", Search);
                    }
                }

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }
                }

                DataTable table1 = DBHandler.GetData(string.Format(@"select tags from videos where isactive = 1 order by tags"));


                DataTable table = DBHandler.GetData(string.Format(@"select * from videos where isactive = 1 {0} order by id desc {1}", where, limit));

                string Tags = "";
                string ProductTags = "";
                if (table1.Rows.Count > 0)
                {
                    if (Search == "")
                    {
                        for (int i = 0; i < table1.Rows.Count; i++)
                        {
                            if (!Tags.Contains(table1.Rows[i]["tags"].ToString()))
                            {
                                Tags += "\"" + table1.Rows[i]["tags"].ToString() + "\",";
                            }
                        }
                        Tags = Tags.TrimEnd(',');
                    }
                }



                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Tags\": [" + Tags + "],\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            string Products = "";
                            string TagSingle = "";

                            for (int b = 0; b < table.Rows[i]["Tags"].ToString().Split(',').Length; b++)
                            {
                                TagSingle += "\"" + table.Rows[i]["tags"].ToString().Split(',')[b] + "\",";
                            }

                            TagSingle = TagSingle.TrimEnd(',');

                            DataTable dtProducts = DBHandler.GetData(string.Format("select ID,Slug,Title,ImageURL,VariationTitle, ifnull((select IFNULL(`Price` * products.`unitpercase1` , 0) as  price from productsstock where productid = products.id order by created desc limit 1),'0' ) as Price , ifnull((select IFNULL(`DiscountPrice` * products.`unitpercase1` , 0) as  DiscountPrice from productsstock where productid = products.id order by created desc limit 1),'0' ) as DiscountPrice from products where usedfor in ({0}) and isactive = 1 limit 6 ", TagSingle));

                            JSONString.Append("{");


                            if (dtProducts.Rows.Count > 0)
                            {
                                for (int a = 0; a < dtProducts.Rows.Count; a++)
                                {
                                    Products += "{\"ID\" : \"" + dtProducts.Rows[a]["ID"].ToString() + "\",\"Slug\" : \"" + dtProducts.Rows[a]["Slug"].ToString() + "\",\"Title\" : \"" + dtProducts.Rows[a]["Title"].ToString() + "\",\"ImageURL\" : \"" + dtProducts.Rows[a]["ImageURL"].ToString() + "\",\"VariationTitle\" : \"" + dtProducts.Rows[a]["VariationTitle"].ToString() + "\",\"Price\" : \"" + dtProducts.Rows[a]["Price"].ToString() + "\",\"DiscountPrice\" : \"" + dtProducts.Rows[a]["DiscountPrice"].ToString() + "\"},";
                                }

                                Products = Products.TrimEnd(',');
                            }


                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                if (Products != "")
                                {
                                    JSONString.Append(",\"Products\": [");
                                    JSONString.Append(Products);
                                    JSONString.Append("]");
                                }
                                else
                                {
                                    JSONString.Append(",\"Products\": []");
                                }


                                JSONString.Append("}]");
                            }
                            else
                            {
                                if (Products != "")
                                {
                                    JSONString.Append(",\"Products\": [");
                                    JSONString.Append(Products);
                                    JSONString.Append("]");
                                }
                                else
                                {
                                    JSONString.Append(",\"Products\": []");
                                }


                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());


                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }
            }
            catch (Exception ex)
            { }
        }

        public void VideoSuggestion()
        {
            try
            {

                string where = "";

                if (Request["Alphabet"] != null)
                {
                    if (!checkForSQLInjection(Request["Alphabet"]))
                    {
                        string Alphabet = Request["Alphabet"].ToString();
                        where = string.Format(" AND (Title LIKE '{0}%' OR tags LIKE '{0}%')", Alphabet);
                    }
                }

                string limit = "";
                if (Request["limit"] != null)
                {
                    if (!checkForSQLInjection(Request["limit"]))
                    {
                        limit = "limit " + Request.QueryString["limit"].ToString();
                    }
                }

                DataTable table = DBHandler.GetData(string.Format(@"select distinct Title from videos where isactive = 1 {0} order by id desc {1}", where, limit));



                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }

                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());


                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }
            }
            catch (Exception ex)
            { }
        }


        public void GetBlogBySlug()
        {
            try
            {
                string BlogSlug = "";
                if (Request.QueryString["BlogSlug"] != null)
                {
                    if (!checkForSQLInjection(Request["BlogSlug"]))
                    {
                        BlogSlug = Request.QueryString["BlogSlug"].ToString();
                    }
                }
                                

                DataTable table = new DataTable();
                 

                table = DBHandler.GetData(string.Format(@"select * from blogs where slug = '{0}' and isactive = 1", BlogSlug));

               
                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"ResponseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetMenuHierarchi()
        {
            try
            {

                /*
                SELECT ID,`Name`,Slug ,ParentID, '1' AS `level` FROM categories_new WHERE NAME = 'Baby & Mother Care'
UNION
SELECT ID,`Name`,Slug ,ParentID, '2' AS `level` FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE NAME = 'Baby & Mother Care')
UNION
SELECT ID,`Name`,Slug ,ParentID , '3' AS `level` FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE NAME = 'Baby & Mother Care'))
UNION
SELECT ID,`Name`,Slug ,ParentID , '4' AS `level` FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE NAME = 'Baby & Mother Care')))



                */
                string CategoryName = "";
                if (Request.QueryString["CategoryName"] != null)
                {
                    if (!checkForSQLInjection(Request["CategoryName"]))
                    {
                        CategoryName = Request.QueryString["CategoryName"].ToString();
                    }
                }

                DataTable table = DBHandler.GetDataCache(string.Format(@"SELECT ID,`Name`,Slug ,ParentID  FROM categories_new WHERE NAME = '{0}'
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE NAME = '{0}')
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE NAME = '{0}'))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE NAME = '{0}')))
UNION
SELECT ID,`Name`,Slug ,ParentID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE parentid IN
(SELECT ID FROM categories_new WHERE NAME = '{0}'))))", CategoryName), "GetMenuHierarchi" + CategoryName);
                string JSON = "";
                if (table.Rows.Count > 0)
                {

                    Dictionary<int, CategoriesMenu> dict =
                        table.Rows.Cast<DataRow>()
                                  .Select(r => new CategoriesMenu
                                  {
                                      ID = r.Field<int>("ID"),
                                      ParentID = r.Field<int>("ParentID"),
                                      Name = r.Field<string>("Name"),
                                      Slug = r.Field<string>("Slug") 
                                      
                                  })
                                 .ToDictionary(m => m.ID);


                    List<CategoriesMenu> rootMenu = new List<CategoriesMenu>();

                    foreach (var kvp in dict)
                    {
                        List<CategoriesMenu> menu = rootMenu;
                        CategoriesMenu item = kvp.Value;
                        if (item.ParentID > 0)
                        {
                            try
                            {
                                menu = dict[item.ParentID].SubMenu;
                            }
                            catch (Exception e)
                            { }
                        }
                        menu.Add(item);
                    }


                    string json = JsonConvert.SerializeObject(rootMenu, Formatting.Indented);
                    Response.Write(json);
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }
            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetBrands()
        {
            try
            {
                string BlogSlug = "";
                //if (Request.QueryString["BlogSlug"] != null)
                //{
                //    if (!checkForSQLInjection(Request["BlogSlug"]))
                //    {
                //        BlogSlug = Request.QueryString["BlogSlug"].ToString();
                //    }
                //}


                DataTable table = new DataTable();


                table = DBHandler.GetData(string.Format(@"SELECT ID,`Name`, Slug, BrandLogo FROM brands WHERE brandlogo IS NOT NULL ORDER BY `name`", BlogSlug));


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Name"] = cityTI.ToTitleCase(dr["Name"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }
        
        public void GetSuggestiveProducts()
        {
            try
            {
                string Category = "";
                if (Request.QueryString["Category"] != null)
                {
                    if (!checkForSQLInjection(Request["Category"]))
                    {
                        Category = Request.QueryString["Category"].ToString();
                    }
                }


                DataTable table = new DataTable();
                

                table = DBHandler.GetData(string.Format(@"

SELECT DISTINCT 
p.`ID`, p.id as ProductID, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription FROM 
 products p  
-- INNER JOIN  `productvariation` pv ON p.id = pv.Productid
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID`
-- INNER JOIN `categories` c ON p.ProductType = c.Name
 WHERE p.producttype = '{0}' and p.isactive = 1 and IsSuggestive = 1  and  p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND store_no = 32 order by p.id desc limit 6
", Category));


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetSuggestiveProductsV1()
        {
            try
            {
                string Usedfor = "";
                string UPC = "";
                string OutletID = "0";

                if (Request.QueryString["Usedfor"] != null)
                {
                    if (!checkForSQLInjection(Request["Usedfor"]))
                    {
                        Usedfor = Request.QueryString["Usedfor"].ToString();
                    }
                }
                if (Request.QueryString["UPC"] != null)
                {
                    if (!checkForSQLInjection(Request["UPC"]))
                    {
                        UPC = " and p.ShopifyProductID != '" + Request.QueryString["UPC"].ToString() + "'";
                    }
                }
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }


                DataTable table = new DataTable();


                table = DBHandler.GetData(string.Format(@"

SELECT DISTINCT 
p.`ID`, p.id as ProductID, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription 

FROM 
 products p   
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` 
 WHERE p.Usedfor = '{0}' and p.isactive = 1   and  p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND store_no = '{1}' {2}  order by p.id desc limit 6
", Usedfor, OutletID, UPC));


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void GetSuggestiveProductsV2()
        {
            try
            {
                string Usedfor = "";
                string UPC = "";
                string OutletID = "0";

                if (Request.QueryString["Usedfor"] != null)
                {
                    if (!checkForSQLInjection(Request["Usedfor"]))
                    {
                        Usedfor = Request.QueryString["Usedfor"].ToString();
                    }
                }
                if (Request.QueryString["UPC"] != null)
                {
                    if (!checkForSQLInjection(Request["UPC"]))
                    {
                        UPC = " and p.ShopifyProductID != '" + Request.QueryString["UPC"].ToString() + "'";
                    }
                }
                if (Request.QueryString["BranchCode"] != null)
                {
                    if (!checkForSQLInjection(Request["BranchCode"]))
                    {
                        if (Request["BranchCode"].ToString() != "")
                        {
                            OutletID = Request.QueryString["BranchCode"].ToString();
                        }
                    }
                }


                DataTable table = new DataTable();


                table = DBHandler.GetData(string.Format(@"

SELECT DISTINCT 
p.`ID`, p.id as ProductID, p.Slug  , TRIM(REPLACE(REPLACE(REPLACE(ifnull(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))   AS Title, 0 AS SalePercent, '' AS Highlights, ImageURL AS ProductImage, p.`ProductType` AS Category , p.`Vendor` AS Brand
 , IFNULL(ps.`Price` * p.`unitpercase1` , 0) AS Price , IFNULL(ps.`Price` * p.`unitpercase1` , 0)  AS SalePrice, p.`ShopifyProductID` ,  p.Title AS VariationTitle,   p.unitpercase1 , FLOOR((IFNULL(Qty,0) / unitpercase1)) AS AvailableQty, p.MaxCount AS MaxOrder -- , pv.*
, TRIM(REPLACE(REPLACE(REPLACE(ifnull(p.`Description`,''),'\t',''),'\n',''),'\r',''))   as `Description` , '' AS Variations, CategoryImageURL, IFNULL(ps.`DiscountPrice` * p.`unitpercase1` , 0) AS DiscountPrice, IFNULL(ps.`DiscountAmount` * p.`unitpercase1` , 0) AS DiscountAmount, p.PrescriptionRequired
,'' as MetaTitle , '' As MetaDescription 


, p.`NoofStrips` , IFNULL((p.`NoofStrips` * p.`MaxCount`), 0)   AS MaxStripOrder, IFNULL((ps.`Price` * p.`unitpercase1`) / p.`NoofStrips`, 0)   AS SaleStripPrice , IFNULL((ps.`Price` * p.`unitpercase1`) * p.`NoofStrips`, 0)   AS SaleBoxpPrice  , Floor((ps.`Qty` /  p.`unitpercase1`) * p.`NoofStrips`)AS StripAvailableQty, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) / p.`NoofStrips` , 0) AS DiscountStripAmount, IFNULL((ps.`DiscountPrice` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxPrice, IFNULL((ps.`DiscountAmount` * p.`unitpercase1`) * p.`NoofStrips` , 0) AS DiscountBoxAmount,
IFNULL(p.MetaTitle, CONCAT(TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' - Buy Online at Jewar®')) AS MetaTitle, IFNULL(p.MetaDescription, CONCAT('Buy ' , TRIM(REPLACE(REPLACE(REPLACE(IFNULL(LOWER(REPLACE(p.`Title`, '\'','')),''),'\t',''),'\n',''),'\r',''))  , ' Online in Pakistan at Jewar Pharmacy. Get Genuine Medicines & Products at Discounted Prices with Free Shipping. Order Now!')) AS MetaDescription
, p.unitpercase1 AS TotalTablets,  IFNULL(p.unitpercase1 / p.noofstrips,0) AS TotalStripTablets
,'' AS ParentCategory
 ,'' AS ParentCategorySlug
,p.Usedfor

FROM 
 products p   
 LEFT JOIN productsstock ps ON p.`ID` = ps.`ProductID` 
 WHERE p.Usedfor = '{0}' and p.isactive = 1   and  p.purchase like '%Loc%'  AND (FLOOR((IFNULL(Qty,0) / p.unitpercase1))  > 0)
 AND p.`ImageURL` != 'https://Jewar-assets.s3.ap-southeast-1.amazonaws.com/Brands%20Logo/logo_green.png'
 AND store_no = '{1}' {2}  order by p.id desc -- limit 6
", Usedfor, OutletID, UPC));


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    if (table.Rows.Count > 0)
                    {
                        System.Globalization.TextInfo cityTI = new System.Globalization.CultureInfo("en-US", false).TextInfo;

                        foreach (DataRow dr in table.Rows) // search whole table
                        {
                            dr["Title"] = cityTI.ToTitleCase(dr["Title"].ToString());

                        }

                        JSONString.Append("{\"ResponseType\": 1,\"Data\": [");
                        for (int i = 0; i < table.Rows.Count; i++)
                        {
                            JSONString.Append("{");
                            for (int j = 0; j < table.Columns.Count; j++)
                            {
                                if (j < table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\",");
                                }
                                else if (j == table.Columns.Count - 1)
                                {
                                    JSONString.Append("\"" + table.Columns[j].ColumnName.ToString() + "\":" + "\"" + table.Rows[i][j].ToString() + "\"");


                                    try
                                    {
                                        if (Convert.ToInt32(table.Rows[i]["NoofStrips"]) > 1)
                                        {
                                            //JSONString.Append(",\"Variation\": [");
                                            //JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleBoxpPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountBoxPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountBoxAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["BoxAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            //JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            //JSONString.Append("]");

                                            JSONString.Append(",\"Variation\": [");
                                            JSONString.Append("{\"Type\":" + "\"Box\"," + "\"SalePrice\":\"" + table.Rows[i]["SalePrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["AvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxOrder"].ToString() + "\"," + "\"NoofStrips\":\"" + table.Rows[i]["NoofStrips"].ToString() + "\"},");
                                            JSONString.Append("{\"Type\":" + "\"Strip\"," + "\"SalePrice\":\"" + table.Rows[i]["SaleStripPrice"].ToString() + "\"," + "\"DiscountPrice\":\"" + table.Rows[i]["DiscountStripPrice"].ToString() + "\"," + "\"DiscountAmount\":\"" + table.Rows[i]["DiscountStripAmount"].ToString() + "\"," + "\"TotalTablets\":\"" + table.Rows[i]["TotalStripTablets"].ToString() + "\"," + "\"AvailableQty\":\"" + table.Rows[i]["StripAvailableQty"].ToString() + "\"," + "\"MaxOrder\":\"" + table.Rows[i]["MaxStripOrder"].ToString() + "\"," + "\"NoofStrips\":\"1\"}");
                                            JSONString.Append("]");
                                        }
                                        else
                                        {
                                            JSONString.Append(",\"Variation\": []");
                                        }
                                    }
                                    catch (Exception ee)
                                    { }
                                }
                            }


                            if (i == table.Rows.Count - 1)
                            {
                                JSONString.Append("}]");
                            }
                            else
                            {
                                JSONString.Append("},");
                            }
                        }
                        JSONString.Append("}");
                    }

                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(JSONString.ToString());
                }
                else
                {
                    string Message = "{\"responseType\": \"0\",\"Data\": [] }";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }


        public void GetAllOrdersbyDate()
        {
            try
            {
                string StartDate = "";
                string EndDate = "";

                if (Request.QueryString["StartDate"] != null)
                {
                    if (!checkForSQLInjection(Request["StartDate"]))
                    {
                        StartDate = Request.QueryString["StartDate"].ToString();
                    }
                }
                if (Request.QueryString["EndDate"] != null)
                {
                    if (!checkForSQLInjection(Request["EndDate"]))
                    {
                        EndDate = Request.QueryString["EndDate"].ToString();
                    }
                }


                DataTable table = new DataTable();


                table = DBHandler.GetData(string.Format(@"
SELECT ID,OrderPlatformID,Source,ShopifyOrderID,app_id,browser_ip,contact_email,CreatedAt,OrderTime,Shopify_CreatedAt,Shopify_UpdatedAt,Currency,Subtotal,Total,Total_Tax,Financial_Status,Fulfillment_status,Gateway,OrderNumber,TotalPriceUSD,ShopifyPayload,CustomerID,DeliveryStatus,CancelReason,Latitude,Longitude,CustomerAddressID,CreatedBy,BranchID,Created_at,Assigned_at,Picked_at,Cancelled_at,Delivered_at,Verified_at,AssignedRiderID,Accepted_at,OrderStatus,invc_sid,OrderChecked,AppliedRuleID,DSPID,VoucherID,VoucherCode,VoucherValue,PrescriptionURL,Arrived_at,DeliveryFees,Discount,RefOrderID,RepunchedOrderID,PaymentMethod,DeliveryTime,PriorityOrder,ShopifyTransactionID,HasPriceDifference,IsQtyUnavailable,IsPrescriptionRequired,RiderAssignedAt,Distance,FBR_POS_FEE,MasterBranch,RepunchReason,PrismPunchReason,IsBranchAccepted,BranchDeclineReason,DSPOrderID,BranchAcceptedAt,BranchDeclinedAt,ItemCount
, (SELECT title FROM branch WHERE id = orders.`BranchID`) AS BranchName 
, IFNULL((SELECT CONCAT(firstname , ' ' , lastname) FROM riders WHERE id = orders.`AssignedRiderID`),'N/A') AS RiderName
 FROM orders WHERE createdat BETWEEN '{0}' AND '{1}' -- and AssignedRiderID = 50
  LIMIT 100000
 

", StartDate, EndDate));


                var JSONString = new StringBuilder();
                if (table.Rows.Count > 0)
                {
                    ImportExport.DataTableToExcel(table, "<h2>" + "Orders Data (From: " + Convert.ToDateTime(StartDate).ToString("dd-MMM-yyyy") + " To: " + Convert.ToDateTime(EndDate).AddDays(-1).ToString("dd-MMM-yyyy") + ")" + "</h2>");
                }
                else
                {
                    string Message = "No records found in this date range";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        public void MapAPILog()
        {
            try
            {
                string CustomerID = "0";
                string DeviceID = "0";
                string Platform = "";
                string GeoCode = "";
                string AddressCount = "0";
                

                if (Request.QueryString["CustomerID"] != null)
                {
                    if (!checkForSQLInjection(Request["CustomerID"]))
                    {
                        CustomerID = Request.QueryString["CustomerID"].ToString();
                    }
                }
                if (Request.QueryString["DeviceID"] != null)
                {
                    if (!checkForSQLInjection(Request["DeviceID"]))
                    {
                        DeviceID = Request.QueryString["DeviceID"].ToString();
                    }
                }
                if (Request.QueryString["Platform"] != null)
                {
                    if (!checkForSQLInjection(Request["Platform"]))
                    {
                        Platform = Request.QueryString["Platform"].ToString();
                    }
                }
                if (Request.QueryString["GeoCode"] != null)
                {
                    if (!checkForSQLInjection(Request["GeoCode"]))
                    {
                        GeoCode = Request.QueryString["GeoCode"].ToString();
                    }
                }
                if (Request.QueryString["AddressCount"] != null)
                {
                    if (!checkForSQLInjection(Request["AddressCount"]))
                    {
                        AddressCount = Request.QueryString["AddressCount"].ToString();
                    }
                }


                int ab = DBHandler.InsertDataWithIDForOrder(string.Format("insert into mapapilog (CustomerID, DeviceID, Platform, Created, GeoCode, AddressCount)Values('{0}','{1}','{2}','{3}','{4}','{5}')",
                                                        CustomerID, DeviceID, Platform , DateTime.Now.ToString("yyyy-MM-dd H:mm:ss"), GeoCode, AddressCount));

                if (ab > 0)
                {
                    string Message = "{\"ResponseType\": 1,\"Data\": [{\"Message\": \"Record added successfully\"}]}";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }
                else
                {
                    string Message = "{\"ResponseType\": 0,\"Data\": [{\"Message\": \"Cannot add record at the moment\"}]}";


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(Message.ToString());
                }


            }
            catch (Exception eee)
            { }
        }

        public void GetBranchCodeByLatLng()
        {
            try
            {
                string lat = "";
                string lng = "";

                if (Request.QueryString["lat"] != null)
                {
                    if (!checkForSQLInjection(Request["lat"]))
                    {
                        lat = Request.QueryString["lat"].ToString();
                    }
                }
                if (Request.QueryString["lng"] != null)
                {
                    if (!checkForSQLInjection(Request["lng"]))
                    {
                        lng = Request.QueryString["lng"].ToString();
                    }
                }


                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
                       | SecurityProtocolType.Tls11
                       | SecurityProtocolType.Ssl3
                       | SecurityProtocolType.Tls12;

                //var httpWebRequest = (HttpWebRequest)WebRequest.Create(string.Format("https://backend.Jewar.pk/api/WebRequestsAPI/GetBranchCodeByLatLng?lat={0}&lng={1}", lat, lng));
                var httpWebRequest = (HttpWebRequest)WebRequest.Create(string.Format("http://staging.Jewar.pk/api/WebRequestsAPI/GetBranchCodeByLatLngV1?lat={0}&lng={1}", lat, lng));


                httpWebRequest.Method = "GET";




                //ServicePointManager.Expect100Continue = true;
                //ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();


                    Response.Clear();
                    Response.ContentType = "application/json; charset=utf-8";
                    Response.Write(result.ToString());

                }



            }
            catch (Exception ex)
            {
                Response.Write(ex.Message);

            }
        }

        private string GetClientIpAddress()
        {
            string ipAddress = String.Empty;

            // Check for the client IP address in different server variables
            if (HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null)
            {
                ipAddress = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            }
            else if (HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"] != null)
            {
                ipAddress = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
            }

            return ipAddress;
        }





        //public void GetApplicationPoolCollection()
        //{
        //    new ServerManager().ApplicationPools["Your_App_Pool_Name"]?.Recycle();
        //}

        //public void UploadBase64ToS3(string base64String, string FileName, string FolderName, bool isPNG)
        //{
        //    AppResponse response = new AppResponse();
        //    try
        //    {
        //        if (isPNG)
        //            base64String = base64String.Replace("data:image/png;base64,", "");
        //        else
        //            base64String = base64String.Replace("data:image/jpeg;base64,", "");


        //        string ext = isPNG ? ".png" : ".jpg";  


        //        IAmazonS3 client = new AmazonS3Client(_awsAccessKey, _awsSecretKey, RegionEndpoint.APSoutheast1);

        //        //IAmazonS3 client;
        //        byte[] bytes = Convert.FromBase64String(base64String);

        //        using (client)
        //        {
        //            var request = new PutObjectRequest
        //            {
        //                BucketName = _bucketName,
        //                CannedACL = S3CannedACL.PublicRead,
        //                //Key = string.Format("UPLOADS/{0}", FileName)
        //                Key = FolderName + "/" + FileName + ext
        //            };
        //            using (var ms = new MemoryStream(bytes))
        //            {
        //                request.InputStream = ms;
        //                client.PutObject(request);
        //            }
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        response.ResponseType = 2;
        //        response.Msg = ex.Message;
        //    }
        //    return response;
        //}

        //public void ResetAppPool()
        //{
        //    var serverManager = new ServerManager();
        //    var appPool = serverManager.ApplicationPools.FirstOrDefault(ap => ap.Name.Equals("AppPoolName"));
        //    appPool.Start();
        //}

        public string ValidateJWT(string Token)
        {
            string Message = "";
            try
            {
                var hashPart = Token.Split('.')[2];
                var payloadPart = Token.Split('.')[1];
                var headerPart = Token.Split('.')[0];

                var sha256 = new HMACSHA256(Encoding.UTF8.GetBytes("my-secret_key_for_Jewar"));
                var expectedHashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes($"{headerPart}.{payloadPart}"));
                var expectedHash = Base64UrlEncoder.Encode(expectedHashBytes);

                //var JObject = Base64UrlEncoder.Decode(payloadPart);
                JObject json = JObject.Parse(Base64UrlEncoder.Decode(payloadPart));

                double Expiry = Convert.ToInt32(json["Expiry"]);

                DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
                dateTime = dateTime.AddSeconds(Expiry).ToLocalTime();

                if (hashPart == expectedHash)
                {
                    if (dateTime > DateTime.Now)
                    {
                        Message = "Valid";
                    }
                    else
                    {
                        Message = "Expired";
                    }
                }
                else
                {
                    Message = "Invalid";
                }
            }
            catch (Exception ee)
            {
                Message = "Invalid";
            }
            return Message;
        }



        public static string GenerateCustomerJWTToken(string CustomerID)
        {
            string JWTCode = "";
            try
            {
                var header = new
                {
                    alg = "HS256",
                    typ = "JWT"
                };

                var headerPart = Base64UrlEncoder.Encode(JsonConvert.SerializeObject(header));

                var payload = new
                {
                    Platform = "https://www.Jewar.pk",
                    Expiry = (int)DateTime.UtcNow.AddMinutes(15).Subtract(new DateTime(1970, 1, 1)).TotalSeconds,
                    ID = CustomerID
                };

                var payloadPart = Base64UrlEncoder.Encode(JsonConvert.SerializeObject(payload));


                var secret = "my-secret_key_for_Jewar_customer";
                var sha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret));
                var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes($"{headerPart}.{payloadPart}"));
                var hash = Base64UrlEncoder.Encode(hashBytes);


                var jwt = $"{headerPart}.{payloadPart}.{hash}";
                // Response.Write(jwt);


                JWTCode = jwt;




            }
            catch (Exception ex)
            {
                //Response.Write(ex.Message);
            }

            return JWTCode;
        }


        public string ValidateCustomerJWT(string Token, string CustomerID)
        {
            string Message = "";
            try
            {
                var hashPart = Token.Split('.')[2];
                var payloadPart = Token.Split('.')[1];
                var headerPart = Token.Split('.')[0];

                var sha256 = new HMACSHA256(Encoding.UTF8.GetBytes("my-secret_key_for_Jewar_customer"));
                var expectedHashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes($"{headerPart}.{payloadPart}"));
                var expectedHash = Base64UrlEncoder.Encode(expectedHashBytes);

                //var JObject = Base64UrlEncoder.Decode(payloadPart);
                JObject json = JObject.Parse(Base64UrlEncoder.Decode(payloadPart));

                double Expiry = Convert.ToInt32(json["Expiry"]);
                CustomerID = json["ID"].ToString();

                DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
                dateTime = dateTime.AddSeconds(Expiry).ToLocalTime();

                if (hashPart == expectedHash)
                {
                    Message = "Valid";
                    //if (dateTime > DateTime.Now)
                    //{
                    //    Message = "Valid";
                    //}
                    //else
                    //{
                    //    Message = "Expired";
                    //}
                }
                else
                {
                    Message = "Invalid";
                }
            }
            catch (Exception ee)
            {
                Message = "Invalid";
            }
            return Message + "," + CustomerID;
        }


        public static string GenerateVerificationCode()
        {
            string VerificationCode = "";
            try
            {
                var chars = "0123456789";
                var random = new Random();
                VerificationCode = new string(
                    Enumerable.Repeat(chars, 4)
                              .Select(s => s[random.Next(s.Length)])
                              .ToArray());
            }
            catch (Exception ex)
            { }

            //VerificationCode = "1234";

            return VerificationCode;
        }

        public static string GenerateAccessToken()
        {
            string VerificationCode = "";
            try
            {
                var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-_";
                var random = new Random();
                VerificationCode = new string(
                    Enumerable.Repeat(chars, 762)
                              .Select(s => s[random.Next(s.Length)])
                              .ToArray());
            }
            catch (Exception ex)
            { }

            //VerificationCode = "1234";

            return VerificationCode;
        }


        public static Boolean checkForSQLInjection(string userInput)
        {

            bool isSQLInjection = false;

            string[] sqlCheckList = { "-- ","'",

                                       ";--" ,

                                       ";",

                                       "/*",

                                       "*/",

                                        "@@",
                                         

                                        "char ",

                                       "nchar ",

                                       "varchar ",

                                       "nvarchar ",

                                       "alter ",

                                       "begin ",

                                       "cast ",

                                       "create ",

                                       "cursor ",

                                       "declare ",

                                       "delete ",

                                       "drop ",


                                       "exec ",

                                       "execute ",

                                       "fetch ",

                                            "insert ",

                                          "kill ",

                                             "select ",

                                           "sys ",

                                            "sysobjects ",

                                            "syscolumns ",

                                           " table ",

                                           "update "

                                       };

            string CheckString = userInput.Replace("'", "''");

            for (int i = 0; i <= sqlCheckList.Length - 1; i++)
            {

                if ((CheckString.IndexOf(sqlCheckList[i],

    StringComparison.OrdinalIgnoreCase) >= 0))

                { isSQLInjection = true; }
            }

            return isSQLInjection;
        }



    }
}


